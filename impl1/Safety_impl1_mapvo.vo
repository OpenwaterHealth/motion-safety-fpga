
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 3.13.0.56.2

// ldbanno -n Verilog -o Safety_impl1_mapvo.vo -w -neg -gui -msgset C:/Project/Working/FPGA/HOME/Lattice/4162025/Safety/Rev_1/promote.xml Safety_impl1_map.ncd 
// Netlist created on Wed Apr 16 13:54:27 2025
// Netlist written on Wed Apr 16 13:54:29 2025
// Design is for device LCMXO2-2000HC
// Design is for package TQFP100
// Design is for performance grade 4

`timescale 1 ns / 1 ps

module top ( rstn, system_reset_n, clk_50mhz, laser_pulse, pwr_good, 
             laser_pwr_en1_n, watchdog_timeout_led_n, calibrated_led_n, 
             peak_error_led_n, pulse_error_led_n, rate_error_led_n, 
             test_pass_led_n, test_fail_led_n, TA_shutdown, adc_sdo, adc_sck, 
             adc_convert, scl, sda, temp_scl, temp_sda, prom_scl, prom_sda, 
             heartbeat_n, spare1, spare2, spare3, spare4, gpio1, gpio2, gpio3, 
             gpio4 );
  input  rstn, system_reset_n, clk_50mhz, laser_pulse, pwr_good, adc_sdo;
  output laser_pwr_en1_n, watchdog_timeout_led_n, calibrated_led_n, 
         peak_error_led_n, pulse_error_led_n, rate_error_led_n, 
         test_pass_led_n, test_fail_led_n, TA_shutdown, adc_sck, adc_convert, 
         temp_scl, temp_sda, prom_scl, prom_sda, heartbeat_n, spare1, spare2, 
         spare3, spare4, gpio1, gpio2, gpio3, gpio4;
  inout  scl, sda;
  wire   \adc_control/convert_count_7 , \adc_control/n38 , 
         \adc_control/clk_div2_enable_258 , \adc_control/n6035 , clk_div2, 
         \adc_control/n13143 , \adc_control/convert_count_6 , 
         \adc_control/convert_count_5 , \adc_control/n39 , \adc_control/n40 , 
         \adc_control/n13142 , \adc_control/convert_count_4 , 
         \adc_control/convert_count_3 , \adc_control/n41 , \adc_control/n42 , 
         \adc_control/n13141 , \adc_control/convert_count_2 , 
         \adc_control/convert_count_1 , \adc_control/n43 , \adc_control/n44 , 
         \adc_control/n13140 , \adc_control/convert_count_0 , 
         \adc_control/n45 , \i2c_slave_top/registers/n16550 , 
         \i2c_slave_top/registers/addr_i_5 , \i2c_slave_top/registers/n13114 , 
         \i2c_slave_top/registers/addr_i_7_N_1056_5 , 
         \i2c_slave_top/registers/addr_i_7_N_1056_6 , 
         \i2c_slave_top/registers/n13115 , \i2c_slave_top/registers/n16521 , 
         \i2c_slave_top/registers/n16435 , \i2c_slave_top/registers/n13113 , 
         \i2c_slave_top/registers/addr_i_7_N_1056_3 , 
         \i2c_slave_top/registers/addr_i_7_N_1056_4 , 
         \i2c_slave_top/registers/n16548 , \i2c_slave_top/registers/n16559 , 
         \i2c_slave_top/wr_done_reg1_i , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_i , 
         \i2c_slave_top/registers/n13112 , 
         \i2c_slave_top/registers/addr_i_7_N_1056_1 , 
         \i2c_slave_top/registers/addr_i_7_N_1056_2 , 
         \i2c_slave_top/wr_done_reg2_i , \i2c_slave_top/n16546 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i 
         , next_state_i_3_N_181_0, \i2c_slave_top/registers/addr_i_7_N_1056_0 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i 
         , \i2c_slave_top/registers/addr_i_7 , 
         \i2c_slave_top/registers/addr_i_7_N_1056_7 , 
         \limit_check/logic_check/count_6 , \limit_check/logic_check/count_5 , 
         \i2c_slave_top/n16430 , \i2c_slave_top/n16425 , 
         \i2c_slave_top/registers/clk_div2_enable_237 , 
         \limit_check/logic_check/n13118 , 
         \limit_check/logic_check/count_31_N_1168_5 , 
         pulse_width_lower_limit_8, 
         \limit_check/logic_check/count_31_N_1168_6 , 
         pulse_width_lower_limit_9, \limit_check/logic_check/n13119 , 
         \limit_check/logic_check/count_30 , 
         \limit_check/logic_check/count_29 , \i2c_slave_top/n16422 , 
         \i2c_slave_top/n16419 , \i2c_slave_top/registers/clk_div2_enable_253 , 
         \limit_check/logic_check/n13130 , 
         \limit_check/logic_check/count_31_N_1168_29 , 
         pulse_width_lower_limit_30, 
         \limit_check/logic_check/count_31_N_1168_30 , 
         pulse_width_lower_limit_31, \limit_check/logic_check/n13131 , 
         \limit_check/logic_check/count_28 , 
         \limit_check/logic_check/count_27 , \i2c_slave_top/n16414 , 
         \i2c_slave_top/n16421 , \limit_check/logic_check/n13129 , 
         \limit_check/logic_check/count_31_N_1168_27 , 
         pulse_width_lower_limit_26, 
         \limit_check/logic_check/count_31_N_1168_28 , 
         pulse_width_lower_limit_27, \limit_check/logic_check/count_2 , 
         \limit_check/logic_check/count_1 , \i2c_slave_top/n16420 , 
         \i2c_slave_top/n16415 , \limit_check/logic_check/n13116 , 
         \limit_check/logic_check/count_31_N_1168_1 , 
         pulse_width_lower_limit_28, 
         \limit_check/logic_check/count_31_N_1168_2 , 
         pulse_width_lower_limit_29, \limit_check/logic_check/n13117 , 
         \limit_check/logic_check/count_26 , 
         \limit_check/logic_check/count_25 , \limit_check/logic_check/n13128 , 
         \limit_check/logic_check/count_31_N_1168_25 , 
         pulse_width_lower_limit_24, 
         \limit_check/logic_check/count_31_N_1168_26 , 
         pulse_width_lower_limit_25, \limit_check/logic_check/count_24 , 
         \limit_check/logic_check/count_23 , 
         \i2c_slave_top/registers/clk_div2_enable_245 , 
         \limit_check/logic_check/n13127 , 
         \limit_check/logic_check/count_31_N_1168_23 , 
         pulse_width_lower_limit_22, 
         \limit_check/logic_check/count_31_N_1168_24 , 
         pulse_width_lower_limit_23, \limit_check/logic_check/count_22 , 
         \limit_check/logic_check/count_21 , \limit_check/logic_check/n13126 , 
         \limit_check/logic_check/count_31_N_1168_21 , 
         pulse_width_lower_limit_20, 
         \limit_check/logic_check/count_31_N_1168_22 , 
         pulse_width_lower_limit_21, \limit_check/logic_check/count_20 , 
         \limit_check/logic_check/count_19 , 
         \i2c_slave_top/registers/clk_div2_enable_229 , 
         \limit_check/logic_check/n13125 , 
         \limit_check/logic_check/count_31_N_1168_19 , 
         pulse_width_lower_limit_2, 
         \limit_check/logic_check/count_31_N_1168_20 , 
         pulse_width_lower_limit_3, \limit_check/logic_check/count_4 , 
         \limit_check/logic_check/count_3 , 
         \limit_check/logic_check/count_31_N_1168_3 , 
         pulse_width_lower_limit_6, 
         \limit_check/logic_check/count_31_N_1168_4 , 
         pulse_width_lower_limit_7, \limit_check/logic_check/count_18 , 
         \limit_check/logic_check/count_17 , \limit_check/logic_check/n13124 , 
         \limit_check/logic_check/count_31_N_1168_17 , 
         pulse_width_lower_limit_18, 
         \limit_check/logic_check/count_31_N_1168_18 , 
         pulse_width_lower_limit_19, \limit_check/logic_check/count_16 , 
         \limit_check/logic_check/count_15 , \limit_check/logic_check/n13123 , 
         \limit_check/logic_check/count_31_N_1168_15 , 
         pulse_width_lower_limit_16, 
         \limit_check/logic_check/count_31_N_1168_16 , 
         pulse_width_lower_limit_17, \limit_check/logic_check/count_14 , 
         \limit_check/logic_check/count_13 , \limit_check/logic_check/n13122 , 
         \limit_check/logic_check/count_31_N_1168_13 , 
         pulse_width_lower_limit_14, 
         \limit_check/logic_check/count_31_N_1168_14 , 
         pulse_width_lower_limit_15, \limit_check/logic_check/count_12 , 
         \limit_check/logic_check/count_11 , \limit_check/logic_check/n13121 , 
         \limit_check/logic_check/count_31_N_1168_11 , 
         pulse_width_lower_limit_12, 
         \limit_check/logic_check/count_31_N_1168_12 , 
         pulse_width_lower_limit_13, \limit_check/logic_check/count_10 , 
         \limit_check/logic_check/count_9 , \limit_check/logic_check/n13120 , 
         \limit_check/logic_check/count_31_N_1168_9 , 
         pulse_width_lower_limit_10, 
         \limit_check/logic_check/count_31_N_1168_10 , 
         pulse_width_lower_limit_11, \limit_check/logic_check/count_31 , 
         \limit_check/logic_check/count_31_N_1168_31 , 
         pulse_width_lower_limit_4, pulse_width_lower_limit_5, 
         \limit_check/logic_check/count_8 , \limit_check/logic_check/count_7 , 
         \i2c_slave_top/registers/clk_div2_enable_35 , 
         \limit_check/logic_check/count_31_N_1168_7 , 
         pulse_width_upper_limit_0, 
         \limit_check/logic_check/count_31_N_1168_8 , 
         pulse_width_upper_limit_1, \limit_check/logic_check/count_0 , 
         pulse_width_lower_limit_0, 
         \limit_check/logic_check/count_31_N_1168_0 , 
         pulse_width_lower_limit_1, \heart_beat/n6 , \heart_beat/n7 , 
         \heart_beat/n43 , \heart_beat/n44 , \heart_beat/prescale[15] , 
         \heart_beat/n13144 , \heart_beat/n13145 , \heart_beat/n8 , 
         \heart_beat/n45 , \heart_beat/n70 , \heart_beat/n13139 , 
         \heart_beat/n2 , \heart_beat/n3 , \heart_beat/n71 , \heart_beat/n72 , 
         \heart_beat/n13138 , \heart_beat/n4 , \heart_beat/n5 , 
         \heart_beat/n73 , \heart_beat/n74 , \heart_beat/n13137 , 
         \heart_beat/n6_adj_1639 , \heart_beat/n7_adj_1638 , \heart_beat/n75 , 
         \heart_beat/n76 , \heart_beat/n13136 , \heart_beat/n8_adj_1637 , 
         \heart_beat/n9 , \heart_beat/n77 , \heart_beat/n78 , 
         \heart_beat/n13135 , \heart_beat/n10 , \heart_beat/n11 , 
         \heart_beat/n79 , \heart_beat/n80 , \heart_beat/n13134 , 
         \heart_beat/n12 , \heart_beat/n13 , \heart_beat/n81 , 
         \heart_beat/n82 , \heart_beat/n13133 , \heart_beat/n14 , 
         \heart_beat/n15 , \heart_beat/n83 , \heart_beat/n84 , 
         \heart_beat/n13132 , \heart_beat/n16 , \heart_beat/n85 , 
         heartbeat_n_c_7, \heart_beat/n38 , \heart_beat/n13147 , 
         \heart_beat/n2_adj_1643 , \heart_beat/n3_adj_1642 , \heart_beat/n39 , 
         \heart_beat/n40 , \heart_beat/n13146 , \heart_beat/n4_adj_1641 , 
         \heart_beat/n5_adj_1640 , \heart_beat/n41 , \heart_beat/n42 , 
         \adc_control/state_0 , \adc_control/n16528 , 
         \adc_control/clk_div2_enable_3 , \adc_control/adc_sck_temp , 
         \adc_control/adc_convert_N_1625 , \adc_control/n17325 , 
         \adc_control/state_1 , \adc_control/n1034 , 
         \adc_control/clk_div2_enable_257 , \adc_control/data_ready , 
         \adc_control/sck_count_0 , \adc_control/sck_count_1 , 
         \adc_control/n24 , \adc_control/n25 , 
         \adc_control/clk_div2_enable_255 , \adc_control/n6032 , 
         \adc_control/sck_count_3 , \adc_control/sck_count_2 , 
         \adc_control/n22 , \adc_control/n23 , \adc_control/state_3_N_1505_0 , 
         \adc_control/clk_div2_enable_5 , \adc_control/data_ready_N_1632 , 
         \adc_control/n1086 , \adc_control/clk_div2_enable_28 , 
         \n17327\010/BUF1 , \adc_control/clk_div2_enable_27 , 
         \adc_control/state_2 , n17327, \adc_control/clk_div2_enable_26 , 
         \adc_control/state_3 , clk_div2_N_18, rstn_c, clk_50mhz_c, 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16527 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16394 , 
         n4, 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n528 , 
         count_i_3__N_145, 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3870 , 
         n16517, \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n , 
         \i2c_slave_top/n3141 , \i2c_slave_top/registers/n10730 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_1 
         , \i2c_slave_top/n16523 , \i2c_slave_top/dynamic_control_15_N_647_0 , 
         \i2c_slave_top/registers/clk_div2_enable_256 , dynamic_control_0, 
         \i2c_slave_top/registers/clk_div2_enable_222 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_2 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i 
         , \i2c_slave_top/registers/clk_div2_N_18_enable_8 , 
         \i2c_slave_top/addr_start_0 , \i2c_slave_top/addr_start_1 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_4 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_3 
         , \i2c_slave_top/addr_start_2 , \i2c_slave_top/addr_start_3 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_6 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_5 
         , \i2c_slave_top/addr_start_4 , \i2c_slave_top/addr_start_5 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_8 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_7 
         , \i2c_slave_top/addr_start_6 , \i2c_slave_top/addr_start_7 , 
         \i2c_slave_top/registers/n2558 , \i2c_slave_top/registers/n2557 , 
         \i2c_slave_top/registers/n2527 , \i2c_slave_top/registers/n16383 , 
         \i2c_slave_top/registers/n2477 , \i2c_slave_top/registers/n16057 , 
         \i2c_slave_top/registers/n2577 , \i2c_slave_top/registers/n15490 , 
         \i2c_slave_top/registers/n5992 , \i2c_slave_top/data_out_0 , 
         \i2c_slave_top/registers/n2556 , \i2c_slave_top/registers/n2526 , 
         \i2c_slave_top/registers/n2476 , \i2c_slave_top/registers/n16197 , 
         \i2c_slave_top/registers/n2576 , \i2c_slave_top/data_out_1 , 
         \i2c_slave_top/registers/n2555 , \i2c_slave_top/registers/n2525 , 
         \i2c_slave_top/registers/n2475 , \i2c_slave_top/registers/n16194 , 
         \i2c_slave_top/registers/n2575 , \i2c_slave_top/data_out_2 , 
         \i2c_slave_top/registers/n2554 , \i2c_slave_top/registers/n2524 , 
         \i2c_slave_top/registers/n2474 , \i2c_slave_top/registers/n16191 , 
         \i2c_slave_top/registers/n2574 , \i2c_slave_top/data_out_3 , 
         \i2c_slave_top/registers/n2553 , \i2c_slave_top/registers/n2523 , 
         \i2c_slave_top/registers/n2473 , \i2c_slave_top/registers/n16186 , 
         \i2c_slave_top/registers/n2573 , \i2c_slave_top/data_out_4 , 
         \i2c_slave_top/registers/n2552 , \i2c_slave_top/registers/n2522 , 
         \i2c_slave_top/registers/n2472 , \i2c_slave_top/registers/n16180 , 
         \i2c_slave_top/registers/n2572 , \i2c_slave_top/data_out_5 , 
         \i2c_slave_top/registers/n2551 , \i2c_slave_top/registers/n2521 , 
         \i2c_slave_top/registers/n2471 , \i2c_slave_top/registers/n16177 , 
         \i2c_slave_top/registers/n2571 , \i2c_slave_top/data_out_6 , 
         \i2c_slave_top/registers/n2550 , \i2c_slave_top/registers/n2520 , 
         \i2c_slave_top/registers/n2470 , \i2c_slave_top/registers/n16174 , 
         \i2c_slave_top/registers/n2570 , \i2c_slave_top/data_out_7 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14674 , 
         \i2c_slave_top/i2cslave_controller_top/count_i_3__N_141 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14622 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i_N_355 
         , \i2c_slave_top/i2cslave_controller_top/addr_ack1_i , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16526 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4_adj_1752 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13259 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16524 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14547 , 
         scl_out, 
         \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_N_85 , 
         \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d1 , 
         \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d2 , 
         sda_out, 
         \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_N_85 , 
         \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d1 , 
         \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d2 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16431 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16525 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16428 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16376 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5943 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3183 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3097 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3086 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_11 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5952 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3095 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3096 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_10 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16432 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16402 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16083 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_12 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16427 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_146 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16330 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14091 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n506 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13380 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14057 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14551 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_140 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n17324 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1753 
         , \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n326 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n327 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13289 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13336 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_8 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2_adj_1757 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1756 
         , \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n324 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2_adj_1755 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1754 
         , \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n325 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13293 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13290 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2_adj_1761 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1760 
         , \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n322 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2_adj_1759 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1758 
         , \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n323 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13295 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13294 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2_adj_1765 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1764 
         , \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n320 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2_adj_1763 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1762 
         , \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n321 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13296 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13331 , 
         \n17327\000/BUF1 , 
         \i2c_slave_top/i2cslave_controller_top/wr_done_i_N_430 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/first_read_done 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i_N_362 
         , reset_n, 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3261 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/rw_mode_i_N_313 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16433 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14491 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_data_i 
         , \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n , 
         \i2c_slave_top/i2cslave_controller_top/i_sda , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack1_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_317 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14647 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_297 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16397 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3840 , 
         \n17327\009/BUF1 , \i2c_slave_top/registers/data_vld_dly_enable_2 , 
         n16408, \i2c_slave_top/registers/data_vld_dly , 
         \i2c_slave_top/registers/byte_cnt_0 , 
         \i2c_slave_top/registers/count_0 , \i2c_slave_top/registers/count_1 , 
         \i2c_slave_top/registers/n24_adj_1766 , \i2c_slave_top/registers/n25 , 
         \i2c_slave_top/registers/count_3__N_751 , 
         \i2c_slave_top/registers/count_3 , \i2c_slave_top/registers/count_2 , 
         \i2c_slave_top/registers/n22 , \i2c_slave_top/registers/n23 , n16518, 
         \i2c_slave_top/registers/data_vld_cnt , 
         \i2c_slave_top/state_1_N_1054_0 , \i2c_slave_top/n16417 , 
         \i2c_slave_top/registers/data_vld_cnt_N_1086 , 
         \i2c_slave_top/dynamic_control_15_N_647_2 , 
         \i2c_slave_top/dynamic_control_15_N_647_1 , 
         \i2c_slave_top/registers/dynamic_control_1 , 
         \i2c_slave_top/registers/dynamic_control_2 , 
         \i2c_slave_top/dynamic_control_15_N_647_4 , 
         \i2c_slave_top/dynamic_control_15_N_647_3 , 
         \i2c_slave_top/registers/dynamic_control_3 , 
         \i2c_slave_top/registers/dynamic_control_4 , 
         \i2c_slave_top/dynamic_control_15_N_647_6 , 
         \i2c_slave_top/dynamic_control_15_N_647_5 , 
         \i2c_slave_top/registers/dynamic_control_5 , 
         \i2c_slave_top/registers/dynamic_control_6 , 
         \i2c_slave_top/registers/n16522 , \i2c_slave_top/registers/n16389 , 
         \i2c_slave_top/registers/n5595 , \i2c_slave_top/registers/n16393 , 
         \i2c_slave_top/dynamic_control_15_N_647_7 , 
         \i2c_slave_top/registers/dynamic_control_7 , 
         \i2c_slave_top/dynamic_control_15_N_647_9 , 
         \i2c_slave_top/dynamic_control_15_N_647_8 , 
         \i2c_slave_top/registers/dynamic_control_8 , 
         \i2c_slave_top/registers/dynamic_control_9 , 
         \i2c_slave_top/dynamic_control_15_N_647_11 , 
         \i2c_slave_top/dynamic_control_15_N_647_10 , 
         \i2c_slave_top/registers/dynamic_control_10 , 
         \i2c_slave_top/registers/dynamic_control_11 , 
         \i2c_slave_top/dynamic_control_15_N_647_13 , 
         \i2c_slave_top/dynamic_control_15_N_647_12 , 
         \i2c_slave_top/registers/dynamic_control_12 , 
         \i2c_slave_top/registers/dynamic_control_13 , 
         \i2c_slave_top/dynamic_control_15_N_647_15 , 
         \i2c_slave_top/dynamic_control_15_N_647_14 , 
         \i2c_slave_top/registers/dynamic_control_14 , 
         \i2c_slave_top/registers/dynamic_control_15 , \n17327\001/BUF1 , 
         \i2c_slave_top/addr_i_7__N_736 , \i2c_slave_top/addr_i_7__N_704 , 
         \i2c_slave_top/registers/n5955 , \i2c_slave_top/registers/n16429 , 
         \i2c_slave_top/registers/n5747 , \i2c_slave_top/registers/n15502 , 
         \i2c_slave_top/registers/n5956 , \n17327\008/BUF1 , 
         \i2c_slave_top/addr_i_7__N_733 , \i2c_slave_top/addr_i_7__N_703 , 
         \i2c_slave_top/registers/n5959 , \i2c_slave_top/registers/n5813 , 
         \i2c_slave_top/registers/n5960 , \n17327\007/BUF1 , 
         \i2c_slave_top/addr_i_7__N_730 , \i2c_slave_top/addr_i_7__N_702 , 
         \i2c_slave_top/registers/n5963 , \i2c_slave_top/registers/n5817 , 
         \i2c_slave_top/registers/n5964 , \n17327\006/BUF1 , 
         \i2c_slave_top/addr_i_7__N_727 , \i2c_slave_top/addr_i_7__N_701 , 
         \i2c_slave_top/registers/n5967 , \i2c_slave_top/registers/n5821 , 
         \i2c_slave_top/registers/n5968 , \n17327\005/BUF1 , 
         \i2c_slave_top/addr_i_7__N_724 , \i2c_slave_top/addr_i_7__N_700 , 
         \i2c_slave_top/registers/n5971 , \i2c_slave_top/registers/n5825 , 
         \i2c_slave_top/registers/n5972 , \n17327\004/BUF1 , 
         \i2c_slave_top/addr_i_7__N_721 , \i2c_slave_top/addr_i_7__N_699 , 
         \i2c_slave_top/registers/n5975 , \i2c_slave_top/registers/n5829 , 
         \i2c_slave_top/registers/n5976 , \n17327\003/BUF1 , 
         \i2c_slave_top/addr_i_7__N_718 , \i2c_slave_top/addr_i_7__N_698 , 
         \i2c_slave_top/registers/n5979 , \i2c_slave_top/registers/n5833 , 
         \i2c_slave_top/registers/n5980 , \n17327\002/BUF1 , 
         \i2c_slave_top/addr_i_7__N_705 , \i2c_slave_top/addr_i_7__N_695 , 
         \i2c_slave_top/registers/n5983 , \i2c_slave_top/registers/n5837 , 
         \i2c_slave_top/registers/n5984 , \i2c_slave_top/registers/state_1 , 
         \i2c_slave_top/registers/state_0 , 
         \i2c_slave_top/registers/byte_cnt_1 , 
         \i2c_slave_top/registers/state_1_N_741_0 , 
         \i2c_slave_top/registers/data_vld_dly_enable_1 , 
         \i2c_slave_top/registers/data_vld_dly_enable_4 , 
         \i2c_slave_top/registers/state_1_N_741_1 , 
         \limit_check/logic_check/n12_adj_1721 , 
         \limit_check/logic_check/n14579 , 
         \limit_check/logic_check/n8_adj_1742 , 
         \limit_check/logic_check/state_1 , \limit_check/logic_check/n2 , 
         \limit_check/logic_check/n12_adj_1741 , 
         \limit_check/logic_check/count_31_N_1099_1 , 
         \limit_check/logic_check/count_31_N_1099_0 , 
         \limit_check/logic_check/count_31_N_1099_3 , 
         \limit_check/logic_check/count_31_N_1099_2 , 
         \limit_check/logic_check/count_31_N_1099_5 , 
         \limit_check/logic_check/count_31_N_1099_4 , 
         \limit_check/logic_check/count_31_N_1099_7 , 
         \limit_check/logic_check/count_31_N_1099_6 , 
         \limit_check/logic_check/count_31_N_1099_9 , 
         \limit_check/logic_check/count_31_N_1099_8 , 
         \limit_check/logic_check/count_31_N_1099_11 , 
         \limit_check/logic_check/count_31_N_1099_10 , 
         \limit_check/logic_check/count_31_N_1099_13 , 
         \limit_check/logic_check/count_31_N_1099_12 , 
         \limit_check/logic_check/count_31_N_1099_15 , 
         \limit_check/logic_check/count_31_N_1099_14 , 
         \limit_check/logic_check/count_31_N_1099_17 , 
         \limit_check/logic_check/count_31_N_1099_16 , 
         \limit_check/logic_check/count_31_N_1099_19 , 
         \limit_check/logic_check/count_31_N_1099_18 , 
         \limit_check/logic_check/count_31_N_1099_21 , 
         \limit_check/logic_check/count_31_N_1099_20 , 
         \limit_check/logic_check/count_31_N_1099_23 , 
         \limit_check/logic_check/count_31_N_1099_22 , 
         \limit_check/logic_check/count_31_N_1099_25 , 
         \limit_check/logic_check/count_31_N_1099_24 , 
         \limit_check/logic_check/count_31_N_1099_27 , 
         \limit_check/logic_check/count_31_N_1099_26 , 
         \limit_check/logic_check/count_31_N_1099_29 , 
         \limit_check/logic_check/count_31_N_1099_28 , 
         \limit_check/logic_check/count_31_N_1099_31 , 
         \limit_check/logic_check/count_31_N_1099_30 , 
         \limit_check/logic_check/n16463 , \limit_check/logic_check/n14577 , 
         \limit_check/logic_check/count_31__N_1131 , 
         \limit_check/logic_check/rate_upper_limit_fail_N_1309 , 
         \limit_check/logic_check/n4_adj_1720 , 
         \limit_check/logic_check/state_2 , TA_shutdown_c, 
         \limit_check/logic_check/n13286 , \limit_check/logic_check/n14557 , 
         \limit_check/logic_check/laser_pulse_d1 , 
         \limit_check/logic_check/state_0 , \limit_check/logic_check/n16405 , 
         \limit_check/logic_check/n13433 , \limit_check/logic_check/n5697 , 
         \limit_check/logic_check/n355 , \limit_check/logic_check/n3 , 
         \limit_check/logic_check/n3782 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_7 , 
         \i2c_slave_top/i2cslave_controller_top/rw_mode_i , 
         \i2c_slave_top/i2cslave_controller_top/out_n__inv , 
         start_detect_i_N_352, 
         \limit_check/logic_check/pulse_lower_limit_fail_N_1286 , 
         \limit_check/logic_check/pulse_lower_limit_fail_N_1285 , 
         \limit_check/logic_check/n11_adj_1743 , pulse_lower_limit_fail, 
         \limit_check/logic_check/pulse_lower_limit_fail_N_1280 , 
         laser_pulse_c, pulse_upper_limit_fail, 
         \limit_check/logic_check/pulse_upper_limit_fail_N_1294 , 
         \limit_check/logic_check/n15465 , 
         \limit_check/logic_check/n62_adj_1745 , \limit_check/logic_check/n40 , 
         \limit_check/logic_check/n4_adj_1726 , 
         \limit_check/logic_check/n2_adj_1744 , rate_lower_limit_fail, 
         \limit_check/logic_check/rate_lower_limit_fail_N_1299 , 
         \i2c_slave_top/registers/clk_div2_enable_121 , GND_net, 
         rate_upper_limit_26, rate_upper_limit_27, rate_lower_limit_10, 
         \limit_check/logic_check/n16460 , rate_upper_limit_28, 
         rate_upper_limit_29, rate_lower_limit_15, rate_lower_limit_24, 
         \limit_check/logic_check/n16446 , rate_upper_limit_30, 
         \limit_check/logic_check/n16454 , rate_upper_limit_31, 
         \limit_check/logic_check/n3735 , rate_upper_limit_fail, 
         \limit_check/logic_check/rate_upper_limit_fail_N_1306 , reset_bus_i, 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16386 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/reset_bus_i_N_399 
         , n13409, 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/reset_bus_i_N_365 
         , rate_lower_limit_26, rate_lower_limit_27, \reset_generator/clk_d2 , 
         \reset_generator/clk_d2_N_16 , \limit_check/logic_check/n22_adj_1729 , 
         \limit_check/logic_check/n15735 , rate_upper_limit_25, 
         \reset_generator/in_d3 , \reset_generator/in_d2 , 
         \reset_generator/in_d1 , \reset_generator/reset_n_N_12 , 
         \limit_check/logic_check/n15224 , 
         \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d3 , 
         \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d3 , 
         \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n_N_83 , 
         \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n_N_83 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14652 , 
         n11577, \i2c_slave_top/registers/n5961 , 
         \i2c_slave_top/registers/n25_adj_1768 , spare2_c, 
         \i2c_slave_top/registers/clk_div2_enable_203 , spare1_c, 
         static_control_2, static_control_3, static_control_9, 
         static_control_8, test_pass_led_n_c, static_control_4, 
         test_fail_led_n_c, static_control_5, static_control_6, 
         pulse_error_led_n_c, rate_error_led_n_c, static_control_7, 
         \i2c_slave_top/registers/clk_div2_enable_211 , calibrated_led_n_c, 
         peak_error_led_n_c, laser_pwr_en1_n_c, stop_detect_i, 
         watchdog_timeout_led_n_c, 
         \i2c_slave_top/registers/cw_mon_current_limit_15 , 
         rate_upper_limit_15, \i2c_slave_top/registers/n2331 , 
         \i2c_slave_top/registers/n16373 , \i2c_slave_top/registers/n15527 , 
         \i2c_slave_top/registers/n15529 , 
         \i2c_slave_top/registers/cw_mon_current_limit_14 , 
         rate_lower_limit_14, rate_upper_limit_14, 
         \i2c_slave_top/registers/n2332 , \i2c_slave_top/registers/n16372 , 
         \i2c_slave_top/registers/n15524 , \i2c_slave_top/registers/n15526 , 
         \i2c_slave_top/registers/cw_mon_current_limit_11 , 
         rate_lower_limit_11, rate_upper_limit_11, 
         \i2c_slave_top/registers/n2335 , \i2c_slave_top/registers/n16369 , 
         \i2c_slave_top/registers/n15515 , \i2c_slave_top/registers/n15517 , 
         \i2c_slave_top/registers/cw_mon_current_limit_8 , rate_lower_limit_8, 
         rate_upper_limit_8, \i2c_slave_top/registers/n2338 , 
         \i2c_slave_top/registers/n16368 , \i2c_slave_top/registers/n15503 , 
         \i2c_slave_top/registers/n15505 , 
         \i2c_slave_top/registers/cw_mon_current_limit_13 , 
         rate_lower_limit_13, rate_upper_limit_13, 
         \i2c_slave_top/registers/n2333 , \i2c_slave_top/registers/n16371 , 
         \i2c_slave_top/registers/n15521 , \i2c_slave_top/registers/n15523 , 
         \i2c_slave_top/registers/cw_mon_current_limit_12 , 
         rate_lower_limit_12, rate_upper_limit_12, 
         \i2c_slave_top/registers/n2334 , \i2c_slave_top/registers/n16370 , 
         \i2c_slave_top/registers/n15518 , \i2c_slave_top/registers/n15520 , 
         \i2c_slave_top/registers/n14620 , \i2c_slave_top/registers/n14662 , 
         \i2c_slave_top/registers/n29 , \i2c_slave_top/registers/n79 , 
         \i2c_slave_top/registers/n96 , rate_upper_limit_22, 
         rate_upper_limit_6, \i2c_slave_top/registers/pwm_mon_current_limit_6 , 
         pulse_width_upper_limit_22, \i2c_slave_top/registers/n15546 , 
         \i2c_slave_top/registers/n15545 , \i2c_slave_top/registers/n15547 , 
         rate_upper_limit_23, rate_upper_limit_7, 
         \i2c_slave_top/registers/pwm_mon_current_limit_7 , 
         pulse_width_upper_limit_23, \i2c_slave_top/registers/n15549 , 
         \i2c_slave_top/registers/n15548 , \i2c_slave_top/registers/n15550 , 
         \i2c_slave_top/registers/n15576 , \i2c_slave_top/registers/n15575 , 
         rate_lower_limit_23, \i2c_slave_top/registers/n15573 , 
         \i2c_slave_top/registers/n15572 , rate_lower_limit_22, 
         \i2c_slave_top/registers/n15570 , \i2c_slave_top/registers/n15569 , 
         rate_lower_limit_21, \i2c_slave_top/registers/n15567 , 
         \i2c_slave_top/registers/n15566 , rate_lower_limit_20, 
         \i2c_slave_top/registers/n15564 , \i2c_slave_top/registers/n15563 , 
         rate_lower_limit_19, \i2c_slave_top/registers/n15561 , 
         \i2c_slave_top/registers/n15560 , rate_lower_limit_18, 
         \i2c_slave_top/registers/n15558 , \i2c_slave_top/registers/n15557 , 
         rate_lower_limit_17, \i2c_slave_top/registers/n15552 , 
         \i2c_slave_top/registers/n15551 , rate_lower_limit_16, 
         \i2c_slave_top/registers/pwm_mon_current_limit_8 , 
         \i2c_slave_top/registers/cw_current_limit_8 , 
         \i2c_slave_top/registers/pwm_current_limit_8 , 
         \i2c_slave_top/registers/drive_current_limit_8 , 
         \i2c_slave_top/registers/n15508 , rate_upper_limit_16, 
         rate_upper_limit_0, \i2c_slave_top/registers/pwm_mon_current_limit_0 , 
         pulse_width_upper_limit_16, \i2c_slave_top/registers/n15507 , 
         \i2c_slave_top/registers/n15506 , pwr_good_c_1, rate_upper_limit_9, 
         \i2c_slave_top/registers/cw_mon_current_limit_9 , rate_lower_limit_9, 
         \i2c_slave_top/registers/n15510 , \i2c_slave_top/registers/n15509 , 
         \i2c_slave_top/registers/n15511 , system_reset_n_c_2, 
         rate_upper_limit_10, 
         \i2c_slave_top/registers/cw_mon_current_limit_10 , 
         \i2c_slave_top/registers/n15513 , \i2c_slave_top/registers/n15512 , 
         \i2c_slave_top/registers/n15514 , rate_upper_limit_17, 
         rate_upper_limit_1, \i2c_slave_top/registers/pwm_mon_current_limit_1 , 
         pulse_width_upper_limit_17, \i2c_slave_top/registers/n15531 , 
         \i2c_slave_top/registers/n15530 , \i2c_slave_top/registers/n15532 , 
         rate_upper_limit_18, rate_upper_limit_2, 
         \i2c_slave_top/registers/pwm_mon_current_limit_2 , 
         pulse_width_upper_limit_18, \i2c_slave_top/registers/n15534 , 
         \i2c_slave_top/registers/n15533 , \i2c_slave_top/registers/n15535 , 
         rate_upper_limit_19, rate_upper_limit_3, 
         \i2c_slave_top/registers/pwm_mon_current_limit_3 , 
         pulse_width_upper_limit_19, \i2c_slave_top/registers/n15537 , 
         \i2c_slave_top/registers/n15536 , \i2c_slave_top/registers/n15538 , 
         rate_upper_limit_20, rate_upper_limit_4, 
         \i2c_slave_top/registers/pwm_mon_current_limit_4 , 
         pulse_width_upper_limit_20, \i2c_slave_top/registers/n15540 , 
         \i2c_slave_top/registers/n15539 , \i2c_slave_top/registers/n15541 , 
         \i2c_slave_top/registers/cw_mon_current_limit_7 , rate_lower_limit_7, 
         \i2c_slave_top/registers/pwm_current_limit_7 , 
         \i2c_slave_top/registers/drive_current_limit_7 , 
         \i2c_slave_top/registers/cw_current_limit_1 , 
         \i2c_slave_top/registers/static_control_1 , 
         \i2c_slave_top/registers/cw_mon_current_limit_6 , rate_lower_limit_6, 
         \i2c_slave_top/registers/pwm_current_limit_6 , 
         \i2c_slave_top/registers/drive_current_limit_6 , 
         \i2c_slave_top/registers/cw_mon_current_limit_5 , rate_lower_limit_5, 
         \i2c_slave_top/registers/pwm_current_limit_5 , 
         \i2c_slave_top/registers/drive_current_limit_5 , 
         \i2c_slave_top/registers/n15542 , 
         \i2c_slave_top/registers/cw_current_limit_2 , 
         pulse_width_upper_limit_2, 
         \i2c_slave_top/registers/static_control_10 , 
         \i2c_slave_top/registers/cw_mon_current_limit_4 , rate_lower_limit_4, 
         \i2c_slave_top/registers/pwm_current_limit_4 , 
         \i2c_slave_top/registers/drive_current_limit_4 , 
         \i2c_slave_top/registers/cw_current_limit_3 , 
         pulse_width_upper_limit_3, 
         \i2c_slave_top/registers/static_control_11 , 
         \i2c_slave_top/registers/cw_current_limit_4 , 
         pulse_width_upper_limit_4, 
         \i2c_slave_top/registers/static_control_12 , rate_upper_limit_21, 
         rate_upper_limit_5, \i2c_slave_top/registers/pwm_mon_current_limit_5 , 
         pulse_width_upper_limit_21, \i2c_slave_top/registers/n15543 , 
         \i2c_slave_top/registers/n15544 , 
         \i2c_slave_top/registers/cw_mon_current_limit_3 , rate_lower_limit_3, 
         \i2c_slave_top/registers/pwm_current_limit_3 , 
         \i2c_slave_top/registers/drive_current_limit_3 , 
         \i2c_slave_top/registers/cw_mon_current_limit_2 , rate_lower_limit_2, 
         \i2c_slave_top/registers/pwm_current_limit_2 , 
         \i2c_slave_top/registers/drive_current_limit_2 , 
         \i2c_slave_top/registers/cw_current_limit_5 , 
         pulse_width_upper_limit_5, 
         \i2c_slave_top/registers/static_control_13 , 
         \i2c_slave_top/registers/cw_mon_current_limit_1 , rate_lower_limit_1, 
         \i2c_slave_top/registers/pwm_current_limit_1 , 
         \i2c_slave_top/registers/drive_current_limit_1 , 
         \i2c_slave_top/registers/cw_current_limit_0 , 
         \i2c_slave_top/registers/static_control_0 , 
         \i2c_slave_top/registers/pwm_mon_current_limit_15 , 
         \i2c_slave_top/registers/cw_current_limit_15 , 
         \i2c_slave_top/registers/pwm_current_limit_15 , 
         \i2c_slave_top/registers/drive_current_limit_15 , 
         \i2c_slave_top/registers/pwm_mon_current_limit_14 , 
         \i2c_slave_top/registers/cw_current_limit_14 , 
         \i2c_slave_top/registers/pwm_current_limit_14 , 
         \i2c_slave_top/registers/drive_current_limit_14 , 
         \i2c_slave_top/registers/pwm_mon_current_limit_13 , 
         \i2c_slave_top/registers/cw_current_limit_13 , 
         \i2c_slave_top/registers/pwm_current_limit_13 , 
         \i2c_slave_top/registers/drive_current_limit_13 , 
         \i2c_slave_top/registers/pwm_mon_current_limit_12 , 
         \i2c_slave_top/registers/cw_current_limit_12 , 
         \i2c_slave_top/registers/pwm_current_limit_12 , 
         \i2c_slave_top/registers/drive_current_limit_12 , 
         \i2c_slave_top/registers/cw_current_limit_6 , 
         pulse_width_upper_limit_6, 
         \i2c_slave_top/registers/static_control_14 , 
         \i2c_slave_top/registers/pwm_mon_current_limit_11 , 
         \i2c_slave_top/registers/cw_current_limit_11 , 
         \i2c_slave_top/registers/pwm_current_limit_11 , 
         \i2c_slave_top/registers/drive_current_limit_11 , 
         \i2c_slave_top/registers/pwm_mon_current_limit_10 , 
         \i2c_slave_top/registers/cw_current_limit_10 , 
         \i2c_slave_top/registers/pwm_current_limit_10 , 
         \i2c_slave_top/registers/drive_current_limit_10 , 
         \i2c_slave_top/registers/pwm_mon_current_limit_9 , 
         \i2c_slave_top/registers/cw_current_limit_9 , 
         \i2c_slave_top/registers/pwm_current_limit_9 , 
         \i2c_slave_top/registers/drive_current_limit_9 , 
         \i2c_slave_top/registers/cw_mon_current_limit_0 , rate_lower_limit_0, 
         \i2c_slave_top/registers/pwm_current_limit_0 , 
         \i2c_slave_top/registers/drive_current_limit_0 , 
         \i2c_slave_top/registers/cw_current_limit_7 , 
         pulse_width_upper_limit_7, 
         \i2c_slave_top/registers/static_control_15 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16375 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_0 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_4 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_6 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_2 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n17204 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_1 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_5 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_3 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n17201 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_321 
         , \limit_check/logic_check/n18_adj_1727 , rate_lower_limit_31, 
         \limit_check/logic_check/n20_adj_1730 , rate_lower_limit_30, 
         \limit_check/logic_check/n15469 , \limit_check/logic_check/n15473 , 
         \limit_check/logic_check/n58 , \limit_check/logic_check/n52 , 
         \limit_check/logic_check/n60 , \limit_check/logic_check/n8_adj_1706 , 
         \limit_check/logic_check/n44_adj_1705 , 
         \limit_check/logic_check/n15415 , \limit_check/logic_check/n16447 , 
         \limit_check/logic_check/n16_adj_1734 , 
         \limit_check/logic_check/n15422 , \limit_check/logic_check/n48 , 
         \limit_check/logic_check/n10_adj_1704 , 
         \limit_check/logic_check/n34_adj_1703 , 
         \limit_check/logic_check/n15373 , \limit_check/logic_check/n16442 , 
         \limit_check/logic_check/n12_adj_1739 , 
         \limit_check/logic_check/n15378 , \limit_check/logic_check/n15380 , 
         \limit_check/logic_check/n38 , \limit_check/logic_check/n28 , 
         \limit_check/logic_check/n8_adj_1701 , 
         \limit_check/logic_check/n44_adj_1700 , 
         \limit_check/logic_check/n15217 , \limit_check/logic_check/n16538 , 
         \limit_check/logic_check/n16_adj_1718 , 
         \limit_check/logic_check/n48_adj_1671 , 
         \limit_check/logic_check/n10_adj_1699 , 
         \limit_check/logic_check/n34_adj_1698 , 
         \limit_check/logic_check/n15175 , \limit_check/logic_check/n16551 , 
         \limit_check/logic_check/n12_adj_1737 , 
         \limit_check/logic_check/n15180 , \limit_check/logic_check/n15182 , 
         \limit_check/logic_check/n38_adj_1645 , 
         \limit_check/logic_check/n28_adj_1644 , 
         \limit_check/logic_check/n40_adj_1646 , \limit_check/logic_check/n8 , 
         \limit_check/logic_check/n44_adj_1697 , 
         \limit_check/logic_check/n15019 , \limit_check/logic_check/n16468 , 
         \limit_check/logic_check/n16 , \limit_check/logic_check/n15026 , 
         \limit_check/logic_check/n48_adj_1676 , \limit_check/logic_check/n10 , 
         \limit_check/logic_check/n34 , \limit_check/logic_check/n14977 , 
         \limit_check/logic_check/n16472 , \limit_check/logic_check/n12 , 
         \limit_check/logic_check/n14982 , \limit_check/logic_check/n14984 , 
         \limit_check/logic_check/n38_adj_1648 , 
         \limit_check/logic_check/n28_adj_1647 , 
         \limit_check/logic_check/n40_adj_1649 , 
         \limit_check/logic_check/n8_adj_1694 , \limit_check/logic_check/n44 , 
         \limit_check/logic_check/n14814 , \limit_check/logic_check/n16494 , 
         \limit_check/logic_check/n16_adj_1677 , 
         \limit_check/logic_check/n14821 , 
         \limit_check/logic_check/n48_adj_1681 , 
         \limit_check/logic_check/n18_adj_1712 , 
         \limit_check/logic_check/n20_adj_1717 , 
         \limit_check/logic_check/n15271 , \limit_check/logic_check/n15275 , 
         \limit_check/logic_check/n58_adj_1655 , 
         \limit_check/logic_check/n52_adj_1654 , 
         \limit_check/logic_check/n60_adj_1656 , 
         \limit_check/logic_check/n10_adj_1693 , 
         \limit_check/logic_check/n34_adj_1672 , 
         \limit_check/logic_check/n14772 , \limit_check/logic_check/n16499 , 
         \limit_check/logic_check/n12_adj_1691 , 
         \limit_check/logic_check/n14777 , \limit_check/logic_check/n14779 , 
         \limit_check/logic_check/n38_adj_1651 , 
         \limit_check/logic_check/n28_adj_1650 , 
         \limit_check/logic_check/n40_adj_1652 , \limit_check/logic_check/n18 , 
         \limit_check/logic_check/n20_adj_1748 , 
         \limit_check/logic_check/n15073 , \limit_check/logic_check/n15077 , 
         \limit_check/logic_check/n58_adj_1658 , 
         \limit_check/logic_check/n52_adj_1657 , 
         \limit_check/logic_check/n60_adj_1659 , 
         \limit_check/logic_check/n18_adj_1653 , pulse_width_upper_limit_31, 
         \limit_check/logic_check/n20 , pulse_width_upper_limit_30, 
         \limit_check/logic_check/n14868 , \limit_check/logic_check/n14872 , 
         \limit_check/logic_check/n58_adj_1661 , 
         \limit_check/logic_check/n52_adj_1660 , 
         \limit_check/logic_check/n60_adj_1662 , rate_lower_limit_28, 
         \limit_check/logic_check/n15451 , 
         \limit_check/logic_check/n14_adj_1740 , 
         \limit_check/logic_check/n15346 , 
         \limit_check/logic_check/n22_adj_1713 , 
         \limit_check/logic_check/n15253 , 
         \limit_check/logic_check/n14_adj_1710 , 
         \limit_check/logic_check/n15148 , 
         \limit_check/logic_check/n22_adj_1746 , 
         \limit_check/logic_check/n15055 , \limit_check/logic_check/n14 , 
         \limit_check/logic_check/n14950 , \limit_check/logic_check/n22 , 
         pulse_width_upper_limit_28, \limit_check/logic_check/n14850 , 
         \limit_check/logic_check/n14_adj_1687 , pulse_width_upper_limit_15, 
         \limit_check/logic_check/n14745 , \i2c_slave_top/registers/n16388 , 
         \i2c_slave_top/registers/n16404 , \i2c_slave_top/registers/n16434 , 
         \i2c_slave_top/registers/clk_div2_enable_158 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_325 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5895 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5864 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16382 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16403 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n667 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16401 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n8 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n7_adj_1751 
         , \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n29 , 
         \limit_check/logic_check/n15062 , \limit_check/logic_check/n16464 , 
         \limit_check/logic_check/n15060 , \limit_check/logic_check/n62 , 
         \i2c_slave_top/registers/clk_div2_enable_173 , 
         \limit_check/logic_check/n14857 , \limit_check/logic_check/n16490 , 
         \limit_check/logic_check/n14855 , 
         \limit_check/logic_check/n62_adj_1735 , 
         \limit_check/logic_check/n15260 , \limit_check/logic_check/n16531 , 
         \limit_check/logic_check/n15258 , 
         \limit_check/logic_check/n62_adj_1749 , \adc_control/n6 , 
         \adc_control/n8 , \adc_control/n16462 , pulse_width_upper_limit_8, 
         \i2c_slave_top/registers/n2314 , \i2c_slave_top/registers/n86 , 
         \i2c_slave_top/registers/n5985 , \i2c_slave_top/registers/n5977 , 
         \i2c_slave_top/registers/n16398 , \i2c_slave_top/registers/n5957 , 
         \i2c_slave_top/registers/n16396 , \i2c_slave_top/registers/n16387 , 
         \i2c_slave_top/registers/n16409 , \i2c_slave_top/registers/n16380 , 
         \i2c_slave_top/registers/clk_div2_enable_188 , 
         \i2c_slave_top/registers/n5969 , 
         \i2c_slave_top/registers/clk_div2_enable_166 , 
         \i2c_slave_top/registers/n16381 , 
         \i2c_slave_top/registers/clk_div2_enable_196 , 
         \i2c_slave_top/registers/n16410 , \i2c_slave_top/registers/n16378 , 
         \i2c_slave_top/registers/clk_div2_enable_143 , 
         \i2c_slave_top/registers/n5981 , 
         \i2c_slave_top/registers/clk_div2_enable_136 , 
         \i2c_slave_top/registers/n16379 , \i2c_slave_top/registers/n5965 , 
         \i2c_slave_top/registers/n14656 , \i2c_slave_top/registers/n17 , 
         \i2c_slave_top/registers/n5 , 
         \i2c_slave_top/registers/clk_div2_enable_128 , 
         \i2c_slave_top/registers/clk_div2_enable_66 , 
         pulse_width_upper_limit_9, \i2c_slave_top/registers/n2313 , 
         pulse_width_upper_limit_10, \i2c_slave_top/registers/n2312 , 
         \i2c_slave_top/registers/clk_div2_enable_113 , 
         pulse_width_upper_limit_11, \i2c_slave_top/registers/n2311 , 
         pulse_width_upper_limit_12, \i2c_slave_top/registers/n2310 , 
         pulse_width_upper_limit_13, \i2c_slave_top/registers/n2309 , 
         pulse_width_upper_limit_14, \i2c_slave_top/registers/n2308 , 
         \i2c_slave_top/registers/n2307 , \i2c_slave_top/registers/n5973 , 
         \i2c_slave_top/registers/n16418 , \i2c_slave_top/registers/n16424 , 
         \i2c_slave_top/registers/n26 , \i2c_slave_top/registers/n27_adj_1767 , 
         \i2c_slave_top/registers/n24_adj_1769 , 
         \i2c_slave_top/registers/n16412 , 
         \i2c_slave_top/registers/clk_div2_enable_51 , 
         \i2c_slave_top/registers/n16411 , 
         \i2c_slave_top/registers/clk_div2_enable_59 , 
         \i2c_slave_top/registers/n16413 , 
         \i2c_slave_top/registers/clk_div2_enable_43 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16423 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n7 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16489 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16040 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16391 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16392 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16497 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16046 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3176 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16385 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16374 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16406 , 
         d_ff, 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16048 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1141 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16044 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1143 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3041 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n15702 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16042 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1144 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1145 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1142 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16407 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11685 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16390 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16399 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16377 , 
         \limit_check/logic_check/n32 , \limit_check/logic_check/n14962 , 
         \limit_check/logic_check/n16471 , \limit_check/logic_check/n16473 , 
         \i2c_slave_top/registers/clk_div2_enable_151 , 
         \limit_check/logic_check/n14989 , \limit_check/logic_check/n14952 , 
         \limit_check/logic_check/n16481 , \limit_check/logic_check/n16482 , 
         \limit_check/logic_check/n15733 , \limit_check/logic_check/n14959 , 
         \limit_check/logic_check/n15731 , \limit_check/logic_check/n15090 , 
         \limit_check/logic_check/n16543 , \limit_check/logic_check/n16544 , 
         \limit_check/logic_check/n16545 , \limit_check/logic_check/n15081 , 
         \limit_check/logic_check/n9 , \limit_check/logic_check/n11 , 
         \limit_check/logic_check/n16547 , 
         \i2c_slave_top/registers/clk_div2_enable_97 , 
         \limit_check/logic_check/n15103 , \limit_check/logic_check/n14914 , 
         \limit_check/logic_check/n16484 , 
         \limit_check/logic_check/n25_adj_1707 , 
         \limit_check/logic_check/n14994 , \limit_check/logic_check/n14924 , 
         \limit_check/logic_check/n16474 , \limit_check/logic_check/n16475 , 
         \limit_check/logic_check/n16476 , \limit_check/logic_check/n14939 , 
         \limit_check/logic_check/n14936 , \limit_check/logic_check/n16480 , 
         \limit_check/logic_check/n16556 , \limit_check/logic_check/n15134 , 
         \limit_check/logic_check/n16541 , \limit_check/logic_check/n15112 , 
         \limit_check/logic_check/n16542 , \limit_check/logic_check/n25 , 
         \limit_check/logic_check/n16552 , \limit_check/logic_check/n15192 , 
         \limit_check/logic_check/n16477 , \limit_check/logic_check/n16478 , 
         \limit_check/logic_check/n16479 , \limit_check/logic_check/n15004 , 
         \limit_check/logic_check/n15015 , \limit_check/logic_check/n15001 , 
         \limit_check/logic_check/n15710 , \limit_check/logic_check/n42 , 
         \limit_check/logic_check/n14883 , 
         \limit_check/logic_check/n9_adj_1732 , 
         \limit_check/logic_check/n11_adj_1692 , 
         \limit_check/logic_check/n16488 , \limit_check/logic_check/n14892 , 
         \limit_check/logic_check/n14905 , \limit_check/logic_check/n16483 , 
         pulse_width_upper_limit_26, pulse_width_upper_limit_27, 
         \limit_check/logic_check/n14921 , \limit_check/logic_check/n16469 , 
         \limit_check/logic_check/n16470 , \limit_check/logic_check/n15044 , 
         \limit_check/logic_check/n16485 , \limit_check/logic_check/n16486 , 
         \limit_check/logic_check/n16487 , 
         \limit_check/logic_check/n25_adj_1708 , 
         \limit_check/logic_check/n16492 , \limit_check/logic_check/n16493 , 
         \limit_check/logic_check/n14839 , \limit_check/logic_check/n16491 , 
         \limit_check/logic_check/n15722 , \limit_check/logic_check/n14830 , 
         \limit_check/logic_check/n16496 , \limit_check/logic_check/n16495 , 
         \limit_check/logic_check/n14828 , pulse_width_upper_limit_29, 
         \limit_check/logic_check/n14799 , pulse_width_upper_limit_25, 
         pulse_width_upper_limit_24, \limit_check/logic_check/n42_adj_1663 , 
         \limit_check/logic_check/n14796 , \limit_check/logic_check/n16501 , 
         \limit_check/logic_check/n16502 , \limit_check/logic_check/n16503 , 
         \limit_check/logic_check/n15741 , \limit_check/logic_check/n14810 , 
         \limit_check/logic_check/n14757 , \limit_check/logic_check/n16498 , 
         \limit_check/logic_check/n16500 , \limit_check/logic_check/n14784 , 
         \limit_check/logic_check/n32_adj_1668 , 
         \limit_check/logic_check/n14747 , \limit_check/logic_check/n16508 , 
         \limit_check/logic_check/n16509 , \limit_check/logic_check/n15664 , 
         \limit_check/logic_check/n14754 , \limit_check/logic_check/n15656 , 
         \limit_check/logic_check/n14709 , \limit_check/logic_check/n16514 , 
         \limit_check/logic_check/n14789 , \limit_check/logic_check/n14719 , 
         \limit_check/logic_check/n16504 , \limit_check/logic_check/n16505 , 
         \limit_check/logic_check/n16506 , \limit_check/logic_check/n14734 , 
         \limit_check/logic_check/n14731 , \limit_check/logic_check/n16507 , 
         \limit_check/logic_check/n15348 , \limit_check/logic_check/n16448 , 
         \limit_check/logic_check/n16449 , \limit_check/logic_check/n16450 , 
         \limit_check/logic_check/n15712 , \limit_check/logic_check/n15332 , 
         \limit_check/logic_check/n16453 , \limit_check/logic_check/n16455 , 
         \limit_check/logic_check/n11_adj_1686 , 
         \limit_check/logic_check/n16451 , \limit_check/logic_check/n16452 , 
         \limit_check/logic_check/n16457 , \limit_check/logic_check/n15150 , 
         \limit_check/logic_check/n16554 , \limit_check/logic_check/n16555 , 
         \limit_check/logic_check/n16549 , \limit_check/logic_check/n15739 , 
         \limit_check/logic_check/n16557 , \limit_check/logic_check/n16558 , 
         \limit_check/logic_check/n16553 , \limit_check/logic_check/n14687 , 
         \limit_check/logic_check/n16510 , \limit_check/logic_check/n16511 , 
         \limit_check/logic_check/n16512 , \limit_check/logic_check/n14700 , 
         \limit_check/logic_check/n9_adj_1736 , 
         \limit_check/logic_check/n16513 , \limit_check/logic_check/n14716 , 
         \i2c_slave_top/registers/clk_div2_enable_105 , 
         \limit_check/logic_check/n11_adj_1695 , 
         \limit_check/logic_check/n16515 , \limit_check/logic_check/n14678 , 
         \limit_check/logic_check/n15440 , \limit_check/logic_check/n16439 , 
         \limit_check/logic_check/n16440 , \limit_check/logic_check/n16441 , 
         \limit_check/logic_check/n15695 , \limit_check/logic_check/n15317 , 
         \limit_check/logic_check/n25_adj_1702 , 
         \limit_check/logic_check/n16437 , \limit_check/logic_check/n16438 , 
         \limit_check/logic_check/n15242 , \limit_check/logic_check/n16532 , 
         \limit_check/logic_check/n16533 , \limit_check/logic_check/n16534 , 
         \limit_check/logic_check/n15725 , \limit_check/logic_check/n15119 , 
         \limit_check/logic_check/n16539 , \limit_check/logic_check/n16540 , 
         \limit_check/logic_check/n16465 , \limit_check/logic_check/n16466 , 
         \limit_check/logic_check/n16467 , \limit_check/logic_check/n15672 , 
         rate_lower_limit_29, \limit_check/logic_check/n16436 , 
         \limit_check/logic_check/n15397 , \limit_check/logic_check/n16444 , 
         \limit_check/logic_check/n16445 , \limit_check/logic_check/n15706 , 
         \limit_check/logic_check/n15355 , \limit_check/logic_check/n15708 , 
         \limit_check/logic_check/n15199 , \limit_check/logic_check/n16535 , 
         \limit_check/logic_check/n16536 , \limit_check/logic_check/n16537 , 
         \limit_check/logic_check/n15157 , \limit_check/logic_check/n15737 , 
         \limit_check/logic_check/n15137 , \limit_check/logic_check/n15122 , 
         \limit_check/logic_check/n15160 , \limit_check/logic_check/n15233 , 
         \limit_check/logic_check/n15213 , \limit_check/logic_check/n15187 , 
         \limit_check/logic_check/n15202 , 
         \limit_check/logic_check/n42_adj_1719 , rate_upper_limit_24, 
         \limit_check/logic_check/n15231 , 
         \i2c_slave_top/registers/clk_div2_enable_181 , 
         \limit_check/logic_check/n15436 , 
         \i2c_slave_top/registers/clk_div2_enable_74 , 
         \limit_check/logic_check/n15409 , 
         \i2c_slave_top/registers/clk_div2_enable_90 , 
         \limit_check/logic_check/n15411 , \limit_check/logic_check/n15431 , 
         \limit_check/logic_check/n15367 , \limit_check/logic_check/n16443 , 
         \limit_check/logic_check/n15388 , 
         \limit_check/logic_check/n32_adj_1731 , 
         \i2c_slave_top/registers/clk_div2_enable_82 , 
         \limit_check/logic_check/n15033 , \limit_check/logic_check/n15035 , 
         \limit_check/logic_check/n32_adj_1733 , 
         \limit_check/logic_check/n15310 , \limit_check/logic_check/n16456 , 
         \limit_check/logic_check/n15390 , rate_lower_limit_25, 
         \limit_check/logic_check/n42_adj_1738 , 
         \limit_check/logic_check/n15342 , \limit_check/logic_check/n15282 , 
         \limit_check/logic_check/n15293 , \limit_check/logic_check/n15327 , 
         \limit_check/logic_check/n15306 , \limit_check/logic_check/n16458 , 
         \limit_check/logic_check/n16459 , 
         \limit_check/logic_check/n9_adj_1747 , 
         \limit_check/logic_check/n16461 , \limit_check/logic_check/n15458 , 
         \i2c_slave_top/registers/data_vld_dly_enable_3 , spare3_c_c, VCCI;

  adc_control_SLICE_0 \adc_control/SLICE_0 ( 
    .A0(\adc_control/convert_count_7 ), .DI0(\adc_control/n38 ), 
    .CE(\adc_control/clk_div2_enable_258 ), .LSR(\adc_control/n6035 ), 
    .CLK(clk_div2), .FCI(\adc_control/n13143 ), .F0(\adc_control/n38 ), 
    .Q0(\adc_control/convert_count_7 ));
  adc_control_SLICE_1 \adc_control/SLICE_1 ( 
    .A1(\adc_control/convert_count_6 ), .A0(\adc_control/convert_count_5 ), 
    .DI1(\adc_control/n39 ), .DI0(\adc_control/n40 ), 
    .CE(\adc_control/clk_div2_enable_258 ), .LSR(\adc_control/n6035 ), 
    .CLK(clk_div2), .FCI(\adc_control/n13142 ), .F0(\adc_control/n40 ), 
    .Q0(\adc_control/convert_count_5 ), .F1(\adc_control/n39 ), 
    .Q1(\adc_control/convert_count_6 ), .FCO(\adc_control/n13143 ));
  adc_control_SLICE_2 \adc_control/SLICE_2 ( 
    .A1(\adc_control/convert_count_4 ), .A0(\adc_control/convert_count_3 ), 
    .DI1(\adc_control/n41 ), .DI0(\adc_control/n42 ), 
    .CE(\adc_control/clk_div2_enable_258 ), .LSR(\adc_control/n6035 ), 
    .CLK(clk_div2), .FCI(\adc_control/n13141 ), .F0(\adc_control/n42 ), 
    .Q0(\adc_control/convert_count_3 ), .F1(\adc_control/n41 ), 
    .Q1(\adc_control/convert_count_4 ), .FCO(\adc_control/n13142 ));
  adc_control_SLICE_3 \adc_control/SLICE_3 ( 
    .A1(\adc_control/convert_count_2 ), .A0(\adc_control/convert_count_1 ), 
    .DI1(\adc_control/n43 ), .DI0(\adc_control/n44 ), 
    .CE(\adc_control/clk_div2_enable_258 ), .LSR(\adc_control/n6035 ), 
    .CLK(clk_div2), .FCI(\adc_control/n13140 ), .F0(\adc_control/n44 ), 
    .Q0(\adc_control/convert_count_1 ), .F1(\adc_control/n43 ), 
    .Q1(\adc_control/convert_count_2 ), .FCO(\adc_control/n13141 ));
  adc_control_SLICE_4 \adc_control/SLICE_4 ( 
    .A1(\adc_control/convert_count_0 ), .DI1(\adc_control/n45 ), 
    .CE(\adc_control/clk_div2_enable_258 ), .LSR(\adc_control/n6035 ), 
    .CLK(clk_div2), .F1(\adc_control/n45 ), .Q1(\adc_control/convert_count_0 ), 
    .FCO(\adc_control/n13140 ));
  i2c_slave_top_registers_SLICE_5 \i2c_slave_top/registers/SLICE_5 ( 
    .A1(\i2c_slave_top/registers/n16550 ), 
    .A0(\i2c_slave_top/registers/addr_i_5 ), 
    .FCI(\i2c_slave_top/registers/n13114 ), 
    .F0(\i2c_slave_top/registers/addr_i_7_N_1056_5 ), 
    .F1(\i2c_slave_top/registers/addr_i_7_N_1056_6 ), 
    .FCO(\i2c_slave_top/registers/n13115 ));
  i2c_slave_top_registers_SLICE_6 \i2c_slave_top/registers/SLICE_6 ( 
    .A1(\i2c_slave_top/registers/n16521 ), 
    .A0(\i2c_slave_top/registers/n16435 ), 
    .FCI(\i2c_slave_top/registers/n13113 ), 
    .F0(\i2c_slave_top/registers/addr_i_7_N_1056_3 ), 
    .F1(\i2c_slave_top/registers/addr_i_7_N_1056_4 ), 
    .FCO(\i2c_slave_top/registers/n13114 ));
  i2c_slave_top_SLICE_7 \i2c_slave_top/SLICE_7 ( 
    .A1(\i2c_slave_top/registers/n16548 ), 
    .A0(\i2c_slave_top/registers/n16559 ), .M1(\i2c_slave_top/wr_done_reg1_i ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_i ), 
    .CLK(clk_div2), .FCI(\i2c_slave_top/registers/n13112 ), 
    .F0(\i2c_slave_top/registers/addr_i_7_N_1056_1 ), 
    .Q0(\i2c_slave_top/wr_done_reg1_i ), 
    .F1(\i2c_slave_top/registers/addr_i_7_N_1056_2 ), 
    .Q1(\i2c_slave_top/wr_done_reg2_i ), 
    .FCO(\i2c_slave_top/registers/n13113 ));
  i2c_slave_top_SLICE_8 \i2c_slave_top/SLICE_8 ( .A1(\i2c_slave_top/n16546 ), 
    .M1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .M0(next_state_i_3_N_181_0), .CLK(clk_div2), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .F1(\i2c_slave_top/registers/addr_i_7_N_1056_0 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , .FCO(\i2c_slave_top/registers/n13112 ));
  i2c_slave_top_registers_SLICE_9 \i2c_slave_top/registers/SLICE_9 ( 
    .A0(\i2c_slave_top/registers/addr_i_7 ), 
    .FCI(\i2c_slave_top/registers/n13115 ), 
    .F0(\i2c_slave_top/registers/addr_i_7_N_1056_7 ));
  SLICE_10 SLICE_10( .A1(\limit_check/logic_check/count_6 ), 
    .A0(\limit_check/logic_check/count_5 ), .M1(\i2c_slave_top/n16430 ), 
    .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_237 ), .CLK(clk_div2), 
    .FCI(\limit_check/logic_check/n13118 ), 
    .F0(\limit_check/logic_check/count_31_N_1168_5 ), 
    .Q0(pulse_width_lower_limit_8), 
    .F1(\limit_check/logic_check/count_31_N_1168_6 ), 
    .Q1(pulse_width_lower_limit_9), .FCO(\limit_check/logic_check/n13119 ));
  SLICE_11 SLICE_11( .A1(\limit_check/logic_check/count_30 ), 
    .A0(\limit_check/logic_check/count_29 ), .M1(\i2c_slave_top/n16422 ), 
    .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_253 ), .CLK(clk_div2), 
    .FCI(\limit_check/logic_check/n13130 ), 
    .F0(\limit_check/logic_check/count_31_N_1168_29 ), 
    .Q0(pulse_width_lower_limit_30), 
    .F1(\limit_check/logic_check/count_31_N_1168_30 ), 
    .Q1(pulse_width_lower_limit_31), .FCO(\limit_check/logic_check/n13131 ));
  SLICE_12 SLICE_12( .A1(\limit_check/logic_check/count_28 ), 
    .A0(\limit_check/logic_check/count_27 ), .M1(\i2c_slave_top/n16414 ), 
    .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_253 ), .CLK(clk_div2), 
    .FCI(\limit_check/logic_check/n13129 ), 
    .F0(\limit_check/logic_check/count_31_N_1168_27 ), 
    .Q0(pulse_width_lower_limit_26), 
    .F1(\limit_check/logic_check/count_31_N_1168_28 ), 
    .Q1(pulse_width_lower_limit_27), .FCO(\limit_check/logic_check/n13130 ));
  SLICE_13 SLICE_13( .A1(\limit_check/logic_check/count_2 ), 
    .A0(\limit_check/logic_check/count_1 ), .M1(\i2c_slave_top/n16420 ), 
    .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_253 ), .CLK(clk_div2), 
    .FCI(\limit_check/logic_check/n13116 ), 
    .F0(\limit_check/logic_check/count_31_N_1168_1 ), 
    .Q0(pulse_width_lower_limit_28), 
    .F1(\limit_check/logic_check/count_31_N_1168_2 ), 
    .Q1(pulse_width_lower_limit_29), .FCO(\limit_check/logic_check/n13117 ));
  SLICE_14 SLICE_14( .A1(\limit_check/logic_check/count_26 ), 
    .A0(\limit_check/logic_check/count_25 ), .M1(\i2c_slave_top/n16430 ), 
    .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_253 ), .CLK(clk_div2), 
    .FCI(\limit_check/logic_check/n13128 ), 
    .F0(\limit_check/logic_check/count_31_N_1168_25 ), 
    .Q0(pulse_width_lower_limit_24), 
    .F1(\limit_check/logic_check/count_31_N_1168_26 ), 
    .Q1(pulse_width_lower_limit_25), .FCO(\limit_check/logic_check/n13129 ));
  SLICE_15 SLICE_15( .A1(\limit_check/logic_check/count_24 ), 
    .A0(\limit_check/logic_check/count_23 ), .M1(\i2c_slave_top/n16422 ), 
    .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_245 ), .CLK(clk_div2), 
    .FCI(\limit_check/logic_check/n13127 ), 
    .F0(\limit_check/logic_check/count_31_N_1168_23 ), 
    .Q0(pulse_width_lower_limit_22), 
    .F1(\limit_check/logic_check/count_31_N_1168_24 ), 
    .Q1(pulse_width_lower_limit_23), .FCO(\limit_check/logic_check/n13128 ));
  SLICE_16 SLICE_16( .A1(\limit_check/logic_check/count_22 ), 
    .A0(\limit_check/logic_check/count_21 ), .M1(\i2c_slave_top/n16420 ), 
    .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_245 ), .CLK(clk_div2), 
    .FCI(\limit_check/logic_check/n13126 ), 
    .F0(\limit_check/logic_check/count_31_N_1168_21 ), 
    .Q0(pulse_width_lower_limit_20), 
    .F1(\limit_check/logic_check/count_31_N_1168_22 ), 
    .Q1(pulse_width_lower_limit_21), .FCO(\limit_check/logic_check/n13127 ));
  SLICE_17 SLICE_17( .A1(\limit_check/logic_check/count_20 ), 
    .A0(\limit_check/logic_check/count_19 ), .M1(\i2c_slave_top/n16414 ), 
    .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_229 ), .CLK(clk_div2), 
    .FCI(\limit_check/logic_check/n13125 ), 
    .F0(\limit_check/logic_check/count_31_N_1168_19 ), 
    .Q0(pulse_width_lower_limit_2), 
    .F1(\limit_check/logic_check/count_31_N_1168_20 ), 
    .Q1(pulse_width_lower_limit_3), .FCO(\limit_check/logic_check/n13126 ));
  SLICE_18 SLICE_18( .A1(\limit_check/logic_check/count_4 ), 
    .A0(\limit_check/logic_check/count_3 ), .M1(\i2c_slave_top/n16422 ), 
    .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_229 ), .CLK(clk_div2), 
    .FCI(\limit_check/logic_check/n13117 ), 
    .F0(\limit_check/logic_check/count_31_N_1168_3 ), 
    .Q0(pulse_width_lower_limit_6), 
    .F1(\limit_check/logic_check/count_31_N_1168_4 ), 
    .Q1(pulse_width_lower_limit_7), .FCO(\limit_check/logic_check/n13118 ));
  SLICE_19 SLICE_19( .A1(\limit_check/logic_check/count_18 ), 
    .A0(\limit_check/logic_check/count_17 ), .M1(\i2c_slave_top/n16414 ), 
    .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_245 ), .CLK(clk_div2), 
    .FCI(\limit_check/logic_check/n13124 ), 
    .F0(\limit_check/logic_check/count_31_N_1168_17 ), 
    .Q0(pulse_width_lower_limit_18), 
    .F1(\limit_check/logic_check/count_31_N_1168_18 ), 
    .Q1(pulse_width_lower_limit_19), .FCO(\limit_check/logic_check/n13125 ));
  SLICE_20 SLICE_20( .A1(\limit_check/logic_check/count_16 ), 
    .A0(\limit_check/logic_check/count_15 ), .M1(\i2c_slave_top/n16430 ), 
    .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_245 ), .CLK(clk_div2), 
    .FCI(\limit_check/logic_check/n13123 ), 
    .F0(\limit_check/logic_check/count_31_N_1168_15 ), 
    .Q0(pulse_width_lower_limit_16), 
    .F1(\limit_check/logic_check/count_31_N_1168_16 ), 
    .Q1(pulse_width_lower_limit_17), .FCO(\limit_check/logic_check/n13124 ));
  SLICE_21 SLICE_21( .A1(\limit_check/logic_check/count_14 ), 
    .A0(\limit_check/logic_check/count_13 ), .M1(\i2c_slave_top/n16422 ), 
    .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_237 ), .CLK(clk_div2), 
    .FCI(\limit_check/logic_check/n13122 ), 
    .F0(\limit_check/logic_check/count_31_N_1168_13 ), 
    .Q0(pulse_width_lower_limit_14), 
    .F1(\limit_check/logic_check/count_31_N_1168_14 ), 
    .Q1(pulse_width_lower_limit_15), .FCO(\limit_check/logic_check/n13123 ));
  SLICE_22 SLICE_22( .A1(\limit_check/logic_check/count_12 ), 
    .A0(\limit_check/logic_check/count_11 ), .M1(\i2c_slave_top/n16420 ), 
    .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_237 ), .CLK(clk_div2), 
    .FCI(\limit_check/logic_check/n13121 ), 
    .F0(\limit_check/logic_check/count_31_N_1168_11 ), 
    .Q0(pulse_width_lower_limit_12), 
    .F1(\limit_check/logic_check/count_31_N_1168_12 ), 
    .Q1(pulse_width_lower_limit_13), .FCO(\limit_check/logic_check/n13122 ));
  SLICE_23 SLICE_23( .A1(\limit_check/logic_check/count_10 ), 
    .A0(\limit_check/logic_check/count_9 ), .M1(\i2c_slave_top/n16414 ), 
    .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_237 ), .CLK(clk_div2), 
    .FCI(\limit_check/logic_check/n13120 ), 
    .F0(\limit_check/logic_check/count_31_N_1168_9 ), 
    .Q0(pulse_width_lower_limit_10), 
    .F1(\limit_check/logic_check/count_31_N_1168_10 ), 
    .Q1(pulse_width_lower_limit_11), .FCO(\limit_check/logic_check/n13121 ));
  SLICE_24 SLICE_24( .A0(\limit_check/logic_check/count_31 ), 
    .M1(\i2c_slave_top/n16420 ), .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_229 ), .CLK(clk_div2), 
    .FCI(\limit_check/logic_check/n13131 ), 
    .F0(\limit_check/logic_check/count_31_N_1168_31 ), 
    .Q0(pulse_width_lower_limit_4), .Q1(pulse_width_lower_limit_5));
  SLICE_25 SLICE_25( .A1(\limit_check/logic_check/count_8 ), 
    .A0(\limit_check/logic_check/count_7 ), .M1(\i2c_slave_top/n16430 ), 
    .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_35 ), .CLK(clk_div2), 
    .FCI(\limit_check/logic_check/n13119 ), 
    .F0(\limit_check/logic_check/count_31_N_1168_7 ), 
    .Q0(pulse_width_upper_limit_0), 
    .F1(\limit_check/logic_check/count_31_N_1168_8 ), 
    .Q1(pulse_width_upper_limit_1), .FCO(\limit_check/logic_check/n13120 ));
  SLICE_26 SLICE_26( .A1(\limit_check/logic_check/count_0 ), 
    .M1(\i2c_slave_top/n16430 ), .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_229 ), .CLK(clk_div2), 
    .Q0(pulse_width_lower_limit_0), 
    .F1(\limit_check/logic_check/count_31_N_1168_0 ), 
    .Q1(pulse_width_lower_limit_1), .FCO(\limit_check/logic_check/n13116 ));
  heart_beat_SLICE_27 \heart_beat/SLICE_27 ( .A1(\heart_beat/n6 ), 
    .A0(\heart_beat/n7 ), .DI1(\heart_beat/n43 ), .DI0(\heart_beat/n44 ), 
    .CLK(\heart_beat/prescale[15] ), .FCI(\heart_beat/n13144 ), 
    .F0(\heart_beat/n44 ), .Q0(\heart_beat/n7 ), .F1(\heart_beat/n43 ), 
    .Q1(\heart_beat/n6 ), .FCO(\heart_beat/n13145 ));
  heart_beat_SLICE_28 \heart_beat/SLICE_28 ( .A1(\heart_beat/n8 ), 
    .DI1(\heart_beat/n45 ), .CLK(\heart_beat/prescale[15] ), 
    .F1(\heart_beat/n45 ), .Q1(\heart_beat/n8 ), .FCO(\heart_beat/n13144 ));
  heart_beat_SLICE_29 \heart_beat/SLICE_29 ( .A0(\heart_beat/prescale[15] ), 
    .DI0(\heart_beat/n70 ), .CLK(clk_div2), .FCI(\heart_beat/n13139 ), 
    .F0(\heart_beat/n70 ), .Q0(\heart_beat/prescale[15] ));
  heart_beat_SLICE_30 \heart_beat/SLICE_30 ( .A1(\heart_beat/n2 ), 
    .A0(\heart_beat/n3 ), .DI1(\heart_beat/n71 ), .DI0(\heart_beat/n72 ), 
    .CLK(clk_div2), .FCI(\heart_beat/n13138 ), .F0(\heart_beat/n72 ), 
    .Q0(\heart_beat/n3 ), .F1(\heart_beat/n71 ), .Q1(\heart_beat/n2 ), 
    .FCO(\heart_beat/n13139 ));
  heart_beat_SLICE_31 \heart_beat/SLICE_31 ( .A1(\heart_beat/n4 ), 
    .A0(\heart_beat/n5 ), .DI1(\heart_beat/n73 ), .DI0(\heart_beat/n74 ), 
    .CLK(clk_div2), .FCI(\heart_beat/n13137 ), .F0(\heart_beat/n74 ), 
    .Q0(\heart_beat/n5 ), .F1(\heart_beat/n73 ), .Q1(\heart_beat/n4 ), 
    .FCO(\heart_beat/n13138 ));
  heart_beat_SLICE_32 \heart_beat/SLICE_32 ( .A1(\heart_beat/n6_adj_1639 ), 
    .A0(\heart_beat/n7_adj_1638 ), .DI1(\heart_beat/n75 ), 
    .DI0(\heart_beat/n76 ), .CLK(clk_div2), .FCI(\heart_beat/n13136 ), 
    .F0(\heart_beat/n76 ), .Q0(\heart_beat/n7_adj_1638 ), 
    .F1(\heart_beat/n75 ), .Q1(\heart_beat/n6_adj_1639 ), 
    .FCO(\heart_beat/n13137 ));
  heart_beat_SLICE_33 \heart_beat/SLICE_33 ( .A1(\heart_beat/n8_adj_1637 ), 
    .A0(\heart_beat/n9 ), .DI1(\heart_beat/n77 ), .DI0(\heart_beat/n78 ), 
    .CLK(clk_div2), .FCI(\heart_beat/n13135 ), .F0(\heart_beat/n78 ), 
    .Q0(\heart_beat/n9 ), .F1(\heart_beat/n77 ), .Q1(\heart_beat/n8_adj_1637 ), 
    .FCO(\heart_beat/n13136 ));
  heart_beat_SLICE_34 \heart_beat/SLICE_34 ( .A1(\heart_beat/n10 ), 
    .A0(\heart_beat/n11 ), .DI1(\heart_beat/n79 ), .DI0(\heart_beat/n80 ), 
    .CLK(clk_div2), .FCI(\heart_beat/n13134 ), .F0(\heart_beat/n80 ), 
    .Q0(\heart_beat/n11 ), .F1(\heart_beat/n79 ), .Q1(\heart_beat/n10 ), 
    .FCO(\heart_beat/n13135 ));
  heart_beat_SLICE_35 \heart_beat/SLICE_35 ( .A1(\heart_beat/n12 ), 
    .A0(\heart_beat/n13 ), .DI1(\heart_beat/n81 ), .DI0(\heart_beat/n82 ), 
    .CLK(clk_div2), .FCI(\heart_beat/n13133 ), .F0(\heart_beat/n82 ), 
    .Q0(\heart_beat/n13 ), .F1(\heart_beat/n81 ), .Q1(\heart_beat/n12 ), 
    .FCO(\heart_beat/n13134 ));
  heart_beat_SLICE_36 \heart_beat/SLICE_36 ( .A1(\heart_beat/n14 ), 
    .A0(\heart_beat/n15 ), .DI1(\heart_beat/n83 ), .DI0(\heart_beat/n84 ), 
    .CLK(clk_div2), .FCI(\heart_beat/n13132 ), .F0(\heart_beat/n84 ), 
    .Q0(\heart_beat/n15 ), .F1(\heart_beat/n83 ), .Q1(\heart_beat/n14 ), 
    .FCO(\heart_beat/n13133 ));
  heart_beat_SLICE_37 \heart_beat/SLICE_37 ( .A1(\heart_beat/n16 ), 
    .DI1(\heart_beat/n85 ), .CLK(clk_div2), .F1(\heart_beat/n85 ), 
    .Q1(\heart_beat/n16 ), .FCO(\heart_beat/n13132 ));
  heart_beat_SLICE_38 \heart_beat/SLICE_38 ( .A0(heartbeat_n_c_7), 
    .DI0(\heart_beat/n38 ), .CLK(\heart_beat/prescale[15] ), 
    .FCI(\heart_beat/n13147 ), .F0(\heart_beat/n38 ), .Q0(heartbeat_n_c_7));
  heart_beat_SLICE_39 \heart_beat/SLICE_39 ( .A1(\heart_beat/n2_adj_1643 ), 
    .A0(\heart_beat/n3_adj_1642 ), .DI1(\heart_beat/n39 ), 
    .DI0(\heart_beat/n40 ), .CLK(\heart_beat/prescale[15] ), 
    .FCI(\heart_beat/n13146 ), .F0(\heart_beat/n40 ), 
    .Q0(\heart_beat/n3_adj_1642 ), .F1(\heart_beat/n39 ), 
    .Q1(\heart_beat/n2_adj_1643 ), .FCO(\heart_beat/n13147 ));
  heart_beat_SLICE_40 \heart_beat/SLICE_40 ( .A1(\heart_beat/n4_adj_1641 ), 
    .A0(\heart_beat/n5_adj_1640 ), .DI1(\heart_beat/n41 ), 
    .DI0(\heart_beat/n42 ), .CLK(\heart_beat/prescale[15] ), 
    .FCI(\heart_beat/n13145 ), .F0(\heart_beat/n42 ), 
    .Q0(\heart_beat/n5_adj_1640 ), .F1(\heart_beat/n41 ), 
    .Q1(\heart_beat/n4_adj_1641 ), .FCO(\heart_beat/n13146 ));
  adc_control_SLICE_41 \adc_control/SLICE_41 ( .A0(\adc_control/state_0 ), 
    .DI0(\adc_control/n16528 ), .CE(\adc_control/clk_div2_enable_3 ), 
    .CLK(clk_div2), .F0(\adc_control/n16528 ), .Q0(\adc_control/adc_sck_temp ));
  adc_control_SLICE_42 \adc_control/SLICE_42 ( 
    .D1(\adc_control/adc_convert_N_1625 ), .C1(\adc_control/n17325 ), 
    .B1(\adc_control/state_0 ), .A1(\adc_control/state_1 ), 
    .B0(\adc_control/state_1 ), .A0(\adc_control/state_0 ), 
    .DI0(\adc_control/n1034 ), .CE(\adc_control/clk_div2_enable_257 ), 
    .CLK(clk_div2), .F0(\adc_control/n1034 ), .Q0(\adc_control/data_ready ), 
    .F1(\adc_control/n6035 ));
  adc_control_SLICE_43 \adc_control/SLICE_43 ( .B1(\adc_control/sck_count_0 ), 
    .A1(\adc_control/sck_count_1 ), .A0(\adc_control/sck_count_0 ), 
    .DI1(\adc_control/n24 ), .DI0(\adc_control/n25 ), 
    .CE(\adc_control/clk_div2_enable_255 ), .LSR(\adc_control/n6032 ), 
    .CLK(clk_div2), .F0(\adc_control/n25 ), .Q0(\adc_control/sck_count_0 ), 
    .F1(\adc_control/n24 ), .Q1(\adc_control/sck_count_1 ));
  adc_control_SLICE_44 \adc_control/SLICE_44 ( .D1(\adc_control/sck_count_3 ), 
    .C1(\adc_control/sck_count_2 ), .B1(\adc_control/sck_count_0 ), 
    .A1(\adc_control/sck_count_1 ), .C0(\adc_control/sck_count_2 ), 
    .B0(\adc_control/sck_count_0 ), .A0(\adc_control/sck_count_1 ), 
    .DI1(\adc_control/n22 ), .DI0(\adc_control/n23 ), 
    .CE(\adc_control/clk_div2_enable_255 ), .LSR(\adc_control/n6032 ), 
    .CLK(clk_div2), .F0(\adc_control/n23 ), .Q0(\adc_control/sck_count_2 ), 
    .F1(\adc_control/n22 ), .Q1(\adc_control/sck_count_3 ));
  adc_control_SLICE_45 \adc_control/SLICE_45 ( 
    .D1(\adc_control/adc_convert_N_1625 ), .C1(\adc_control/state_1 ), 
    .B1(\adc_control/n17325 ), .A1(\adc_control/state_0 ), 
    .D0(\adc_control/state_1 ), .C0(\adc_control/n17325 ), 
    .B0(\adc_control/adc_convert_N_1625 ), .A0(\adc_control/state_0 ), 
    .DI0(\adc_control/state_3_N_1505_0 ), .CLK(clk_div2), 
    .F0(\adc_control/state_3_N_1505_0 ), .Q0(\adc_control/state_0 ), 
    .F1(\adc_control/clk_div2_enable_5 ));
  adc_control_SLICE_46 \adc_control/SLICE_46 ( .D1(\adc_control/sck_count_1 ), 
    .C1(\adc_control/sck_count_0 ), .B1(\adc_control/sck_count_2 ), 
    .A1(\adc_control/sck_count_3 ), .C0(\adc_control/state_1 ), 
    .B0(\adc_control/state_0 ), .A0(\adc_control/data_ready_N_1632 ), 
    .DI0(\adc_control/n1086 ), .CE(\adc_control/clk_div2_enable_28 ), 
    .CLK(clk_div2), .F0(\adc_control/n1086 ), .Q0(\adc_control/state_1 ), 
    .F1(\adc_control/data_ready_N_1632 ));
  adc_control_SLICE_47 \adc_control/SLICE_47 ( .DI0(\n17327\010/BUF1 ), 
    .CE(\adc_control/clk_div2_enable_27 ), .CLK(clk_div2), 
    .F0(\n17327\010/BUF1 ), .Q0(\adc_control/state_2 ));
  SLICE_48 SLICE_48( .DI0(n17327), .CE(\adc_control/clk_div2_enable_26 ), 
    .CLK(clk_div2), .F0(n17327), .Q0(\adc_control/state_3 ));
  clock_generator_SLICE_49 \clock_generator/SLICE_49 ( .A0(clk_div2), 
    .DI0(clk_div2_N_18), .LSR(rstn_c), .CLK(clk_50mhz_c), .F0(clk_div2_N_18), 
    .Q0(clk_div2));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_50 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_50 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16527 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16394 ), 
    .C0(n4), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n528 ), 
    .A0(count_i_3__N_145), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3870 ), 
    .LSR(n16517), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3870 ), 
    .Q0(count_i_3__N_145), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16394 ));
  i2c_slave_top_SLICE_52 \i2c_slave_top/SLICE_52 ( .C1(\i2c_slave_top/n3141 ), 
    .B1(\i2c_slave_top/registers/n10730 ), .A1(\i2c_slave_top/n16546 ), 
    .D0(\i2c_slave_top/n16546 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_1 )
    , .B0(\i2c_slave_top/n3141 ), .A0(\i2c_slave_top/n16523 ), 
    .DI0(\i2c_slave_top/dynamic_control_15_N_647_0 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_256 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/dynamic_control_15_N_647_0 ), .Q0(dynamic_control_0), 
    .F1(\i2c_slave_top/registers/clk_div2_enable_222 ));
  i2c_slave_top_SLICE_53 \i2c_slave_top/SLICE_53 ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_2 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_1 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .DI1(\i2c_slave_top/n16430 ), .DI0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_N_18_enable_8 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/n16425 ), .Q0(\i2c_slave_top/addr_start_0 ), 
    .F1(\i2c_slave_top/n16430 ), .Q1(\i2c_slave_top/addr_start_1 ));
  i2c_slave_top_SLICE_54 \i2c_slave_top/SLICE_54 ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_4 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_3 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .DI1(\i2c_slave_top/n16414 ), .DI0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_N_18_enable_8 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/n16421 ), .Q0(\i2c_slave_top/addr_start_2 ), 
    .F1(\i2c_slave_top/n16414 ), .Q1(\i2c_slave_top/addr_start_3 ));
  i2c_slave_top_SLICE_55 \i2c_slave_top/SLICE_55 ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_6 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_5 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .DI1(\i2c_slave_top/n16420 ), .DI0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_N_18_enable_8 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/n16415 ), .Q0(\i2c_slave_top/addr_start_4 ), 
    .F1(\i2c_slave_top/n16420 ), .Q1(\i2c_slave_top/addr_start_5 ));
  i2c_slave_top_SLICE_56 \i2c_slave_top/SLICE_56 ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_8 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_7 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .DI1(\i2c_slave_top/n16422 ), .DI0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_N_18_enable_8 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/n16419 ), .Q0(\i2c_slave_top/addr_start_6 ), 
    .F1(\i2c_slave_top/n16422 ), .Q1(\i2c_slave_top/addr_start_7 ));
  i2c_slave_top_registers_SLICE_57 \i2c_slave_top/registers/SLICE_57 ( 
    .C1(\i2c_slave_top/registers/n2558 ), .B1(\i2c_slave_top/registers/n2557 ), 
    .A1(\i2c_slave_top/registers/n2527 ), 
    .C0(\i2c_slave_top/registers/n16383 ), 
    .B0(\i2c_slave_top/registers/n2477 ), 
    .A0(\i2c_slave_top/registers/n16057 ), 
    .DI0(\i2c_slave_top/registers/n2577 ), 
    .M0(\i2c_slave_top/registers/n15490 ), 
    .LSR(\i2c_slave_top/registers/n5992 ), .CLK(clk_div2), 
    .OFX0(\i2c_slave_top/registers/n2577 ), .Q0(\i2c_slave_top/data_out_0 ));
  i2c_slave_top_registers_SLICE_58 \i2c_slave_top/registers/SLICE_58 ( 
    .C1(\i2c_slave_top/registers/n2558 ), .B1(\i2c_slave_top/registers/n2556 ), 
    .A1(\i2c_slave_top/registers/n2526 ), 
    .C0(\i2c_slave_top/registers/n16383 ), 
    .B0(\i2c_slave_top/registers/n2476 ), 
    .A0(\i2c_slave_top/registers/n16197 ), 
    .DI0(\i2c_slave_top/registers/n2576 ), 
    .M0(\i2c_slave_top/registers/n15490 ), 
    .LSR(\i2c_slave_top/registers/n5992 ), .CLK(clk_div2), 
    .OFX0(\i2c_slave_top/registers/n2576 ), .Q0(\i2c_slave_top/data_out_1 ));
  i2c_slave_top_registers_SLICE_59 \i2c_slave_top/registers/SLICE_59 ( 
    .C1(\i2c_slave_top/registers/n2558 ), .B1(\i2c_slave_top/registers/n2555 ), 
    .A1(\i2c_slave_top/registers/n2525 ), 
    .C0(\i2c_slave_top/registers/n16383 ), 
    .B0(\i2c_slave_top/registers/n2475 ), 
    .A0(\i2c_slave_top/registers/n16194 ), 
    .DI0(\i2c_slave_top/registers/n2575 ), 
    .M0(\i2c_slave_top/registers/n15490 ), 
    .LSR(\i2c_slave_top/registers/n5992 ), .CLK(clk_div2), 
    .OFX0(\i2c_slave_top/registers/n2575 ), .Q0(\i2c_slave_top/data_out_2 ));
  i2c_slave_top_registers_SLICE_60 \i2c_slave_top/registers/SLICE_60 ( 
    .C1(\i2c_slave_top/registers/n2558 ), .B1(\i2c_slave_top/registers/n2554 ), 
    .A1(\i2c_slave_top/registers/n2524 ), 
    .C0(\i2c_slave_top/registers/n16383 ), 
    .B0(\i2c_slave_top/registers/n2474 ), 
    .A0(\i2c_slave_top/registers/n16191 ), 
    .DI0(\i2c_slave_top/registers/n2574 ), 
    .M0(\i2c_slave_top/registers/n15490 ), 
    .LSR(\i2c_slave_top/registers/n5992 ), .CLK(clk_div2), 
    .OFX0(\i2c_slave_top/registers/n2574 ), .Q0(\i2c_slave_top/data_out_3 ));
  i2c_slave_top_registers_SLICE_61 \i2c_slave_top/registers/SLICE_61 ( 
    .C1(\i2c_slave_top/registers/n2558 ), .B1(\i2c_slave_top/registers/n2553 ), 
    .A1(\i2c_slave_top/registers/n2523 ), 
    .C0(\i2c_slave_top/registers/n16383 ), 
    .B0(\i2c_slave_top/registers/n2473 ), 
    .A0(\i2c_slave_top/registers/n16186 ), 
    .DI0(\i2c_slave_top/registers/n2573 ), 
    .M0(\i2c_slave_top/registers/n15490 ), 
    .LSR(\i2c_slave_top/registers/n5992 ), .CLK(clk_div2), 
    .OFX0(\i2c_slave_top/registers/n2573 ), .Q0(\i2c_slave_top/data_out_4 ));
  i2c_slave_top_registers_SLICE_62 \i2c_slave_top/registers/SLICE_62 ( 
    .C1(\i2c_slave_top/registers/n2558 ), .B1(\i2c_slave_top/registers/n2552 ), 
    .A1(\i2c_slave_top/registers/n2522 ), 
    .C0(\i2c_slave_top/registers/n16383 ), 
    .B0(\i2c_slave_top/registers/n2472 ), 
    .A0(\i2c_slave_top/registers/n16180 ), 
    .DI0(\i2c_slave_top/registers/n2572 ), 
    .M0(\i2c_slave_top/registers/n15490 ), 
    .LSR(\i2c_slave_top/registers/n5992 ), .CLK(clk_div2), 
    .OFX0(\i2c_slave_top/registers/n2572 ), .Q0(\i2c_slave_top/data_out_5 ));
  i2c_slave_top_registers_SLICE_63 \i2c_slave_top/registers/SLICE_63 ( 
    .C1(\i2c_slave_top/registers/n2558 ), .B1(\i2c_slave_top/registers/n2551 ), 
    .A1(\i2c_slave_top/registers/n2521 ), 
    .C0(\i2c_slave_top/registers/n16383 ), 
    .B0(\i2c_slave_top/registers/n2471 ), 
    .A0(\i2c_slave_top/registers/n16177 ), 
    .DI0(\i2c_slave_top/registers/n2571 ), 
    .M0(\i2c_slave_top/registers/n15490 ), 
    .LSR(\i2c_slave_top/registers/n5992 ), .CLK(clk_div2), 
    .OFX0(\i2c_slave_top/registers/n2571 ), .Q0(\i2c_slave_top/data_out_6 ));
  i2c_slave_top_registers_SLICE_64 \i2c_slave_top/registers/SLICE_64 ( 
    .C1(\i2c_slave_top/registers/n2558 ), .B1(\i2c_slave_top/registers/n2550 ), 
    .A1(\i2c_slave_top/registers/n2520 ), 
    .C0(\i2c_slave_top/registers/n16383 ), 
    .B0(\i2c_slave_top/registers/n2470 ), 
    .A0(\i2c_slave_top/registers/n16174 ), 
    .DI0(\i2c_slave_top/registers/n2570 ), 
    .M0(\i2c_slave_top/registers/n15490 ), 
    .LSR(\i2c_slave_top/registers/n5992 ), .CLK(clk_div2), 
    .OFX0(\i2c_slave_top/registers/n2570 ), .Q0(\i2c_slave_top/data_out_7 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_65 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_65 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_3 )
    , .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14674 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/count_i_3__N_141 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16527 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14622 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i_N_355 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i_N_355 )
    , .Q0(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14622 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_66 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_66 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16526 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16527 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/count_i_3__N_141 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4_adj_1752 )
    , .C0(count_i_3__N_145), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13259 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16524 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14547 ), 
    .LSR(n16517), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14547 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/count_i_3__N_141 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13259 ));
  i2c_slave_top_i2cslave_controller_top_filter_scl_inst_SLICE_67 
    \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/SLICE_67 ( 
    .A0(scl_out), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_N_85 ), 
    .M1(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d1 ), 
    .CLK(clk_div2), 
    .F0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_N_85 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d1 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d2 ));
  i2c_slave_top_i2cslave_controller_top_filter_sda_inst_SLICE_70 
    \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/SLICE_70 ( 
    .A0(sda_out), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_N_85 ), 
    .M1(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d1 ), 
    .CLK(clk_div2), 
    .F0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_N_85 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d1 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d2 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_73 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_73 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16431 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16525 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16428 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16376 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5943 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3183 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3097 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3086 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_11 )
    , .LSR(n16517), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .OFX0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3097 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_74 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_74 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5952 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5952 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .DI1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3095 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3096 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_10 )
    , .LSR(n16517), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3096 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3095 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_75 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_75 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16428 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16525 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16432 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3183 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16376 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16402 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5943 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16083 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3086 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_12 )
    , .LSR(n16517), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .OFX0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16083 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_76 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_76 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16427 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_146 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16330 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14091 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n506 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13380 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16525 ), 
    .DI1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14057 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14551 ), 
    .LSR(n16517), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14551 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_140 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14057 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_146 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_77 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_77 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n17324 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/count_i_3__N_141 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1753 )
    , .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n326 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/count_i_3__N_141 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n327 ), 
    .DI1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13289 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13336 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_8 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13336 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_1 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13289 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_2 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_78 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_78 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2_adj_1757 )
    , .C1(\i2c_slave_top/i2cslave_controller_top/count_i_3__N_141 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1756 )
    , .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n324 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2_adj_1755 )
    , .C0(\i2c_slave_top/i2cslave_controller_top/count_i_3__N_141 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1754 )
    , .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n325 ), 
    .DI1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13293 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13290 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_8 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13290 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_3 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13293 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_4 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_79 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_79 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2_adj_1761 )
    , .C1(\i2c_slave_top/i2cslave_controller_top/count_i_3__N_141 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1760 )
    , .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n322 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2_adj_1759 )
    , .C0(\i2c_slave_top/i2cslave_controller_top/count_i_3__N_141 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1758 )
    , .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n323 ), 
    .DI1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13295 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13294 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_8 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13294 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_5 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13295 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_6 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_80 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_80 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2_adj_1765 )
    , .C1(\i2c_slave_top/i2cslave_controller_top/count_i_3__N_141 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1764 )
    , .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n320 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2_adj_1763 )
    , .C0(\i2c_slave_top/i2cslave_controller_top/count_i_3__N_141 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1762 )
    , .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n321 ), 
    .DI1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13296 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13331 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_8 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13331 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_7 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13296 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_8 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_85 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_85 ( 
    .DI0(\n17327\000/BUF1 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/wr_done_i_N_430 ), 
    .CLK(clk_div2), .F0(\n17327\000/BUF1 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/first_read_done )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_86 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_86 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16527 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/count_i_3__N_141 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16527 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_146 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i_N_362 )
    , .CE(reset_n), 
    .LSR(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3261 ), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i_N_362 )
    , 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/rw_mode_i_N_313 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_91 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_91 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .D0(count_i_3__N_145), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14622 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16433 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16527 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14491 ), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14491 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_data_i )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16433 ));
  i2c_slave_top_i2cslave_controller_top_SLICE_92 
    \i2c_slave_top/i2cslave_controller_top/SLICE_92 ( 
    .A0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i_sda ), 
    .M1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack1_i )
    , .CLK(clk_div2), .F0(\i2c_slave_top/i2cslave_controller_top/i_sda ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_93 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_93 ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_146 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_317 )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_140 )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14647 ), 
    .B0(count_i_3__N_145), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_297 )
    , .LSR(n16517), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_297 )
    , 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i )
    , .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_96 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_96 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16397 ), 
    .LSR(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3840 ), 
    .CLK(clk_div2), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16397 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_i ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16402 ));
  i2c_slave_top_registers_SLICE_99 \i2c_slave_top/registers/SLICE_99 ( 
    .DI0(\n17327\009/BUF1 ), 
    .CE(\i2c_slave_top/registers/data_vld_dly_enable_2 ), .LSR(n16408), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), .F0(\n17327\009/BUF1 ), 
    .Q0(\i2c_slave_top/registers/byte_cnt_0 ));
  i2c_slave_top_registers_SLICE_101 \i2c_slave_top/registers/SLICE_101 ( 
    .B1(\i2c_slave_top/registers/count_0 ), 
    .A1(\i2c_slave_top/registers/count_1 ), 
    .A0(\i2c_slave_top/registers/count_0 ), 
    .DI1(\i2c_slave_top/registers/n24_adj_1766 ), 
    .DI0(\i2c_slave_top/registers/n25 ), 
    .CE(\i2c_slave_top/registers/count_3__N_751 ), 
    .LSR(\i2c_slave_top/registers/n10730 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/n25 ), .Q0(\i2c_slave_top/registers/count_0 ), 
    .F1(\i2c_slave_top/registers/n24_adj_1766 ), 
    .Q1(\i2c_slave_top/registers/count_1 ));
  i2c_slave_top_registers_SLICE_102 \i2c_slave_top/registers/SLICE_102 ( 
    .D1(\i2c_slave_top/registers/count_3 ), 
    .C1(\i2c_slave_top/registers/count_2 ), 
    .B1(\i2c_slave_top/registers/count_0 ), 
    .A1(\i2c_slave_top/registers/count_1 ), 
    .C0(\i2c_slave_top/registers/count_2 ), 
    .B0(\i2c_slave_top/registers/count_0 ), 
    .A0(\i2c_slave_top/registers/count_1 ), 
    .DI1(\i2c_slave_top/registers/n22 ), .DI0(\i2c_slave_top/registers/n23 ), 
    .CE(\i2c_slave_top/registers/count_3__N_751 ), 
    .LSR(\i2c_slave_top/registers/n10730 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/n23 ), .Q0(\i2c_slave_top/registers/count_2 ), 
    .F1(\i2c_slave_top/registers/n22 ), .Q1(\i2c_slave_top/registers/count_3 ));
  i2c_slave_top_SLICE_119 \i2c_slave_top/SLICE_119 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .D0(n16518), .C0(\i2c_slave_top/registers/data_vld_cnt ), 
    .B0(\i2c_slave_top/state_1_N_1054_0 ), .A0(\i2c_slave_top/n16417 ), 
    .DI0(\i2c_slave_top/registers/data_vld_cnt_N_1086 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/data_vld_cnt_N_1086 ), 
    .Q0(\i2c_slave_top/registers/data_vld_cnt ), .F1(n16518));
  i2c_slave_top_SLICE_120 \i2c_slave_top/SLICE_120 ( 
    .C1(\i2c_slave_top/state_1_N_1054_0 ), 
    .B1(\i2c_slave_top/registers/data_vld_cnt ), .A1(\i2c_slave_top/n16417 ), 
    .D0(\i2c_slave_top/wr_done_reg2_i ), .C0(\i2c_slave_top/wr_done_reg1_i ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .DI0(\i2c_slave_top/n16417 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/n16417 ), .Q0(\i2c_slave_top/registers/data_vld_dly ), 
    .F1(\i2c_slave_top/registers/clk_div2_N_18_enable_8 ));
  i2c_slave_top_SLICE_129 \i2c_slave_top/SLICE_129 ( 
    .D1(\i2c_slave_top/n16546 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_3 )
    , .B1(\i2c_slave_top/n3141 ), .A1(\i2c_slave_top/n16523 ), 
    .D0(\i2c_slave_top/n16546 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_2 )
    , .B0(\i2c_slave_top/n3141 ), .A0(\i2c_slave_top/n16523 ), 
    .DI1(\i2c_slave_top/dynamic_control_15_N_647_2 ), 
    .DI0(\i2c_slave_top/dynamic_control_15_N_647_1 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_256 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/dynamic_control_15_N_647_1 ), 
    .Q0(\i2c_slave_top/registers/dynamic_control_1 ), 
    .F1(\i2c_slave_top/dynamic_control_15_N_647_2 ), 
    .Q1(\i2c_slave_top/registers/dynamic_control_2 ));
  i2c_slave_top_SLICE_130 \i2c_slave_top/SLICE_130 ( 
    .D1(\i2c_slave_top/n16546 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_5 )
    , .B1(\i2c_slave_top/n3141 ), .A1(\i2c_slave_top/n16523 ), 
    .D0(\i2c_slave_top/n16546 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_4 )
    , .B0(\i2c_slave_top/n3141 ), .A0(\i2c_slave_top/n16523 ), 
    .DI1(\i2c_slave_top/dynamic_control_15_N_647_4 ), 
    .DI0(\i2c_slave_top/dynamic_control_15_N_647_3 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_256 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/dynamic_control_15_N_647_3 ), 
    .Q0(\i2c_slave_top/registers/dynamic_control_3 ), 
    .F1(\i2c_slave_top/dynamic_control_15_N_647_4 ), 
    .Q1(\i2c_slave_top/registers/dynamic_control_4 ));
  i2c_slave_top_SLICE_131 \i2c_slave_top/SLICE_131 ( 
    .D1(\i2c_slave_top/n16546 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_7 )
    , .B1(\i2c_slave_top/n3141 ), .A1(\i2c_slave_top/n16523 ), 
    .D0(\i2c_slave_top/n16546 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_6 )
    , .B0(\i2c_slave_top/n3141 ), .A0(\i2c_slave_top/n16523 ), 
    .DI1(\i2c_slave_top/dynamic_control_15_N_647_6 ), 
    .DI0(\i2c_slave_top/dynamic_control_15_N_647_5 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_256 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/dynamic_control_15_N_647_5 ), 
    .Q0(\i2c_slave_top/registers/dynamic_control_5 ), 
    .F1(\i2c_slave_top/dynamic_control_15_N_647_6 ), 
    .Q1(\i2c_slave_top/registers/dynamic_control_6 ));
  i2c_slave_top_SLICE_132 \i2c_slave_top/SLICE_132 ( 
    .D1(\i2c_slave_top/registers/n16522 ), 
    .C1(\i2c_slave_top/registers/n16389 ), 
    .B1(\i2c_slave_top/registers/n5595 ), 
    .A1(\i2c_slave_top/registers/n16393 ), .D0(\i2c_slave_top/n16546 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_8 )
    , .B0(\i2c_slave_top/n3141 ), .A0(\i2c_slave_top/n16523 ), 
    .DI0(\i2c_slave_top/dynamic_control_15_N_647_7 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_256 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/dynamic_control_15_N_647_7 ), 
    .Q0(\i2c_slave_top/registers/dynamic_control_7 ), 
    .F1(\i2c_slave_top/n3141 ));
  i2c_slave_top_SLICE_133 \i2c_slave_top/SLICE_133 ( 
    .D1(\i2c_slave_top/n16546 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_2 )
    , .B1(\i2c_slave_top/n3141 ), .A1(\i2c_slave_top/n16523 ), 
    .D0(\i2c_slave_top/n16546 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_1 )
    , .B0(\i2c_slave_top/n3141 ), .A0(\i2c_slave_top/n16523 ), 
    .DI1(\i2c_slave_top/dynamic_control_15_N_647_9 ), 
    .DI0(\i2c_slave_top/dynamic_control_15_N_647_8 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_222 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/dynamic_control_15_N_647_8 ), 
    .Q0(\i2c_slave_top/registers/dynamic_control_8 ), 
    .F1(\i2c_slave_top/dynamic_control_15_N_647_9 ), 
    .Q1(\i2c_slave_top/registers/dynamic_control_9 ));
  i2c_slave_top_SLICE_134 \i2c_slave_top/SLICE_134 ( 
    .D1(\i2c_slave_top/n16546 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_4 )
    , .B1(\i2c_slave_top/n3141 ), .A1(\i2c_slave_top/n16523 ), 
    .D0(\i2c_slave_top/n16546 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_3 )
    , .B0(\i2c_slave_top/n3141 ), .A0(\i2c_slave_top/n16523 ), 
    .DI1(\i2c_slave_top/dynamic_control_15_N_647_11 ), 
    .DI0(\i2c_slave_top/dynamic_control_15_N_647_10 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_222 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/dynamic_control_15_N_647_10 ), 
    .Q0(\i2c_slave_top/registers/dynamic_control_10 ), 
    .F1(\i2c_slave_top/dynamic_control_15_N_647_11 ), 
    .Q1(\i2c_slave_top/registers/dynamic_control_11 ));
  i2c_slave_top_SLICE_135 \i2c_slave_top/SLICE_135 ( 
    .D1(\i2c_slave_top/n16546 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_6 )
    , .B1(\i2c_slave_top/n3141 ), .A1(\i2c_slave_top/n16523 ), 
    .D0(\i2c_slave_top/n16546 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_5 )
    , .B0(\i2c_slave_top/n3141 ), .A0(\i2c_slave_top/n16523 ), 
    .DI1(\i2c_slave_top/dynamic_control_15_N_647_13 ), 
    .DI0(\i2c_slave_top/dynamic_control_15_N_647_12 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_222 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/dynamic_control_15_N_647_12 ), 
    .Q0(\i2c_slave_top/registers/dynamic_control_12 ), 
    .F1(\i2c_slave_top/dynamic_control_15_N_647_13 ), 
    .Q1(\i2c_slave_top/registers/dynamic_control_13 ));
  i2c_slave_top_SLICE_136 \i2c_slave_top/SLICE_136 ( 
    .D1(\i2c_slave_top/n16546 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_8 )
    , .B1(\i2c_slave_top/n3141 ), .A1(\i2c_slave_top/n16523 ), 
    .D0(\i2c_slave_top/n16546 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_7 )
    , .B0(\i2c_slave_top/n3141 ), .A0(\i2c_slave_top/n16523 ), 
    .DI1(\i2c_slave_top/dynamic_control_15_N_647_15 ), 
    .DI0(\i2c_slave_top/dynamic_control_15_N_647_14 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_222 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/dynamic_control_15_N_647_14 ), 
    .Q0(\i2c_slave_top/registers/dynamic_control_14 ), 
    .F1(\i2c_slave_top/dynamic_control_15_N_647_15 ), 
    .Q1(\i2c_slave_top/registers/dynamic_control_15 ));
  i2c_slave_top_registers_SLICE_137 \i2c_slave_top/registers/SLICE_137 ( 
    .DI0(\n17327\001/BUF1 ), .LSR(\i2c_slave_top/addr_i_7__N_736 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_704 ), .F0(\n17327\001/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n5955 ));
  i2c_slave_top_registers_SLICE_138 \i2c_slave_top/registers/SLICE_138 ( 
    .C1(\i2c_slave_top/registers/n16429 ), .B1(\i2c_slave_top/n16546 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_1056_0 ), 
    .D0(\i2c_slave_top/addr_start_0 ), .C0(\i2c_slave_top/state_1_N_1054_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_1 )
    , .A0(\i2c_slave_top/n16523 ), .DI0(\i2c_slave_top/registers/n5747 ), 
    .M0(\i2c_slave_top/registers/n15502 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_704 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n5747 ), 
    .Q0(\i2c_slave_top/registers/n5956 ));
  i2c_slave_top_registers_SLICE_140 \i2c_slave_top/registers/SLICE_140 ( 
    .DI0(\n17327\008/BUF1 ), .LSR(\i2c_slave_top/addr_i_7__N_733 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_703 ), .F0(\n17327\008/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n5959 ));
  i2c_slave_top_registers_SLICE_141 \i2c_slave_top/registers/SLICE_141 ( 
    .C1(\i2c_slave_top/registers/n16429 ), 
    .B1(\i2c_slave_top/registers/n16559 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_1056_1 ), 
    .D0(\i2c_slave_top/addr_start_1 ), .C0(\i2c_slave_top/state_1_N_1054_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_2 )
    , .A0(\i2c_slave_top/n16523 ), .DI0(\i2c_slave_top/registers/n5813 ), 
    .M0(\i2c_slave_top/registers/n15502 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_703 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n5813 ), 
    .Q0(\i2c_slave_top/registers/n5960 ));
  i2c_slave_top_registers_SLICE_143 \i2c_slave_top/registers/SLICE_143 ( 
    .DI0(\n17327\007/BUF1 ), .LSR(\i2c_slave_top/addr_i_7__N_730 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_702 ), .F0(\n17327\007/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n5963 ));
  i2c_slave_top_registers_SLICE_144 \i2c_slave_top/registers/SLICE_144 ( 
    .C1(\i2c_slave_top/registers/n16429 ), 
    .B1(\i2c_slave_top/registers/n16548 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_1056_2 ), 
    .D0(\i2c_slave_top/addr_start_2 ), .C0(\i2c_slave_top/state_1_N_1054_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_3 )
    , .A0(\i2c_slave_top/n16523 ), .DI0(\i2c_slave_top/registers/n5817 ), 
    .M0(\i2c_slave_top/registers/n15502 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_702 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n5817 ), 
    .Q0(\i2c_slave_top/registers/n5964 ));
  i2c_slave_top_registers_SLICE_146 \i2c_slave_top/registers/SLICE_146 ( 
    .DI0(\n17327\006/BUF1 ), .LSR(\i2c_slave_top/addr_i_7__N_727 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_701 ), .F0(\n17327\006/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n5967 ));
  i2c_slave_top_registers_SLICE_147 \i2c_slave_top/registers/SLICE_147 ( 
    .C1(\i2c_slave_top/registers/n16429 ), 
    .B1(\i2c_slave_top/registers/n16435 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_1056_3 ), 
    .D0(\i2c_slave_top/addr_start_3 ), .C0(\i2c_slave_top/state_1_N_1054_0 ), 
    .B0(\i2c_slave_top/n16523 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_4 )
    , .DI0(\i2c_slave_top/registers/n5821 ), 
    .M0(\i2c_slave_top/registers/n15502 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_701 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n5821 ), 
    .Q0(\i2c_slave_top/registers/n5968 ));
  i2c_slave_top_registers_SLICE_149 \i2c_slave_top/registers/SLICE_149 ( 
    .DI0(\n17327\005/BUF1 ), .LSR(\i2c_slave_top/addr_i_7__N_724 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_700 ), .F0(\n17327\005/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n5971 ));
  i2c_slave_top_registers_SLICE_150 \i2c_slave_top/registers/SLICE_150 ( 
    .C1(\i2c_slave_top/registers/n16429 ), 
    .B1(\i2c_slave_top/registers/n16521 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_1056_4 ), 
    .D0(\i2c_slave_top/addr_start_4 ), .C0(\i2c_slave_top/state_1_N_1054_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_5 )
    , .A0(\i2c_slave_top/n16523 ), .DI0(\i2c_slave_top/registers/n5825 ), 
    .M0(\i2c_slave_top/registers/n15502 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_700 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n5825 ), 
    .Q0(\i2c_slave_top/registers/n5972 ));
  i2c_slave_top_registers_SLICE_152 \i2c_slave_top/registers/SLICE_152 ( 
    .DI0(\n17327\004/BUF1 ), .LSR(\i2c_slave_top/addr_i_7__N_721 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_699 ), .F0(\n17327\004/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n5975 ));
  i2c_slave_top_registers_SLICE_153 \i2c_slave_top/registers/SLICE_153 ( 
    .C1(\i2c_slave_top/registers/n16429 ), 
    .B1(\i2c_slave_top/registers/addr_i_5 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_1056_5 ), 
    .D0(\i2c_slave_top/addr_start_5 ), .C0(\i2c_slave_top/state_1_N_1054_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_6 )
    , .A0(\i2c_slave_top/n16523 ), .DI0(\i2c_slave_top/registers/n5829 ), 
    .M0(\i2c_slave_top/registers/n15502 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_699 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n5829 ), 
    .Q0(\i2c_slave_top/registers/n5976 ));
  i2c_slave_top_registers_SLICE_155 \i2c_slave_top/registers/SLICE_155 ( 
    .DI0(\n17327\003/BUF1 ), .LSR(\i2c_slave_top/addr_i_7__N_718 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_698 ), .F0(\n17327\003/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n5979 ));
  i2c_slave_top_registers_SLICE_156 \i2c_slave_top/registers/SLICE_156 ( 
    .C1(\i2c_slave_top/registers/n16429 ), 
    .B1(\i2c_slave_top/registers/n16550 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_1056_6 ), 
    .D0(\i2c_slave_top/addr_start_6 ), .C0(\i2c_slave_top/state_1_N_1054_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_7 )
    , .A0(\i2c_slave_top/n16523 ), .DI0(\i2c_slave_top/registers/n5833 ), 
    .M0(\i2c_slave_top/registers/n15502 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_698 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n5833 ), 
    .Q0(\i2c_slave_top/registers/n5980 ));
  i2c_slave_top_registers_SLICE_158 \i2c_slave_top/registers/SLICE_158 ( 
    .DI0(\n17327\002/BUF1 ), .LSR(\i2c_slave_top/addr_i_7__N_705 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_695 ), .F0(\n17327\002/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n5983 ));
  i2c_slave_top_registers_SLICE_159 \i2c_slave_top/registers/SLICE_159 ( 
    .C1(\i2c_slave_top/registers/n16429 ), 
    .B1(\i2c_slave_top/registers/addr_i_7 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_1056_7 ), 
    .D0(\i2c_slave_top/addr_start_7 ), .C0(\i2c_slave_top/state_1_N_1054_0 ), 
    .B0(\i2c_slave_top/n16523 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_8 )
    , .DI0(\i2c_slave_top/registers/n5837 ), 
    .M0(\i2c_slave_top/registers/n15502 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_695 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n5837 ), 
    .Q0(\i2c_slave_top/registers/n5984 ));
  i2c_slave_top_registers_SLICE_177 \i2c_slave_top/registers/SLICE_177 ( 
    .C1(\i2c_slave_top/registers/state_1 ), 
    .B1(\i2c_slave_top/registers/state_0 ), 
    .A1(\i2c_slave_top/registers/byte_cnt_1 ), 
    .C0(\i2c_slave_top/registers/state_0 ), 
    .B0(\i2c_slave_top/registers/state_1 ), 
    .A0(\i2c_slave_top/state_1_N_1054_0 ), 
    .DI0(\i2c_slave_top/registers/state_1_N_741_0 ), 
    .CE(\i2c_slave_top/registers/data_vld_dly_enable_1 ), .LSR(n16408), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/state_1_N_741_0 ), 
    .Q0(\i2c_slave_top/registers/state_0 ), 
    .F1(\i2c_slave_top/registers/data_vld_dly_enable_4 ));
  i2c_slave_top_registers_SLICE_178 \i2c_slave_top/registers/SLICE_178 ( 
    .B1(\i2c_slave_top/registers/state_1 ), 
    .A1(\i2c_slave_top/registers/state_0 ), 
    .C0(\i2c_slave_top/state_1_N_1054_0 ), 
    .B0(\i2c_slave_top/registers/state_1 ), 
    .A0(\i2c_slave_top/registers/state_0 ), 
    .DI0(\i2c_slave_top/registers/state_1_N_741_1 ), 
    .CE(\i2c_slave_top/registers/data_vld_dly_enable_4 ), .LSR(n16408), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/state_1_N_741_1 ), 
    .Q0(\i2c_slave_top/registers/state_1 ), 
    .F1(\i2c_slave_top/registers/n15502 ));
  limit_check_logic_check_SLICE_186 \limit_check/logic_check/SLICE_186 ( 
    .D1(\limit_check/logic_check/n12_adj_1721 ), 
    .C1(\limit_check/logic_check/n14579 ), 
    .B1(\limit_check/logic_check/count_31_N_1168_1 ), 
    .A1(\limit_check/logic_check/count_1 ), 
    .D0(\limit_check/logic_check/n8_adj_1742 ), 
    .C0(\limit_check/logic_check/state_1 ), .B0(\limit_check/logic_check/n2 ), 
    .A0(\limit_check/logic_check/n12_adj_1741 ), 
    .DI1(\limit_check/logic_check/count_31_N_1099_1 ), 
    .DI0(\limit_check/logic_check/count_31_N_1099_0 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/count_31_N_1099_0 ), 
    .Q0(\limit_check/logic_check/count_0 ), 
    .F1(\limit_check/logic_check/count_31_N_1099_1 ), 
    .Q1(\limit_check/logic_check/count_1 ));
  limit_check_logic_check_SLICE_187 \limit_check/logic_check/SLICE_187 ( 
    .D1(\limit_check/logic_check/n12_adj_1721 ), 
    .C1(\limit_check/logic_check/n14579 ), 
    .B1(\limit_check/logic_check/count_31_N_1168_3 ), 
    .A1(\limit_check/logic_check/count_3 ), 
    .D0(\limit_check/logic_check/n12_adj_1721 ), 
    .C0(\limit_check/logic_check/n14579 ), 
    .B0(\limit_check/logic_check/count_31_N_1168_2 ), 
    .A0(\limit_check/logic_check/count_2 ), 
    .DI1(\limit_check/logic_check/count_31_N_1099_3 ), 
    .DI0(\limit_check/logic_check/count_31_N_1099_2 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/count_31_N_1099_2 ), 
    .Q0(\limit_check/logic_check/count_2 ), 
    .F1(\limit_check/logic_check/count_31_N_1099_3 ), 
    .Q1(\limit_check/logic_check/count_3 ));
  limit_check_logic_check_SLICE_188 \limit_check/logic_check/SLICE_188 ( 
    .D1(\limit_check/logic_check/n12_adj_1721 ), 
    .C1(\limit_check/logic_check/n14579 ), 
    .B1(\limit_check/logic_check/count_31_N_1168_5 ), 
    .A1(\limit_check/logic_check/count_5 ), 
    .D0(\limit_check/logic_check/n12_adj_1721 ), 
    .C0(\limit_check/logic_check/n14579 ), 
    .B0(\limit_check/logic_check/count_31_N_1168_4 ), 
    .A0(\limit_check/logic_check/count_4 ), 
    .DI1(\limit_check/logic_check/count_31_N_1099_5 ), 
    .DI0(\limit_check/logic_check/count_31_N_1099_4 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/count_31_N_1099_4 ), 
    .Q0(\limit_check/logic_check/count_4 ), 
    .F1(\limit_check/logic_check/count_31_N_1099_5 ), 
    .Q1(\limit_check/logic_check/count_5 ));
  limit_check_logic_check_SLICE_189 \limit_check/logic_check/SLICE_189 ( 
    .D1(\limit_check/logic_check/n12_adj_1721 ), 
    .C1(\limit_check/logic_check/n14579 ), 
    .B1(\limit_check/logic_check/count_31_N_1168_7 ), 
    .A1(\limit_check/logic_check/count_7 ), 
    .D0(\limit_check/logic_check/n12_adj_1721 ), 
    .C0(\limit_check/logic_check/n14579 ), 
    .B0(\limit_check/logic_check/count_31_N_1168_6 ), 
    .A0(\limit_check/logic_check/count_6 ), 
    .DI1(\limit_check/logic_check/count_31_N_1099_7 ), 
    .DI0(\limit_check/logic_check/count_31_N_1099_6 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/count_31_N_1099_6 ), 
    .Q0(\limit_check/logic_check/count_6 ), 
    .F1(\limit_check/logic_check/count_31_N_1099_7 ), 
    .Q1(\limit_check/logic_check/count_7 ));
  limit_check_logic_check_SLICE_190 \limit_check/logic_check/SLICE_190 ( 
    .D1(\limit_check/logic_check/n12_adj_1721 ), 
    .C1(\limit_check/logic_check/n14579 ), 
    .B1(\limit_check/logic_check/count_31_N_1168_9 ), 
    .A1(\limit_check/logic_check/count_9 ), 
    .D0(\limit_check/logic_check/n12_adj_1721 ), 
    .C0(\limit_check/logic_check/n14579 ), 
    .B0(\limit_check/logic_check/count_31_N_1168_8 ), 
    .A0(\limit_check/logic_check/count_8 ), 
    .DI1(\limit_check/logic_check/count_31_N_1099_9 ), 
    .DI0(\limit_check/logic_check/count_31_N_1099_8 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/count_31_N_1099_8 ), 
    .Q0(\limit_check/logic_check/count_8 ), 
    .F1(\limit_check/logic_check/count_31_N_1099_9 ), 
    .Q1(\limit_check/logic_check/count_9 ));
  limit_check_logic_check_SLICE_191 \limit_check/logic_check/SLICE_191 ( 
    .D1(\limit_check/logic_check/n12_adj_1721 ), 
    .C1(\limit_check/logic_check/n14579 ), 
    .B1(\limit_check/logic_check/count_31_N_1168_11 ), 
    .A1(\limit_check/logic_check/count_11 ), 
    .D0(\limit_check/logic_check/n12_adj_1721 ), 
    .C0(\limit_check/logic_check/n14579 ), 
    .B0(\limit_check/logic_check/count_31_N_1168_10 ), 
    .A0(\limit_check/logic_check/count_10 ), 
    .DI1(\limit_check/logic_check/count_31_N_1099_11 ), 
    .DI0(\limit_check/logic_check/count_31_N_1099_10 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/count_31_N_1099_10 ), 
    .Q0(\limit_check/logic_check/count_10 ), 
    .F1(\limit_check/logic_check/count_31_N_1099_11 ), 
    .Q1(\limit_check/logic_check/count_11 ));
  limit_check_logic_check_SLICE_192 \limit_check/logic_check/SLICE_192 ( 
    .D1(\limit_check/logic_check/n12_adj_1721 ), 
    .C1(\limit_check/logic_check/n14579 ), 
    .B1(\limit_check/logic_check/count_31_N_1168_13 ), 
    .A1(\limit_check/logic_check/count_13 ), 
    .D0(\limit_check/logic_check/n12_adj_1721 ), 
    .C0(\limit_check/logic_check/n14579 ), 
    .B0(\limit_check/logic_check/count_31_N_1168_12 ), 
    .A0(\limit_check/logic_check/count_12 ), 
    .DI1(\limit_check/logic_check/count_31_N_1099_13 ), 
    .DI0(\limit_check/logic_check/count_31_N_1099_12 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/count_31_N_1099_12 ), 
    .Q0(\limit_check/logic_check/count_12 ), 
    .F1(\limit_check/logic_check/count_31_N_1099_13 ), 
    .Q1(\limit_check/logic_check/count_13 ));
  limit_check_logic_check_SLICE_193 \limit_check/logic_check/SLICE_193 ( 
    .D1(\limit_check/logic_check/n12_adj_1721 ), 
    .C1(\limit_check/logic_check/n14579 ), 
    .B1(\limit_check/logic_check/count_31_N_1168_15 ), 
    .A1(\limit_check/logic_check/count_15 ), 
    .D0(\limit_check/logic_check/n12_adj_1721 ), 
    .C0(\limit_check/logic_check/n14579 ), 
    .B0(\limit_check/logic_check/count_31_N_1168_14 ), 
    .A0(\limit_check/logic_check/count_14 ), 
    .DI1(\limit_check/logic_check/count_31_N_1099_15 ), 
    .DI0(\limit_check/logic_check/count_31_N_1099_14 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/count_31_N_1099_14 ), 
    .Q0(\limit_check/logic_check/count_14 ), 
    .F1(\limit_check/logic_check/count_31_N_1099_15 ), 
    .Q1(\limit_check/logic_check/count_15 ));
  limit_check_logic_check_SLICE_194 \limit_check/logic_check/SLICE_194 ( 
    .D1(\limit_check/logic_check/n12_adj_1721 ), 
    .C1(\limit_check/logic_check/n14579 ), 
    .B1(\limit_check/logic_check/count_31_N_1168_17 ), 
    .A1(\limit_check/logic_check/count_17 ), 
    .D0(\limit_check/logic_check/n12_adj_1721 ), 
    .C0(\limit_check/logic_check/n14579 ), 
    .B0(\limit_check/logic_check/count_31_N_1168_16 ), 
    .A0(\limit_check/logic_check/count_16 ), 
    .DI1(\limit_check/logic_check/count_31_N_1099_17 ), 
    .DI0(\limit_check/logic_check/count_31_N_1099_16 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/count_31_N_1099_16 ), 
    .Q0(\limit_check/logic_check/count_16 ), 
    .F1(\limit_check/logic_check/count_31_N_1099_17 ), 
    .Q1(\limit_check/logic_check/count_17 ));
  limit_check_logic_check_SLICE_195 \limit_check/logic_check/SLICE_195 ( 
    .D1(\limit_check/logic_check/n12_adj_1721 ), 
    .C1(\limit_check/logic_check/n14579 ), 
    .B1(\limit_check/logic_check/count_31_N_1168_19 ), 
    .A1(\limit_check/logic_check/count_19 ), 
    .D0(\limit_check/logic_check/n12_adj_1721 ), 
    .C0(\limit_check/logic_check/n14579 ), 
    .B0(\limit_check/logic_check/count_31_N_1168_18 ), 
    .A0(\limit_check/logic_check/count_18 ), 
    .DI1(\limit_check/logic_check/count_31_N_1099_19 ), 
    .DI0(\limit_check/logic_check/count_31_N_1099_18 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/count_31_N_1099_18 ), 
    .Q0(\limit_check/logic_check/count_18 ), 
    .F1(\limit_check/logic_check/count_31_N_1099_19 ), 
    .Q1(\limit_check/logic_check/count_19 ));
  limit_check_logic_check_SLICE_196 \limit_check/logic_check/SLICE_196 ( 
    .D1(\limit_check/logic_check/n12_adj_1721 ), 
    .C1(\limit_check/logic_check/n14579 ), 
    .B1(\limit_check/logic_check/count_31_N_1168_21 ), 
    .A1(\limit_check/logic_check/count_21 ), 
    .D0(\limit_check/logic_check/n12_adj_1721 ), 
    .C0(\limit_check/logic_check/n14579 ), 
    .B0(\limit_check/logic_check/count_31_N_1168_20 ), 
    .A0(\limit_check/logic_check/count_20 ), 
    .DI1(\limit_check/logic_check/count_31_N_1099_21 ), 
    .DI0(\limit_check/logic_check/count_31_N_1099_20 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/count_31_N_1099_20 ), 
    .Q0(\limit_check/logic_check/count_20 ), 
    .F1(\limit_check/logic_check/count_31_N_1099_21 ), 
    .Q1(\limit_check/logic_check/count_21 ));
  limit_check_logic_check_SLICE_197 \limit_check/logic_check/SLICE_197 ( 
    .D1(\limit_check/logic_check/n12_adj_1721 ), 
    .C1(\limit_check/logic_check/n14579 ), 
    .B1(\limit_check/logic_check/count_31_N_1168_23 ), 
    .A1(\limit_check/logic_check/count_23 ), 
    .D0(\limit_check/logic_check/n12_adj_1721 ), 
    .C0(\limit_check/logic_check/n14579 ), 
    .B0(\limit_check/logic_check/count_31_N_1168_22 ), 
    .A0(\limit_check/logic_check/count_22 ), 
    .DI1(\limit_check/logic_check/count_31_N_1099_23 ), 
    .DI0(\limit_check/logic_check/count_31_N_1099_22 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/count_31_N_1099_22 ), 
    .Q0(\limit_check/logic_check/count_22 ), 
    .F1(\limit_check/logic_check/count_31_N_1099_23 ), 
    .Q1(\limit_check/logic_check/count_23 ));
  limit_check_logic_check_SLICE_198 \limit_check/logic_check/SLICE_198 ( 
    .D1(\limit_check/logic_check/n12_adj_1721 ), 
    .C1(\limit_check/logic_check/n14579 ), 
    .B1(\limit_check/logic_check/count_31_N_1168_25 ), 
    .A1(\limit_check/logic_check/count_25 ), 
    .D0(\limit_check/logic_check/n12_adj_1721 ), 
    .C0(\limit_check/logic_check/n14579 ), 
    .B0(\limit_check/logic_check/count_31_N_1168_24 ), 
    .A0(\limit_check/logic_check/count_24 ), 
    .DI1(\limit_check/logic_check/count_31_N_1099_25 ), 
    .DI0(\limit_check/logic_check/count_31_N_1099_24 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/count_31_N_1099_24 ), 
    .Q0(\limit_check/logic_check/count_24 ), 
    .F1(\limit_check/logic_check/count_31_N_1099_25 ), 
    .Q1(\limit_check/logic_check/count_25 ));
  limit_check_logic_check_SLICE_199 \limit_check/logic_check/SLICE_199 ( 
    .D1(\limit_check/logic_check/n12_adj_1721 ), 
    .C1(\limit_check/logic_check/n14579 ), 
    .B1(\limit_check/logic_check/count_31_N_1168_27 ), 
    .A1(\limit_check/logic_check/count_27 ), 
    .D0(\limit_check/logic_check/n12_adj_1721 ), 
    .C0(\limit_check/logic_check/n14579 ), 
    .B0(\limit_check/logic_check/count_31_N_1168_26 ), 
    .A0(\limit_check/logic_check/count_26 ), 
    .DI1(\limit_check/logic_check/count_31_N_1099_27 ), 
    .DI0(\limit_check/logic_check/count_31_N_1099_26 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/count_31_N_1099_26 ), 
    .Q0(\limit_check/logic_check/count_26 ), 
    .F1(\limit_check/logic_check/count_31_N_1099_27 ), 
    .Q1(\limit_check/logic_check/count_27 ));
  limit_check_logic_check_SLICE_200 \limit_check/logic_check/SLICE_200 ( 
    .D1(\limit_check/logic_check/n12_adj_1721 ), 
    .C1(\limit_check/logic_check/n14579 ), 
    .B1(\limit_check/logic_check/count_31_N_1168_29 ), 
    .A1(\limit_check/logic_check/count_29 ), 
    .D0(\limit_check/logic_check/n12_adj_1721 ), 
    .C0(\limit_check/logic_check/n14579 ), 
    .B0(\limit_check/logic_check/count_31_N_1168_28 ), 
    .A0(\limit_check/logic_check/count_28 ), 
    .DI1(\limit_check/logic_check/count_31_N_1099_29 ), 
    .DI0(\limit_check/logic_check/count_31_N_1099_28 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/count_31_N_1099_28 ), 
    .Q0(\limit_check/logic_check/count_28 ), 
    .F1(\limit_check/logic_check/count_31_N_1099_29 ), 
    .Q1(\limit_check/logic_check/count_29 ));
  limit_check_logic_check_SLICE_201 \limit_check/logic_check/SLICE_201 ( 
    .D1(\limit_check/logic_check/n12_adj_1721 ), 
    .C1(\limit_check/logic_check/n14579 ), 
    .B1(\limit_check/logic_check/count_31_N_1168_31 ), 
    .A1(\limit_check/logic_check/count_31 ), 
    .D0(\limit_check/logic_check/n12_adj_1721 ), 
    .C0(\limit_check/logic_check/n14579 ), 
    .B0(\limit_check/logic_check/count_31_N_1168_30 ), 
    .A0(\limit_check/logic_check/count_30 ), 
    .DI1(\limit_check/logic_check/count_31_N_1099_31 ), 
    .DI0(\limit_check/logic_check/count_31_N_1099_30 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/count_31_N_1099_30 ), 
    .Q0(\limit_check/logic_check/count_30 ), 
    .F1(\limit_check/logic_check/count_31_N_1099_31 ), 
    .Q1(\limit_check/logic_check/count_31 ));
  limit_check_logic_check_SLICE_202 \limit_check/logic_check/SLICE_202 ( 
    .D1(\limit_check/logic_check/n16463 ), 
    .C1(\limit_check/logic_check/n14577 ), 
    .B1(\limit_check/logic_check/count_31__N_1131 ), 
    .A1(\limit_check/logic_check/rate_upper_limit_fail_N_1309 ), 
    .D0(\limit_check/logic_check/n4_adj_1720 ), 
    .C0(\limit_check/logic_check/state_2 ), .B0(dynamic_control_0), 
    .A0(TA_shutdown_c), .DI0(\limit_check/logic_check/n13286 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n13286 ), 
    .Q0(\limit_check/logic_check/count_31__N_1131 ), 
    .F1(\limit_check/logic_check/n4_adj_1720 ));
  limit_check_logic_check_SLICE_204 \limit_check/logic_check/SLICE_204 ( 
    .D1(\limit_check/logic_check/rate_upper_limit_fail_N_1309 ), 
    .C1(\limit_check/logic_check/state_1 ), 
    .B1(\limit_check/logic_check/n14557 ), 
    .A1(\limit_check/logic_check/laser_pulse_d1 ), 
    .D0(\limit_check/logic_check/state_1 ), 
    .C0(\limit_check/logic_check/state_0 ), 
    .B0(\limit_check/logic_check/laser_pulse_d1 ), 
    .A0(\limit_check/logic_check/n16405 ), 
    .DI1(\limit_check/logic_check/n13433 ), 
    .DI0(\limit_check/logic_check/n5697 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n5697 ), 
    .Q0(\limit_check/logic_check/state_0 ), 
    .F1(\limit_check/logic_check/n13433 ), 
    .Q1(\limit_check/logic_check/state_1 ));
  limit_check_logic_check_SLICE_205 \limit_check/logic_check/SLICE_205 ( 
    .C1(\limit_check/logic_check/state_2 ), .B1(dynamic_control_0), 
    .A1(TA_shutdown_c), .D0(\limit_check/logic_check/n355 ), 
    .C0(\limit_check/logic_check/state_0 ), .B0(\limit_check/logic_check/n3 ), 
    .A0(\limit_check/logic_check/n14579 ), 
    .DI0(\limit_check/logic_check/n3782 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n3782 ), 
    .Q0(\limit_check/logic_check/state_2 ), 
    .F1(\limit_check/logic_check/n14579 ));
  i2c_slave_top_i2cslave_controller_top_SLICE_206 
    \i2c_slave_top/i2cslave_controller_top/SLICE_206 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/count_i_3__N_141 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_7 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/rw_mode_i ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/out_n__inv ), 
    .LSR(start_detect_i_N_352), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/out_n__inv ), 
    .Q0(next_state_i_3_N_181_0), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14647 ));
  limit_check_logic_check_SLICE_207 \limit_check/logic_check/SLICE_207 ( 
    .C1(\limit_check/logic_check/pulse_lower_limit_fail_N_1286 ), 
    .B1(\limit_check/logic_check/pulse_lower_limit_fail_N_1285 ), 
    .A1(\limit_check/logic_check/laser_pulse_d1 ), 
    .D0(\limit_check/logic_check/n11_adj_1743 ), 
    .C0(\limit_check/logic_check/n3 ), .B0(pulse_lower_limit_fail), 
    .A0(\limit_check/logic_check/state_0 ), 
    .DI0(\limit_check/logic_check/pulse_lower_limit_fail_N_1280 ), 
    .M1(laser_pulse_c), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/pulse_lower_limit_fail_N_1280 ), 
    .Q0(pulse_lower_limit_fail), .F1(\limit_check/logic_check/n3 ), 
    .Q1(\limit_check/logic_check/laser_pulse_d1 ));
  limit_check_logic_check_SLICE_208 \limit_check/logic_check/SLICE_208 ( 
    .D1(\limit_check/logic_check/state_1 ), 
    .C1(\limit_check/logic_check/count_31__N_1131 ), .B1(dynamic_control_0), 
    .A1(\limit_check/logic_check/state_2 ), 
    .D0(\limit_check/logic_check/n11_adj_1743 ), 
    .C0(\limit_check/logic_check/n355 ), .B0(pulse_upper_limit_fail), 
    .A0(\limit_check/logic_check/state_0 ), 
    .DI0(\limit_check/logic_check/pulse_upper_limit_fail_N_1294 ), 
    .CLK(clk_div2), 
    .F0(\limit_check/logic_check/pulse_upper_limit_fail_N_1294 ), 
    .Q0(pulse_upper_limit_fail), .F1(\limit_check/logic_check/n11_adj_1743 ));
  limit_check_logic_check_SLICE_257 \limit_check/logic_check/SLICE_257 ( 
    .D1(\limit_check/logic_check/n15465 ), 
    .C1(\limit_check/logic_check/n62_adj_1745 ), 
    .B1(\limit_check/logic_check/n40 ), 
    .A1(\limit_check/logic_check/laser_pulse_d1 ), 
    .D0(\limit_check/logic_check/n4_adj_1726 ), 
    .C0(\limit_check/logic_check/n2_adj_1744 ), .B0(rate_lower_limit_fail), 
    .A0(\limit_check/logic_check/state_1 ), 
    .DI0(\limit_check/logic_check/rate_lower_limit_fail_N_1299 ), 
    .CLK(clk_div2), 
    .F0(\limit_check/logic_check/rate_lower_limit_fail_N_1299 ), 
    .Q0(rate_lower_limit_fail), .F1(\limit_check/logic_check/n2_adj_1744 ));
  SLICE_271 SLICE_271( .M1(\i2c_slave_top/n16414 ), 
    .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_121 ), .CLK(clk_div2), 
    .F0(GND_net), .Q0(rate_upper_limit_26), .Q1(rate_upper_limit_27));
  SLICE_272 SLICE_272( .C1(\limit_check/logic_check/count_31__N_1131 ), 
    .B1(laser_pulse_c), .A1(\limit_check/logic_check/laser_pulse_d1 ), 
    .B0(rate_lower_limit_10), .A0(\limit_check/logic_check/count_10 ), 
    .M1(\i2c_slave_top/n16420 ), .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_121 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16460 ), .Q0(rate_upper_limit_28), 
    .F1(\limit_check/logic_check/n16405 ), .Q1(rate_upper_limit_29));
  SLICE_273 SLICE_273( .B1(rate_lower_limit_15), 
    .A1(\limit_check/logic_check/count_15 ), .B0(rate_lower_limit_24), 
    .A0(\limit_check/logic_check/count_24 ), .M1(\i2c_slave_top/n16422 ), 
    .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_121 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16446 ), .Q0(rate_upper_limit_30), 
    .F1(\limit_check/logic_check/n16454 ), .Q1(rate_upper_limit_31));
  limit_check_logic_check_SLICE_274 \limit_check/logic_check/SLICE_274 ( 
    .D1(\limit_check/logic_check/state_0 ), 
    .C1(\limit_check/logic_check/count_31__N_1131 ), .B1(dynamic_control_0), 
    .A1(\limit_check/logic_check/state_2 ), 
    .D0(\limit_check/logic_check/n3735 ), 
    .C0(\limit_check/logic_check/state_1 ), 
    .B0(\limit_check/logic_check/n4_adj_1726 ), .A0(rate_upper_limit_fail), 
    .DI0(\limit_check/logic_check/rate_upper_limit_fail_N_1306 ), 
    .CLK(clk_div2), 
    .F0(\limit_check/logic_check/rate_upper_limit_fail_N_1306 ), 
    .Q0(rate_upper_limit_fail), .F1(\limit_check/logic_check/n4_adj_1726 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_275 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_275 ( 
    .D1(reset_bus_i), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16386 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16431 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_146 )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/reset_bus_i_N_399 )
    , .B0(n13409), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/reset_bus_i_N_365 )
    , .LSR(n16517), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/reset_bus_i_N_365 )
    , .Q0(reset_bus_i), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/reset_bus_i_N_399 )
    );
  SLICE_276 SLICE_276( .C1(rate_lower_limit_26), .B1(rate_lower_limit_27), 
    .A1(\limit_check/logic_check/count_27 ), .A0(\reset_generator/clk_d2 ), 
    .DI0(\reset_generator/clk_d2_N_16 ), .LSR(rstn_c), .CLK(clk_50mhz_c), 
    .F0(\reset_generator/clk_d2_N_16 ), .Q0(\reset_generator/clk_d2 ), 
    .F1(\limit_check/logic_check/n22_adj_1729 ));
  SLICE_277 SLICE_277( .C1(\limit_check/logic_check/n15735 ), 
    .B1(\limit_check/logic_check/count_25 ), .A1(rate_upper_limit_25), 
    .B0(\reset_generator/in_d3 ), .A0(\reset_generator/in_d2 ), 
    .M1(\reset_generator/in_d1 ), .M0(rstn_c), .LSR(rstn_c), 
    .CLK(\reset_generator/clk_d2 ), .F0(\reset_generator/reset_n_N_12 ), 
    .Q0(\reset_generator/in_d1 ), .F1(\limit_check/logic_check/n15224 ), 
    .Q1(\reset_generator/in_d2 ));
  SLICE_278 SLICE_278( 
    .B1(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d2 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d3 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d2 ), 
    .M0(\reset_generator/in_d2 ), .LSR(rstn_c), .CLK(\reset_generator/clk_d2 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n_N_83 ), 
    .Q0(\reset_generator/in_d3 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n_N_83 ));
  SLICE_279 SLICE_279( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_data_i )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .M0(\reset_generator/in_d3 ), .CE(\reset_generator/reset_n_N_12 ), 
    .LSR(rstn_c), .CLK(\reset_generator/clk_d2 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14652 ), 
    .Q0(reset_n), .F1(n11577));
  SLICE_280 SLICE_280( .D1(\i2c_slave_top/registers/n2558 ), 
    .C1(\i2c_slave_top/registers/n5959 ), .B1(\i2c_slave_top/registers/n5960 ), 
    .A1(\i2c_slave_top/registers/n5961 ), 
    .D0(\i2c_slave_top/registers/dynamic_control_2 ), 
    .C0(\i2c_slave_top/registers/dynamic_control_10 ), 
    .B0(\i2c_slave_top/registers/dynamic_control_12 ), 
    .A0(\i2c_slave_top/registers/dynamic_control_5 ), 
    .M0(\adc_control/n16528 ), .CE(\adc_control/clk_div2_enable_5 ), 
    .CLK(clk_div2), .F0(\i2c_slave_top/registers/n25_adj_1768 ), .Q0(spare2_c), 
    .F1(\i2c_slave_top/registers/n15490 ));
  SLICE_281 SLICE_281( .B1(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A1(\i2c_slave_top/registers/byte_cnt_0 ), .B0(\adc_control/data_ready ), 
    .A0(\adc_control/adc_sck_temp ), .M1(\i2c_slave_top/n16414 ), 
    .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_203 ), .CLK(clk_div2), 
    .F0(spare1_c), .Q0(static_control_2), 
    .F1(\i2c_slave_top/registers/n16522 ), .Q1(static_control_3));
  SLICE_282 SLICE_282( .A1(static_control_9), .A0(static_control_8), 
    .M1(\i2c_slave_top/n16420 ), .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_203 ), .CLK(clk_div2), 
    .F0(test_pass_led_n_c), .Q0(static_control_4), .F1(test_fail_led_n_c), 
    .Q1(static_control_5));
  SLICE_283 SLICE_283( .A1(static_control_6), .A0(static_control_5), 
    .M1(\i2c_slave_top/n16422 ), .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_203 ), .CLK(clk_div2), 
    .F0(pulse_error_led_n_c), .Q0(static_control_6), .F1(rate_error_led_n_c), 
    .Q1(static_control_7));
  SLICE_284 SLICE_284( .A1(static_control_4), .A0(static_control_3), 
    .M1(\i2c_slave_top/n16430 ), .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_211 ), .CLK(clk_div2), 
    .F0(calibrated_led_n_c), .Q0(static_control_8), .F1(peak_error_led_n_c), 
    .Q1(static_control_9));
  SLICE_285 SLICE_285( .A1(static_control_7), .A0(static_control_2), 
    .M0(\i2c_slave_top/i2cslave_controller_top/out_n__inv ), 
    .LSR(start_detect_i_N_352), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .F0(laser_pwr_en1_n_c), .Q0(stop_detect_i), .F1(watchdog_timeout_led_n_c));
  i2c_slave_top_registers_SLICE_286 \i2c_slave_top/registers/SLICE_286 ( 
    .C1(\i2c_slave_top/registers/n16521 ), 
    .B1(\i2c_slave_top/registers/cw_mon_current_limit_15 ), 
    .A1(rate_lower_limit_15), .D0(rate_upper_limit_15), 
    .C0(\i2c_slave_top/registers/n2331 ), 
    .B0(\i2c_slave_top/registers/n16548 ), 
    .A0(\i2c_slave_top/registers/n16521 ), 
    .M1(\i2c_slave_top/registers/n16435 ), 
    .FXB(\i2c_slave_top/registers/n16373 ), 
    .FXA(\i2c_slave_top/registers/n15527 ), 
    .OFX0(\i2c_slave_top/registers/n16373 ), 
    .F1(\i2c_slave_top/registers/n2331 ), 
    .OFX1(\i2c_slave_top/registers/n15529 ));
  i2c_slave_top_registers_SLICE_287 \i2c_slave_top/registers/SLICE_287 ( 
    .C1(\i2c_slave_top/registers/n16521 ), 
    .B1(\i2c_slave_top/registers/cw_mon_current_limit_14 ), 
    .A1(rate_lower_limit_14), .D0(rate_upper_limit_14), 
    .C0(\i2c_slave_top/registers/n2332 ), 
    .B0(\i2c_slave_top/registers/n16548 ), 
    .A0(\i2c_slave_top/registers/n16521 ), 
    .M1(\i2c_slave_top/registers/n16435 ), 
    .FXB(\i2c_slave_top/registers/n16372 ), 
    .FXA(\i2c_slave_top/registers/n15524 ), 
    .OFX0(\i2c_slave_top/registers/n16372 ), 
    .F1(\i2c_slave_top/registers/n2332 ), 
    .OFX1(\i2c_slave_top/registers/n15526 ));
  i2c_slave_top_registers_SLICE_288 \i2c_slave_top/registers/SLICE_288 ( 
    .C1(\i2c_slave_top/registers/n16521 ), 
    .B1(\i2c_slave_top/registers/cw_mon_current_limit_11 ), 
    .A1(rate_lower_limit_11), .D0(rate_upper_limit_11), 
    .C0(\i2c_slave_top/registers/n2335 ), 
    .B0(\i2c_slave_top/registers/n16548 ), 
    .A0(\i2c_slave_top/registers/n16521 ), 
    .M1(\i2c_slave_top/registers/n16435 ), 
    .FXB(\i2c_slave_top/registers/n16369 ), 
    .FXA(\i2c_slave_top/registers/n15515 ), 
    .OFX0(\i2c_slave_top/registers/n16369 ), 
    .F1(\i2c_slave_top/registers/n2335 ), 
    .OFX1(\i2c_slave_top/registers/n15517 ));
  i2c_slave_top_registers_SLICE_289 \i2c_slave_top/registers/SLICE_289 ( 
    .C1(\i2c_slave_top/registers/n16521 ), 
    .B1(\i2c_slave_top/registers/cw_mon_current_limit_8 ), 
    .A1(rate_lower_limit_8), .D0(rate_upper_limit_8), 
    .C0(\i2c_slave_top/registers/n2338 ), 
    .B0(\i2c_slave_top/registers/n16548 ), 
    .A0(\i2c_slave_top/registers/n16521 ), 
    .M1(\i2c_slave_top/registers/n16435 ), 
    .FXB(\i2c_slave_top/registers/n16368 ), 
    .FXA(\i2c_slave_top/registers/n15503 ), 
    .OFX0(\i2c_slave_top/registers/n16368 ), 
    .F1(\i2c_slave_top/registers/n2338 ), 
    .OFX1(\i2c_slave_top/registers/n15505 ));
  i2c_slave_top_registers_SLICE_290 \i2c_slave_top/registers/SLICE_290 ( 
    .C1(\i2c_slave_top/registers/n16521 ), 
    .B1(\i2c_slave_top/registers/cw_mon_current_limit_13 ), 
    .A1(rate_lower_limit_13), .D0(rate_upper_limit_13), 
    .C0(\i2c_slave_top/registers/n2333 ), 
    .B0(\i2c_slave_top/registers/n16548 ), 
    .A0(\i2c_slave_top/registers/n16521 ), 
    .M1(\i2c_slave_top/registers/n16435 ), 
    .FXB(\i2c_slave_top/registers/n16371 ), 
    .FXA(\i2c_slave_top/registers/n15521 ), 
    .OFX0(\i2c_slave_top/registers/n16371 ), 
    .F1(\i2c_slave_top/registers/n2333 ), 
    .OFX1(\i2c_slave_top/registers/n15523 ));
  i2c_slave_top_registers_SLICE_291 \i2c_slave_top/registers/SLICE_291 ( 
    .C1(\i2c_slave_top/registers/n16521 ), 
    .B1(\i2c_slave_top/registers/cw_mon_current_limit_12 ), 
    .A1(rate_lower_limit_12), .D0(rate_upper_limit_12), 
    .C0(\i2c_slave_top/registers/n2334 ), 
    .B0(\i2c_slave_top/registers/n16548 ), 
    .A0(\i2c_slave_top/registers/n16521 ), 
    .M1(\i2c_slave_top/registers/n16435 ), 
    .FXB(\i2c_slave_top/registers/n16370 ), 
    .FXA(\i2c_slave_top/registers/n15518 ), 
    .OFX0(\i2c_slave_top/registers/n16370 ), 
    .F1(\i2c_slave_top/registers/n2334 ), 
    .OFX1(\i2c_slave_top/registers/n15520 ));
  adc_control_i13569_SLICE_292 \adc_control/i13569/SLICE_292 ( 
    .D1(\adc_control/data_ready_N_1632 ), .C1(\adc_control/state_0 ), 
    .B1(\adc_control/state_3 ), .A1(\adc_control/state_2 ), 
    .D0(\adc_control/adc_convert_N_1625 ), .C0(\adc_control/state_0 ), 
    .B0(\adc_control/state_3 ), .A0(\adc_control/state_2 ), 
    .M0(\adc_control/state_1 ), .OFX0(\adc_control/clk_div2_enable_257 ));
  i2c_slave_top_registers_i44_SLICE_293 
    \i2c_slave_top/registers/i44/SLICE_293 ( 
    .D1(\i2c_slave_top/registers/n16548 ), .C1(\i2c_slave_top/n16546 ), 
    .B1(\i2c_slave_top/registers/n16521 ), 
    .A1(\i2c_slave_top/registers/addr_i_5 ), 
    .D0(\i2c_slave_top/registers/n14620 ), 
    .C0(\i2c_slave_top/registers/n14662 ), 
    .B0(\i2c_slave_top/registers/addr_i_5 ), 
    .A0(\i2c_slave_top/registers/n16435 ), 
    .M0(\i2c_slave_top/registers/n16559 ), 
    .OFX0(\i2c_slave_top/registers/n29 ));
  i2c_slave_top_registers_i130_SLICE_294 
    \i2c_slave_top/registers/i130/SLICE_294 ( 
    .D1(\i2c_slave_top/registers/n79 ), .C1(\i2c_slave_top/n16546 ), 
    .B1(\i2c_slave_top/registers/n16435 ), 
    .A1(\i2c_slave_top/registers/n16550 ), 
    .D0(\i2c_slave_top/registers/n16435 ), 
    .C0(\i2c_slave_top/registers/n14620 ), 
    .B0(\i2c_slave_top/registers/n16559 ), 
    .A0(\i2c_slave_top/registers/n16550 ), 
    .M0(\i2c_slave_top/registers/n16521 ), 
    .OFX0(\i2c_slave_top/registers/n96 ));
  i2c_slave_top_registers_i13038_SLICE_295 
    \i2c_slave_top/registers/i13038/SLICE_295 ( 
    .C1(\i2c_slave_top/registers/n16559 ), .B1(rate_upper_limit_22), 
    .A1(rate_upper_limit_6), .C0(\i2c_slave_top/registers/n16521 ), 
    .B0(\i2c_slave_top/registers/pwm_mon_current_limit_6 ), 
    .A0(pulse_width_upper_limit_22), .M1(\i2c_slave_top/registers/n16548 ), 
    .M0(\i2c_slave_top/registers/n16435 ), 
    .FXB(\i2c_slave_top/registers/n15546 ), 
    .FXA(\i2c_slave_top/registers/n15545 ), 
    .OFX0(\i2c_slave_top/registers/n15546 ), 
    .OFX1(\i2c_slave_top/registers/n15547 ));
  i2c_slave_top_registers_i13041_SLICE_296 
    \i2c_slave_top/registers/i13041/SLICE_296 ( 
    .C1(\i2c_slave_top/registers/n16559 ), .B1(rate_upper_limit_23), 
    .A1(rate_upper_limit_7), .C0(\i2c_slave_top/registers/n16521 ), 
    .B0(\i2c_slave_top/registers/pwm_mon_current_limit_7 ), 
    .A0(pulse_width_upper_limit_23), .M1(\i2c_slave_top/registers/n16548 ), 
    .M0(\i2c_slave_top/registers/n16435 ), 
    .FXB(\i2c_slave_top/registers/n15549 ), 
    .FXA(\i2c_slave_top/registers/n15548 ), 
    .OFX0(\i2c_slave_top/registers/n15549 ), 
    .OFX1(\i2c_slave_top/registers/n15550 ));
  i2c_slave_top_registers_mux_672_i8_SLICE_297 
    \i2c_slave_top/registers/mux_672_i8/SLICE_297 ( 
    .C1(\i2c_slave_top/registers/n16548 ), 
    .B1(\i2c_slave_top/registers/n15576 ), 
    .A1(\i2c_slave_top/registers/n15575 ), 
    .C0(\i2c_slave_top/registers/n16435 ), .B0(rate_lower_limit_23), 
    .A0(pulse_width_lower_limit_23), .M0(\i2c_slave_top/n16546 ), 
    .OFX0(\i2c_slave_top/registers/n2520 ));
  i2c_slave_top_registers_mux_672_i7_SLICE_298 
    \i2c_slave_top/registers/mux_672_i7/SLICE_298 ( 
    .C1(\i2c_slave_top/registers/n16548 ), 
    .B1(\i2c_slave_top/registers/n15573 ), 
    .A1(\i2c_slave_top/registers/n15572 ), 
    .C0(\i2c_slave_top/registers/n16435 ), .B0(rate_lower_limit_22), 
    .A0(pulse_width_lower_limit_22), .M0(\i2c_slave_top/n16546 ), 
    .OFX0(\i2c_slave_top/registers/n2521 ));
  i2c_slave_top_registers_mux_672_i6_SLICE_299 
    \i2c_slave_top/registers/mux_672_i6/SLICE_299 ( 
    .C1(\i2c_slave_top/registers/n16548 ), 
    .B1(\i2c_slave_top/registers/n15570 ), 
    .A1(\i2c_slave_top/registers/n15569 ), 
    .C0(\i2c_slave_top/registers/n16435 ), .B0(rate_lower_limit_21), 
    .A0(pulse_width_lower_limit_21), .M0(\i2c_slave_top/n16546 ), 
    .OFX0(\i2c_slave_top/registers/n2522 ));
  i2c_slave_top_registers_mux_672_i5_SLICE_300 
    \i2c_slave_top/registers/mux_672_i5/SLICE_300 ( 
    .C1(\i2c_slave_top/registers/n16548 ), 
    .B1(\i2c_slave_top/registers/n15567 ), 
    .A1(\i2c_slave_top/registers/n15566 ), 
    .C0(\i2c_slave_top/registers/n16435 ), .B0(rate_lower_limit_20), 
    .A0(pulse_width_lower_limit_20), .M0(\i2c_slave_top/n16546 ), 
    .OFX0(\i2c_slave_top/registers/n2523 ));
  i2c_slave_top_registers_mux_672_i4_SLICE_301 
    \i2c_slave_top/registers/mux_672_i4/SLICE_301 ( 
    .C1(\i2c_slave_top/registers/n16548 ), 
    .B1(\i2c_slave_top/registers/n15564 ), 
    .A1(\i2c_slave_top/registers/n15563 ), 
    .C0(\i2c_slave_top/registers/n16435 ), .B0(rate_lower_limit_19), 
    .A0(pulse_width_lower_limit_19), .M0(\i2c_slave_top/n16546 ), 
    .OFX0(\i2c_slave_top/registers/n2524 ));
  i2c_slave_top_registers_mux_672_i3_SLICE_302 
    \i2c_slave_top/registers/mux_672_i3/SLICE_302 ( 
    .C1(\i2c_slave_top/registers/n16548 ), 
    .B1(\i2c_slave_top/registers/n15561 ), 
    .A1(\i2c_slave_top/registers/n15560 ), 
    .C0(\i2c_slave_top/registers/n16435 ), .B0(rate_lower_limit_18), 
    .A0(pulse_width_lower_limit_18), .M0(\i2c_slave_top/n16546 ), 
    .OFX0(\i2c_slave_top/registers/n2525 ));
  i2c_slave_top_registers_mux_672_i2_SLICE_303 
    \i2c_slave_top/registers/mux_672_i2/SLICE_303 ( 
    .C1(\i2c_slave_top/registers/n16548 ), 
    .B1(\i2c_slave_top/registers/n15558 ), 
    .A1(\i2c_slave_top/registers/n15557 ), 
    .C0(\i2c_slave_top/registers/n16435 ), .B0(rate_lower_limit_17), 
    .A0(pulse_width_lower_limit_17), .M0(\i2c_slave_top/n16546 ), 
    .OFX0(\i2c_slave_top/registers/n2526 ));
  i2c_slave_top_registers_mux_672_i1_SLICE_304 
    \i2c_slave_top/registers/mux_672_i1/SLICE_304 ( 
    .C1(\i2c_slave_top/registers/n16548 ), 
    .B1(\i2c_slave_top/registers/n15552 ), 
    .A1(\i2c_slave_top/registers/n15551 ), 
    .C0(\i2c_slave_top/registers/n16435 ), .B0(rate_lower_limit_16), 
    .A0(pulse_width_lower_limit_16), .M0(\i2c_slave_top/n16546 ), 
    .OFX0(\i2c_slave_top/registers/n2527 ));
  i2c_slave_top_registers_i12995_SLICE_305 
    \i2c_slave_top/registers/i12995/SLICE_305 ( 
    .C1(\i2c_slave_top/registers/pwm_mon_current_limit_8 ), 
    .B1(\i2c_slave_top/registers/cw_current_limit_8 ), 
    .A1(\i2c_slave_top/registers/n16559 ), 
    .C0(\i2c_slave_top/registers/n16559 ), 
    .B0(\i2c_slave_top/registers/pwm_current_limit_8 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_8 ), 
    .M1(\i2c_slave_top/n16546 ), .M0(\i2c_slave_top/registers/n16548 ), 
    .FXB(\i2c_slave_top/registers/n15505 ), 
    .FXA(\i2c_slave_top/registers/n15508 ), 
    .OFX0(\i2c_slave_top/registers/n15503 ), 
    .OFX1(\i2c_slave_top/registers/n2557 ));
  i2c_slave_top_registers_i12999_SLICE_306 
    \i2c_slave_top/registers/i12999/SLICE_306 ( 
    .C1(\i2c_slave_top/registers/n16559 ), .B1(rate_upper_limit_16), 
    .A1(rate_upper_limit_0), .C0(\i2c_slave_top/registers/n16521 ), 
    .B0(\i2c_slave_top/registers/pwm_mon_current_limit_0 ), 
    .A0(pulse_width_upper_limit_16), .M1(\i2c_slave_top/registers/n16548 ), 
    .M0(\i2c_slave_top/registers/n16435 ), 
    .FXB(\i2c_slave_top/registers/n15507 ), 
    .FXA(\i2c_slave_top/registers/n15506 ), 
    .OFX0(\i2c_slave_top/registers/n15507 ), 
    .OFX1(\i2c_slave_top/registers/n15508 ));
  i2c_slave_top_registers_i13002_SLICE_307 
    \i2c_slave_top/registers/i13002/SLICE_307 ( .C1(pwr_good_c_1), 
    .B1(rate_upper_limit_9), .A1(\i2c_slave_top/registers/n16521 ), 
    .C0(\i2c_slave_top/registers/n16521 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_9 ), 
    .A0(rate_lower_limit_9), .M1(\i2c_slave_top/registers/n16435 ), 
    .M0(\i2c_slave_top/registers/n16548 ), 
    .FXB(\i2c_slave_top/registers/n15510 ), 
    .FXA(\i2c_slave_top/registers/n15509 ), 
    .OFX0(\i2c_slave_top/registers/n15510 ), 
    .OFX1(\i2c_slave_top/registers/n15511 ));
  i2c_slave_top_registers_i13005_SLICE_308 
    \i2c_slave_top/registers/i13005/SLICE_308 ( .C1(system_reset_n_c_2), 
    .B1(rate_upper_limit_10), .A1(\i2c_slave_top/registers/n16521 ), 
    .C0(\i2c_slave_top/registers/n16521 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_10 ), 
    .A0(rate_lower_limit_10), .M1(\i2c_slave_top/registers/n16435 ), 
    .M0(\i2c_slave_top/registers/n16548 ), 
    .FXB(\i2c_slave_top/registers/n15513 ), 
    .FXA(\i2c_slave_top/registers/n15512 ), 
    .OFX0(\i2c_slave_top/registers/n15513 ), 
    .OFX1(\i2c_slave_top/registers/n15514 ));
  i2c_slave_top_registers_i13023_SLICE_309 
    \i2c_slave_top/registers/i13023/SLICE_309 ( 
    .C1(\i2c_slave_top/registers/n16559 ), .B1(rate_upper_limit_17), 
    .A1(rate_upper_limit_1), .C0(\i2c_slave_top/registers/n16521 ), 
    .B0(\i2c_slave_top/registers/pwm_mon_current_limit_1 ), 
    .A0(pulse_width_upper_limit_17), .M1(\i2c_slave_top/registers/n16548 ), 
    .M0(\i2c_slave_top/registers/n16435 ), 
    .FXB(\i2c_slave_top/registers/n15531 ), 
    .FXA(\i2c_slave_top/registers/n15530 ), 
    .OFX0(\i2c_slave_top/registers/n15531 ), 
    .OFX1(\i2c_slave_top/registers/n15532 ));
  i2c_slave_top_registers_i13026_SLICE_310 
    \i2c_slave_top/registers/i13026/SLICE_310 ( 
    .C1(\i2c_slave_top/registers/n16559 ), .B1(rate_upper_limit_18), 
    .A1(rate_upper_limit_2), .C0(\i2c_slave_top/registers/n16521 ), 
    .B0(\i2c_slave_top/registers/pwm_mon_current_limit_2 ), 
    .A0(pulse_width_upper_limit_18), .M1(\i2c_slave_top/registers/n16548 ), 
    .M0(\i2c_slave_top/registers/n16435 ), 
    .FXB(\i2c_slave_top/registers/n15534 ), 
    .FXA(\i2c_slave_top/registers/n15533 ), 
    .OFX0(\i2c_slave_top/registers/n15534 ), 
    .OFX1(\i2c_slave_top/registers/n15535 ));
  i2c_slave_top_registers_i13029_SLICE_311 
    \i2c_slave_top/registers/i13029/SLICE_311 ( 
    .C1(\i2c_slave_top/registers/n16559 ), .B1(rate_upper_limit_19), 
    .A1(rate_upper_limit_3), .C0(\i2c_slave_top/registers/n16521 ), 
    .B0(\i2c_slave_top/registers/pwm_mon_current_limit_3 ), 
    .A0(pulse_width_upper_limit_19), .M1(\i2c_slave_top/registers/n16548 ), 
    .M0(\i2c_slave_top/registers/n16435 ), 
    .FXB(\i2c_slave_top/registers/n15537 ), 
    .FXA(\i2c_slave_top/registers/n15536 ), 
    .OFX0(\i2c_slave_top/registers/n15537 ), 
    .OFX1(\i2c_slave_top/registers/n15538 ));
  i2c_slave_top_registers_i13032_SLICE_312 
    \i2c_slave_top/registers/i13032/SLICE_312 ( 
    .C1(\i2c_slave_top/registers/n16559 ), .B1(rate_upper_limit_20), 
    .A1(rate_upper_limit_4), .C0(\i2c_slave_top/registers/n16521 ), 
    .B0(\i2c_slave_top/registers/pwm_mon_current_limit_4 ), 
    .A0(pulse_width_upper_limit_20), .M1(\i2c_slave_top/registers/n16548 ), 
    .M0(\i2c_slave_top/registers/n16435 ), 
    .FXB(\i2c_slave_top/registers/n15540 ), 
    .FXA(\i2c_slave_top/registers/n15539 ), 
    .OFX0(\i2c_slave_top/registers/n15540 ), 
    .OFX1(\i2c_slave_top/registers/n15541 ));
  i2c_slave_top_registers_i13040_SLICE_313 
    \i2c_slave_top/registers/i13040/SLICE_313 ( 
    .C1(\i2c_slave_top/registers/n16521 ), 
    .B1(\i2c_slave_top/registers/cw_mon_current_limit_7 ), 
    .A1(rate_lower_limit_7), .C0(\i2c_slave_top/registers/n16559 ), 
    .B0(\i2c_slave_top/registers/pwm_current_limit_7 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_7 ), 
    .M0(\i2c_slave_top/registers/n16435 ), 
    .OFX0(\i2c_slave_top/registers/n15548 ));
  i2c_slave_top_registers_i13486_SLICE_314 
    \i2c_slave_top/registers/i13486/SLICE_314 ( 
    .C1(\i2c_slave_top/registers/cw_current_limit_1 ), 
    .B1(pulse_width_upper_limit_1), .A1(\i2c_slave_top/registers/n16521 ), 
    .C0(static_control_9), .B0(\i2c_slave_top/registers/static_control_1 ), 
    .A0(\i2c_slave_top/n16546 ), .M0(\i2c_slave_top/registers/n16548 ), 
    .OFX0(\i2c_slave_top/registers/n16197 ));
  i2c_slave_top_registers_i13037_SLICE_315 
    \i2c_slave_top/registers/i13037/SLICE_315 ( 
    .C1(\i2c_slave_top/registers/n16521 ), 
    .B1(\i2c_slave_top/registers/cw_mon_current_limit_6 ), 
    .A1(rate_lower_limit_6), .C0(\i2c_slave_top/registers/n16559 ), 
    .B0(\i2c_slave_top/registers/pwm_current_limit_6 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_6 ), 
    .M0(\i2c_slave_top/registers/n16435 ), 
    .OFX0(\i2c_slave_top/registers/n15545 ));
  i2c_slave_top_registers_i13034_SLICE_316 
    \i2c_slave_top/registers/i13034/SLICE_316 ( 
    .C1(\i2c_slave_top/registers/n16521 ), 
    .B1(\i2c_slave_top/registers/cw_mon_current_limit_5 ), 
    .A1(rate_lower_limit_5), .C0(\i2c_slave_top/registers/n16559 ), 
    .B0(\i2c_slave_top/registers/pwm_current_limit_5 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_5 ), 
    .M0(\i2c_slave_top/registers/n16435 ), 
    .OFX0(\i2c_slave_top/registers/n15542 ));
  i2c_slave_top_registers_i13482_SLICE_317 
    \i2c_slave_top/registers/i13482/SLICE_317 ( 
    .C1(\i2c_slave_top/registers/cw_current_limit_2 ), 
    .B1(pulse_width_upper_limit_2), .A1(\i2c_slave_top/registers/n16521 ), 
    .C0(\i2c_slave_top/registers/static_control_10 ), .B0(static_control_2), 
    .A0(\i2c_slave_top/n16546 ), .M0(\i2c_slave_top/registers/n16548 ), 
    .OFX0(\i2c_slave_top/registers/n16194 ));
  i2c_slave_top_registers_i13031_SLICE_318 
    \i2c_slave_top/registers/i13031/SLICE_318 ( 
    .C1(\i2c_slave_top/registers/n16521 ), 
    .B1(\i2c_slave_top/registers/cw_mon_current_limit_4 ), 
    .A1(rate_lower_limit_4), .C0(\i2c_slave_top/registers/n16559 ), 
    .B0(\i2c_slave_top/registers/pwm_current_limit_4 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_4 ), 
    .M0(\i2c_slave_top/registers/n16435 ), 
    .OFX0(\i2c_slave_top/registers/n15539 ));
  i2c_slave_top_registers_i13478_SLICE_319 
    \i2c_slave_top/registers/i13478/SLICE_319 ( 
    .C1(\i2c_slave_top/registers/cw_current_limit_3 ), 
    .B1(pulse_width_upper_limit_3), .A1(\i2c_slave_top/registers/n16521 ), 
    .C0(\i2c_slave_top/registers/static_control_11 ), .B0(static_control_3), 
    .A0(\i2c_slave_top/n16546 ), .M0(\i2c_slave_top/registers/n16548 ), 
    .OFX0(\i2c_slave_top/registers/n16191 ));
  i2c_slave_top_registers_i13473_SLICE_320 
    \i2c_slave_top/registers/i13473/SLICE_320 ( 
    .C1(\i2c_slave_top/registers/cw_current_limit_4 ), 
    .B1(pulse_width_upper_limit_4), .A1(\i2c_slave_top/registers/n16521 ), 
    .C0(\i2c_slave_top/registers/static_control_12 ), .B0(static_control_4), 
    .A0(\i2c_slave_top/n16546 ), .M0(\i2c_slave_top/registers/n16548 ), 
    .OFX0(\i2c_slave_top/registers/n16186 ));
  i2c_slave_top_registers_i13035_SLICE_321 
    \i2c_slave_top/registers/i13035/SLICE_321 ( 
    .C1(\i2c_slave_top/registers/n16559 ), .B1(rate_upper_limit_21), 
    .A1(rate_upper_limit_5), .C0(\i2c_slave_top/registers/n16521 ), 
    .B0(\i2c_slave_top/registers/pwm_mon_current_limit_5 ), 
    .A0(pulse_width_upper_limit_21), .M1(\i2c_slave_top/registers/n16548 ), 
    .M0(\i2c_slave_top/registers/n16435 ), 
    .FXB(\i2c_slave_top/registers/n15543 ), 
    .FXA(\i2c_slave_top/registers/n15542 ), 
    .OFX0(\i2c_slave_top/registers/n15543 ), 
    .OFX1(\i2c_slave_top/registers/n15544 ));
  i2c_slave_top_registers_i13028_SLICE_322 
    \i2c_slave_top/registers/i13028/SLICE_322 ( 
    .C1(\i2c_slave_top/registers/n16521 ), 
    .B1(\i2c_slave_top/registers/cw_mon_current_limit_3 ), 
    .A1(rate_lower_limit_3), .C0(\i2c_slave_top/registers/n16559 ), 
    .B0(\i2c_slave_top/registers/pwm_current_limit_3 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_3 ), 
    .M0(\i2c_slave_top/registers/n16435 ), 
    .OFX0(\i2c_slave_top/registers/n15536 ));
  i2c_slave_top_registers_i13025_SLICE_323 
    \i2c_slave_top/registers/i13025/SLICE_323 ( 
    .C1(\i2c_slave_top/registers/n16521 ), 
    .B1(\i2c_slave_top/registers/cw_mon_current_limit_2 ), 
    .A1(rate_lower_limit_2), .C0(\i2c_slave_top/registers/n16559 ), 
    .B0(\i2c_slave_top/registers/pwm_current_limit_2 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_2 ), 
    .M0(\i2c_slave_top/registers/n16435 ), 
    .OFX0(\i2c_slave_top/registers/n15533 ));
  i2c_slave_top_registers_i13467_SLICE_324 
    \i2c_slave_top/registers/i13467/SLICE_324 ( 
    .C1(\i2c_slave_top/registers/cw_current_limit_5 ), 
    .B1(pulse_width_upper_limit_5), .A1(\i2c_slave_top/registers/n16521 ), 
    .C0(\i2c_slave_top/registers/static_control_13 ), .B0(static_control_5), 
    .A0(\i2c_slave_top/n16546 ), .M0(\i2c_slave_top/registers/n16548 ), 
    .OFX0(\i2c_slave_top/registers/n16180 ));
  i2c_slave_top_registers_i13022_SLICE_325 
    \i2c_slave_top/registers/i13022/SLICE_325 ( 
    .C1(\i2c_slave_top/registers/n16521 ), 
    .B1(\i2c_slave_top/registers/cw_mon_current_limit_1 ), 
    .A1(rate_lower_limit_1), .C0(\i2c_slave_top/registers/n16559 ), 
    .B0(\i2c_slave_top/registers/pwm_current_limit_1 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_1 ), 
    .M0(\i2c_slave_top/registers/n16435 ), 
    .OFX0(\i2c_slave_top/registers/n15530 ));
  i2c_slave_top_registers_i13387_SLICE_326 
    \i2c_slave_top/registers/i13387/SLICE_326 ( 
    .C1(\i2c_slave_top/registers/cw_current_limit_0 ), 
    .B1(pulse_width_upper_limit_0), .A1(\i2c_slave_top/registers/n16521 ), 
    .C0(static_control_8), .B0(\i2c_slave_top/registers/static_control_0 ), 
    .A0(\i2c_slave_top/n16546 ), .M0(\i2c_slave_top/registers/n16548 ), 
    .OFX0(\i2c_slave_top/registers/n16057 ));
  i2c_slave_top_registers_i13019_SLICE_327 
    \i2c_slave_top/registers/i13019/SLICE_327 ( 
    .C1(\i2c_slave_top/registers/pwm_mon_current_limit_15 ), 
    .B1(\i2c_slave_top/registers/cw_current_limit_15 ), 
    .A1(\i2c_slave_top/registers/n16559 ), 
    .C0(\i2c_slave_top/registers/n16559 ), 
    .B0(\i2c_slave_top/registers/pwm_current_limit_15 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_15 ), 
    .M1(\i2c_slave_top/n16546 ), .M0(\i2c_slave_top/registers/n16548 ), 
    .FXB(\i2c_slave_top/registers/n15529 ), 
    .FXA(\i2c_slave_top/registers/n15550 ), 
    .OFX0(\i2c_slave_top/registers/n15527 ), 
    .OFX1(\i2c_slave_top/registers/n2550 ));
  i2c_slave_top_registers_i13016_SLICE_328 
    \i2c_slave_top/registers/i13016/SLICE_328 ( 
    .C1(\i2c_slave_top/registers/pwm_mon_current_limit_14 ), 
    .B1(\i2c_slave_top/registers/cw_current_limit_14 ), 
    .A1(\i2c_slave_top/registers/n16559 ), 
    .C0(\i2c_slave_top/registers/n16559 ), 
    .B0(\i2c_slave_top/registers/pwm_current_limit_14 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_14 ), 
    .M1(\i2c_slave_top/n16546 ), .M0(\i2c_slave_top/registers/n16548 ), 
    .FXB(\i2c_slave_top/registers/n15526 ), 
    .FXA(\i2c_slave_top/registers/n15547 ), 
    .OFX0(\i2c_slave_top/registers/n15524 ), 
    .OFX1(\i2c_slave_top/registers/n2551 ));
  i2c_slave_top_registers_i13013_SLICE_329 
    \i2c_slave_top/registers/i13013/SLICE_329 ( 
    .C1(\i2c_slave_top/registers/pwm_mon_current_limit_13 ), 
    .B1(\i2c_slave_top/registers/cw_current_limit_13 ), 
    .A1(\i2c_slave_top/registers/n16559 ), 
    .C0(\i2c_slave_top/registers/n16559 ), 
    .B0(\i2c_slave_top/registers/pwm_current_limit_13 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_13 ), 
    .M1(\i2c_slave_top/n16546 ), .M0(\i2c_slave_top/registers/n16548 ), 
    .FXB(\i2c_slave_top/registers/n15523 ), 
    .FXA(\i2c_slave_top/registers/n15544 ), 
    .OFX0(\i2c_slave_top/registers/n15521 ), 
    .OFX1(\i2c_slave_top/registers/n2552 ));
  i2c_slave_top_registers_i13010_SLICE_330 
    \i2c_slave_top/registers/i13010/SLICE_330 ( 
    .C1(\i2c_slave_top/registers/pwm_mon_current_limit_12 ), 
    .B1(\i2c_slave_top/registers/cw_current_limit_12 ), 
    .A1(\i2c_slave_top/registers/n16559 ), 
    .C0(\i2c_slave_top/registers/n16559 ), 
    .B0(\i2c_slave_top/registers/pwm_current_limit_12 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_12 ), 
    .M1(\i2c_slave_top/n16546 ), .M0(\i2c_slave_top/registers/n16548 ), 
    .FXB(\i2c_slave_top/registers/n15520 ), 
    .FXA(\i2c_slave_top/registers/n15541 ), 
    .OFX0(\i2c_slave_top/registers/n15518 ), 
    .OFX1(\i2c_slave_top/registers/n2553 ));
  i2c_slave_top_registers_i13463_SLICE_331 
    \i2c_slave_top/registers/i13463/SLICE_331 ( 
    .C1(\i2c_slave_top/registers/cw_current_limit_6 ), 
    .B1(pulse_width_upper_limit_6), .A1(\i2c_slave_top/registers/n16521 ), 
    .C0(\i2c_slave_top/registers/static_control_14 ), .B0(static_control_6), 
    .A0(\i2c_slave_top/n16546 ), .M0(\i2c_slave_top/registers/n16548 ), 
    .OFX0(\i2c_slave_top/registers/n16177 ));
  i2c_slave_top_registers_i13007_SLICE_332 
    \i2c_slave_top/registers/i13007/SLICE_332 ( 
    .C1(\i2c_slave_top/registers/pwm_mon_current_limit_11 ), 
    .B1(\i2c_slave_top/registers/cw_current_limit_11 ), 
    .A1(\i2c_slave_top/registers/n16559 ), 
    .C0(\i2c_slave_top/registers/n16559 ), 
    .B0(\i2c_slave_top/registers/pwm_current_limit_11 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_11 ), 
    .M1(\i2c_slave_top/n16546 ), .M0(\i2c_slave_top/registers/n16548 ), 
    .FXB(\i2c_slave_top/registers/n15517 ), 
    .FXA(\i2c_slave_top/registers/n15538 ), 
    .OFX0(\i2c_slave_top/registers/n15515 ), 
    .OFX1(\i2c_slave_top/registers/n2554 ));
  i2c_slave_top_registers_i13004_SLICE_333 
    \i2c_slave_top/registers/i13004/SLICE_333 ( 
    .C1(\i2c_slave_top/registers/pwm_mon_current_limit_10 ), 
    .B1(\i2c_slave_top/registers/cw_current_limit_10 ), 
    .A1(\i2c_slave_top/registers/n16559 ), 
    .C0(\i2c_slave_top/registers/n16559 ), 
    .B0(\i2c_slave_top/registers/pwm_current_limit_10 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_10 ), 
    .M1(\i2c_slave_top/n16546 ), .M0(\i2c_slave_top/registers/n16548 ), 
    .FXB(\i2c_slave_top/registers/n15514 ), 
    .FXA(\i2c_slave_top/registers/n15535 ), 
    .OFX0(\i2c_slave_top/registers/n15512 ), 
    .OFX1(\i2c_slave_top/registers/n2555 ));
  i2c_slave_top_registers_i13001_SLICE_334 
    \i2c_slave_top/registers/i13001/SLICE_334 ( 
    .C1(\i2c_slave_top/registers/pwm_mon_current_limit_9 ), 
    .B1(\i2c_slave_top/registers/cw_current_limit_9 ), 
    .A1(\i2c_slave_top/registers/n16559 ), 
    .C0(\i2c_slave_top/registers/n16559 ), 
    .B0(\i2c_slave_top/registers/pwm_current_limit_9 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_9 ), 
    .M1(\i2c_slave_top/n16546 ), .M0(\i2c_slave_top/registers/n16548 ), 
    .FXB(\i2c_slave_top/registers/n15511 ), 
    .FXA(\i2c_slave_top/registers/n15532 ), 
    .OFX0(\i2c_slave_top/registers/n15509 ), 
    .OFX1(\i2c_slave_top/registers/n2556 ));
  i2c_slave_top_registers_i12998_SLICE_335 
    \i2c_slave_top/registers/i12998/SLICE_335 ( 
    .C1(\i2c_slave_top/registers/n16521 ), 
    .B1(\i2c_slave_top/registers/cw_mon_current_limit_0 ), 
    .A1(rate_lower_limit_0), .C0(\i2c_slave_top/registers/n16559 ), 
    .B0(\i2c_slave_top/registers/pwm_current_limit_0 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_0 ), 
    .M0(\i2c_slave_top/registers/n16435 ), 
    .OFX0(\i2c_slave_top/registers/n15506 ));
  i2c_slave_top_registers_i13459_SLICE_336 
    \i2c_slave_top/registers/i13459/SLICE_336 ( 
    .C1(\i2c_slave_top/registers/cw_current_limit_7 ), 
    .B1(pulse_width_upper_limit_7), .A1(\i2c_slave_top/registers/n16521 ), 
    .C0(\i2c_slave_top/registers/static_control_15 ), .B0(static_control_7), 
    .A0(\i2c_slave_top/n16546 ), .M0(\i2c_slave_top/registers/n16548 ), 
    .OFX0(\i2c_slave_top/registers/n16174 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_i13418_SLICE_337 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13418/SLICE_337 
    ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16376 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3183 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16375 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/count_i_3__N_141 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_140 )
    , 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16431 ), 
    .OFX0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_12 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_i13776_SLICE_338 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13776/SLICE_338 
    ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_0 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_4 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_6 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_2 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .OFX0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n17204 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_i13773_SLICE_339 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13773/SLICE_339 
    ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_1 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_5 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_3 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .M1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .FXB(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n17201 ), 
    .FXA(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n17204 ), 
    .OFX0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n17201 ), 
    .OFX1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_321 )
    );
  reset_generator_i10901_SLICE_340 \reset_generator/i10901/SLICE_340 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16431 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , .B1(n4), .A1(reset_bus_i), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13380 ), 
    .C0(n4), .B0(reset_bus_i), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_140 )
    , .M0(count_i_3__N_145), .OFX0(n13409));
  limit_check_logic_check_count_31__I_0_i58_SLICE_341 
    \limit_check/logic_check/count_31__I_0_i58/SLICE_341 ( 
    .C1(\limit_check/logic_check/n18_adj_1727 ), .B1(rate_lower_limit_31), 
    .A1(\limit_check/logic_check/count_31 ), 
    .C0(\limit_check/logic_check/n20_adj_1730 ), .B0(rate_lower_limit_30), 
    .A0(\limit_check/logic_check/count_30 ), 
    .M1(\limit_check/logic_check/n15469 ), 
    .M0(\limit_check/logic_check/n15473 ), .FXB(\limit_check/logic_check/n58 ), 
    .FXA(\limit_check/logic_check/n52 ), .OFX0(\limit_check/logic_check/n58 ), 
    .OFX1(\limit_check/logic_check/n60 ));
  limit_check_logic_check_count_31__I_0_i48_SLICE_342 
    \limit_check/logic_check/count_31__I_0_i48/SLICE_342 ( 
    .D1(\limit_check/logic_check/n8_adj_1706 ), 
    .C1(\limit_check/logic_check/n44_adj_1705 ), 
    .B1(\limit_check/logic_check/n15415 ), 
    .A1(\limit_check/logic_check/n16447 ), 
    .C0(\limit_check/logic_check/n16_adj_1734 ), .B0(rate_lower_limit_22), 
    .A0(\limit_check/logic_check/count_22 ), 
    .M0(\limit_check/logic_check/n15422 ), 
    .OFX0(\limit_check/logic_check/n48 ));
  limit_check_logic_check_count_31__I_0_i38_SLICE_343 
    \limit_check/logic_check/count_31__I_0_i38/SLICE_343 ( 
    .D1(\limit_check/logic_check/n10_adj_1704 ), 
    .C1(\limit_check/logic_check/n34_adj_1703 ), 
    .B1(\limit_check/logic_check/n15373 ), 
    .A1(\limit_check/logic_check/n16442 ), 
    .C0(\limit_check/logic_check/n12_adj_1739 ), .B0(rate_lower_limit_17), 
    .A0(\limit_check/logic_check/count_17 ), 
    .M1(\limit_check/logic_check/n15378 ), 
    .M0(\limit_check/logic_check/n15380 ), .FXB(\limit_check/logic_check/n38 ), 
    .FXA(\limit_check/logic_check/n28 ), .OFX0(\limit_check/logic_check/n38 ), 
    .OFX1(\limit_check/logic_check/n40 ));
  limit_check_logic_check_rate_upper_limit_31__I_0_i48_SLICE_344 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i48/SLICE_344 ( 
    .D1(\limit_check/logic_check/n8_adj_1701 ), 
    .C1(\limit_check/logic_check/n44_adj_1700 ), 
    .B1(\limit_check/logic_check/n15217 ), 
    .A1(\limit_check/logic_check/n16538 ), 
    .C0(\limit_check/logic_check/n16_adj_1718 ), 
    .B0(\limit_check/logic_check/count_22 ), .A0(rate_upper_limit_22), 
    .M0(\limit_check/logic_check/n15224 ), 
    .OFX0(\limit_check/logic_check/n48_adj_1671 ));
  limit_check_logic_check_rate_upper_limit_31__I_0_i38_SLICE_345 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i38/SLICE_345 ( 
    .D1(\limit_check/logic_check/n10_adj_1699 ), 
    .C1(\limit_check/logic_check/n34_adj_1698 ), 
    .B1(\limit_check/logic_check/n15175 ), 
    .A1(\limit_check/logic_check/n16551 ), 
    .C0(\limit_check/logic_check/n12_adj_1737 ), 
    .B0(\limit_check/logic_check/count_17 ), .A0(rate_upper_limit_17), 
    .M1(\limit_check/logic_check/n15180 ), 
    .M0(\limit_check/logic_check/n15182 ), 
    .FXB(\limit_check/logic_check/n38_adj_1645 ), 
    .FXA(\limit_check/logic_check/n28_adj_1644 ), 
    .OFX0(\limit_check/logic_check/n38_adj_1645 ), 
    .OFX1(\limit_check/logic_check/n40_adj_1646 ));
  limit_check_logic_check_count_31__I_0_142_i48_SLICE_346 
    \limit_check/logic_check/count_31__I_0_142_i48/SLICE_346 ( 
    .D1(\limit_check/logic_check/n8 ), 
    .C1(\limit_check/logic_check/n44_adj_1697 ), 
    .B1(\limit_check/logic_check/n15019 ), 
    .A1(\limit_check/logic_check/n16468 ), .C0(\limit_check/logic_check/n16 ), 
    .B0(pulse_width_lower_limit_22), .A0(\limit_check/logic_check/count_22 ), 
    .M0(\limit_check/logic_check/n15026 ), 
    .OFX0(\limit_check/logic_check/n48_adj_1676 ));
  limit_check_logic_check_count_31__I_0_142_i38_SLICE_347 
    \limit_check/logic_check/count_31__I_0_142_i38/SLICE_347 ( 
    .D1(\limit_check/logic_check/n10 ), .C1(\limit_check/logic_check/n34 ), 
    .B1(\limit_check/logic_check/n14977 ), 
    .A1(\limit_check/logic_check/n16472 ), .C0(\limit_check/logic_check/n12 ), 
    .B0(pulse_width_lower_limit_17), .A0(\limit_check/logic_check/count_17 ), 
    .M1(\limit_check/logic_check/n14982 ), 
    .M0(\limit_check/logic_check/n14984 ), 
    .FXB(\limit_check/logic_check/n38_adj_1648 ), 
    .FXA(\limit_check/logic_check/n28_adj_1647 ), 
    .OFX0(\limit_check/logic_check/n38_adj_1648 ), 
    .OFX1(\limit_check/logic_check/n40_adj_1649 ));
  limit_check_logic_check_pulse_width_upper_limit_31__I_0_i48_SLICE_348 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i48/SLICE_348 ( 
    .D1(\limit_check/logic_check/n8_adj_1694 ), 
    .C1(\limit_check/logic_check/n44 ), .B1(\limit_check/logic_check/n14814 ), 
    .A1(\limit_check/logic_check/n16494 ), 
    .C0(\limit_check/logic_check/n16_adj_1677 ), 
    .B0(\limit_check/logic_check/count_22 ), .A0(pulse_width_upper_limit_22), 
    .M0(\limit_check/logic_check/n14821 ), 
    .OFX0(\limit_check/logic_check/n48_adj_1681 ));
  limit_check_logic_check_rate_upper_limit_31__I_0_i58_SLICE_349 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i58/SLICE_349 ( 
    .C1(\limit_check/logic_check/n18_adj_1712 ), 
    .B1(\limit_check/logic_check/count_31 ), .A1(rate_upper_limit_31), 
    .C0(\limit_check/logic_check/n20_adj_1717 ), 
    .B0(\limit_check/logic_check/count_30 ), .A0(rate_upper_limit_30), 
    .M1(\limit_check/logic_check/n15271 ), 
    .M0(\limit_check/logic_check/n15275 ), 
    .FXB(\limit_check/logic_check/n58_adj_1655 ), 
    .FXA(\limit_check/logic_check/n52_adj_1654 ), 
    .OFX0(\limit_check/logic_check/n58_adj_1655 ), 
    .OFX1(\limit_check/logic_check/n60_adj_1656 ));
  limit_check_logic_check_pulse_width_upper_limit_31__I_0_i38_SLICE_350 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i38/SLICE_350 ( 
    .D1(\limit_check/logic_check/n10_adj_1693 ), 
    .C1(\limit_check/logic_check/n34_adj_1672 ), 
    .B1(\limit_check/logic_check/n14772 ), 
    .A1(\limit_check/logic_check/n16499 ), 
    .C0(\limit_check/logic_check/n12_adj_1691 ), 
    .B0(\limit_check/logic_check/count_17 ), .A0(pulse_width_upper_limit_17), 
    .M1(\limit_check/logic_check/n14777 ), 
    .M0(\limit_check/logic_check/n14779 ), 
    .FXB(\limit_check/logic_check/n38_adj_1651 ), 
    .FXA(\limit_check/logic_check/n28_adj_1650 ), 
    .OFX0(\limit_check/logic_check/n38_adj_1651 ), 
    .OFX1(\limit_check/logic_check/n40_adj_1652 ));
  limit_check_logic_check_count_31__I_0_142_i58_SLICE_351 
    \limit_check/logic_check/count_31__I_0_142_i58/SLICE_351 ( 
    .C1(\limit_check/logic_check/n18 ), .B1(pulse_width_lower_limit_31), 
    .A1(\limit_check/logic_check/count_31 ), 
    .C0(\limit_check/logic_check/n20_adj_1748 ), 
    .B0(pulse_width_lower_limit_30), .A0(\limit_check/logic_check/count_30 ), 
    .M1(\limit_check/logic_check/n15073 ), 
    .M0(\limit_check/logic_check/n15077 ), 
    .FXB(\limit_check/logic_check/n58_adj_1658 ), 
    .FXA(\limit_check/logic_check/n52_adj_1657 ), 
    .OFX0(\limit_check/logic_check/n58_adj_1658 ), 
    .OFX1(\limit_check/logic_check/n60_adj_1659 ));
  limit_check_logic_check_pulse_width_upper_limit_31__I_0_i58_SLICE_352 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i58/SLICE_352 ( 
    .C1(\limit_check/logic_check/n18_adj_1653 ), 
    .B1(\limit_check/logic_check/count_31 ), .A1(pulse_width_upper_limit_31), 
    .C0(\limit_check/logic_check/n20 ), 
    .B0(\limit_check/logic_check/count_30 ), .A0(pulse_width_upper_limit_30), 
    .M1(\limit_check/logic_check/n14868 ), 
    .M0(\limit_check/logic_check/n14872 ), 
    .FXB(\limit_check/logic_check/n58_adj_1661 ), 
    .FXA(\limit_check/logic_check/n52_adj_1660 ), 
    .OFX0(\limit_check/logic_check/n58_adj_1661 ), 
    .OFX1(\limit_check/logic_check/n60_adj_1662 ));
  limit_check_logic_check_count_31__I_0_i52_SLICE_353 
    \limit_check/logic_check/count_31__I_0_i52/SLICE_353 ( 
    .C1(\limit_check/logic_check/n22_adj_1729 ), .B1(rate_lower_limit_28), 
    .A1(\limit_check/logic_check/count_28 ), .C0(rate_lower_limit_2), 
    .B0(rate_lower_limit_3), .A0(\limit_check/logic_check/count_3 ), 
    .M0(\limit_check/logic_check/n15451 ), 
    .OFX0(\limit_check/logic_check/n52 ));
  limit_check_logic_check_count_31__I_0_i28_SLICE_354 
    \limit_check/logic_check/count_31__I_0_i28/SLICE_354 ( 
    .C1(\limit_check/logic_check/n14_adj_1740 ), .B1(rate_lower_limit_15), 
    .A1(\limit_check/logic_check/count_15 ), .D0(rate_lower_limit_0), 
    .C0(rate_lower_limit_1), .B0(\limit_check/logic_check/count_1 ), 
    .A0(\limit_check/logic_check/count_0 ), 
    .M0(\limit_check/logic_check/n15346 ), 
    .OFX0(\limit_check/logic_check/n28 ));
  limit_check_logic_check_rate_upper_limit_31__I_0_i52_SLICE_355 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i52/SLICE_355 ( 
    .C1(\limit_check/logic_check/n22_adj_1713 ), 
    .B1(\limit_check/logic_check/count_28 ), .A1(rate_upper_limit_28), 
    .C0(\limit_check/logic_check/count_2 ), 
    .B0(\limit_check/logic_check/count_3 ), .A0(rate_upper_limit_3), 
    .M0(\limit_check/logic_check/n15253 ), 
    .OFX0(\limit_check/logic_check/n52_adj_1654 ));
  limit_check_logic_check_rate_upper_limit_31__I_0_i28_SLICE_356 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i28/SLICE_356 ( 
    .C1(\limit_check/logic_check/n14_adj_1710 ), 
    .B1(\limit_check/logic_check/count_15 ), .A1(rate_upper_limit_15), 
    .D0(rate_upper_limit_0), .C0(rate_upper_limit_1), 
    .B0(\limit_check/logic_check/count_1 ), 
    .A0(\limit_check/logic_check/count_0 ), 
    .M0(\limit_check/logic_check/n15148 ), 
    .OFX0(\limit_check/logic_check/n28_adj_1644 ));
  limit_check_logic_check_count_31__I_0_142_i52_SLICE_357 
    \limit_check/logic_check/count_31__I_0_142_i52/SLICE_357 ( 
    .C1(\limit_check/logic_check/n22_adj_1746 ), 
    .B1(pulse_width_lower_limit_28), .A1(\limit_check/logic_check/count_28 ), 
    .C0(pulse_width_lower_limit_2), .B0(pulse_width_lower_limit_3), 
    .A0(\limit_check/logic_check/count_3 ), 
    .M0(\limit_check/logic_check/n15055 ), 
    .OFX0(\limit_check/logic_check/n52_adj_1657 ));
  limit_check_logic_check_count_31__I_0_142_i28_SLICE_358 
    \limit_check/logic_check/count_31__I_0_142_i28/SLICE_358 ( 
    .C1(\limit_check/logic_check/n14 ), .B1(pulse_width_lower_limit_15), 
    .A1(\limit_check/logic_check/count_15 ), .D0(pulse_width_lower_limit_0), 
    .C0(pulse_width_lower_limit_1), .B0(\limit_check/logic_check/count_1 ), 
    .A0(\limit_check/logic_check/count_0 ), 
    .M0(\limit_check/logic_check/n14950 ), 
    .OFX0(\limit_check/logic_check/n28_adj_1647 ));
  limit_check_logic_check_pulse_width_upper_limit_31__I_0_i52_SLICE_359 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i52/SLICE_359 ( 
    .C1(\limit_check/logic_check/n22 ), 
    .B1(\limit_check/logic_check/count_28 ), .A1(pulse_width_upper_limit_28), 
    .C0(\limit_check/logic_check/count_2 ), 
    .B0(\limit_check/logic_check/count_3 ), .A0(pulse_width_upper_limit_3), 
    .M0(\limit_check/logic_check/n14850 ), 
    .OFX0(\limit_check/logic_check/n52_adj_1660 ));
  limit_check_logic_check_pulse_width_upper_limit_31__I_0_i28_SLICE_360 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i28/SLICE_360 ( 
    .C1(\limit_check/logic_check/n14_adj_1687 ), 
    .B1(\limit_check/logic_check/count_15 ), .A1(pulse_width_upper_limit_15), 
    .D0(pulse_width_upper_limit_0), .C0(pulse_width_upper_limit_1), 
    .B0(\limit_check/logic_check/count_1 ), 
    .A0(\limit_check/logic_check/count_0 ), 
    .M0(\limit_check/logic_check/n14745 ), 
    .OFX0(\limit_check/logic_check/n28_adj_1650 ));
  i2c_slave_top_registers_SLICE_361 \i2c_slave_top/registers/SLICE_361 ( 
    .D1(\i2c_slave_top/registers/n16388 ), 
    .C1(\i2c_slave_top/registers/n16404 ), 
    .B1(\i2c_slave_top/registers/n16434 ), 
    .A1(\i2c_slave_top/registers/n16559 ), 
    .D0(\i2c_slave_top/registers/n16434 ), .C0(\i2c_slave_top/registers/n29 ), 
    .B0(\i2c_slave_top/registers/n16383 ), 
    .A0(\i2c_slave_top/registers/n2558 ), .M1(\i2c_slave_top/n16414 ), 
    .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_158 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/n5992 ), 
    .Q0(\i2c_slave_top/registers/cw_current_limit_2 ), 
    .F1(\i2c_slave_top/registers/n16383 ), 
    .Q1(\i2c_slave_top/registers/cw_current_limit_3 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_362 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_362 ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_325 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16527 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5895 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_325 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_363 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_363 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5895 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14652 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5895 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5864 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_7 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_321 )
    , 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_1 )
    , 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/rw_mode_i_N_313 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_317 )
    , .Q0(\i2c_slave_top/i2cslave_controller_top/rw_mode_i ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5864 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_364 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_364 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_11 )
    , 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3086 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16431 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16382 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3183 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16431 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16375 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16376 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_11 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_10 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_365 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_365 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16403 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_1 )
    , .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n667 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16401 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_1 )
    , .B0(count_i_3__N_145), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n8 ), 
    .M1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , .M0(count_i_3__N_145), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2 ), 
    .Q0(\i2c_slave_top/state_1_N_1054_0 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n8 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack1_i )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_366 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_366 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n7_adj_1751 )
    , 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_3 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n667 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16401 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_3 )
    , .B0(count_i_3__N_145), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n29 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , .CLK(clk_div2), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2_adj_1755 )
    , 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n29 ));
  SLICE_367 SLICE_367( .D1(\limit_check/logic_check/n15062 ), 
    .C1(\limit_check/logic_check/n16464 ), 
    .B1(\limit_check/logic_check/n60_adj_1659 ), 
    .A1(\limit_check/logic_check/n48_adj_1676 ), 
    .D0(\limit_check/logic_check/n15060 ), 
    .C0(\limit_check/logic_check/n16464 ), .B0(\limit_check/logic_check/n62 ), 
    .A0(\limit_check/logic_check/n40_adj_1649 ), .M1(\i2c_slave_top/n16414 ), 
    .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_173 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/pulse_lower_limit_fail_N_1285 ), 
    .Q0(\i2c_slave_top/registers/pwm_mon_current_limit_2 ), 
    .F1(\limit_check/logic_check/n62 ), 
    .Q1(\i2c_slave_top/registers/pwm_mon_current_limit_3 ));
  limit_check_logic_check_SLICE_368 \limit_check/logic_check/SLICE_368 ( 
    .D1(\limit_check/logic_check/n14857 ), 
    .C1(\limit_check/logic_check/n16490 ), 
    .B1(\limit_check/logic_check/n60_adj_1662 ), 
    .A1(\limit_check/logic_check/n48_adj_1681 ), 
    .D0(\limit_check/logic_check/n14855 ), 
    .C0(\limit_check/logic_check/n16490 ), 
    .B0(\limit_check/logic_check/n62_adj_1735 ), 
    .A0(\limit_check/logic_check/n40_adj_1652 ), 
    .F0(\limit_check/logic_check/pulse_lower_limit_fail_N_1286 ), 
    .F1(\limit_check/logic_check/n62_adj_1735 ));
  limit_check_logic_check_SLICE_369 \limit_check/logic_check/SLICE_369 ( 
    .D1(\limit_check/logic_check/n15260 ), 
    .C1(\limit_check/logic_check/n16531 ), 
    .B1(\limit_check/logic_check/n60_adj_1656 ), 
    .A1(\limit_check/logic_check/n48_adj_1671 ), 
    .D0(\limit_check/logic_check/n15258 ), 
    .C0(\limit_check/logic_check/n16531 ), 
    .B0(\limit_check/logic_check/n62_adj_1749 ), 
    .A0(\limit_check/logic_check/n40_adj_1646 ), 
    .F0(\limit_check/logic_check/rate_upper_limit_fail_N_1309 ), 
    .F1(\limit_check/logic_check/n62_adj_1749 ));
  adc_control_SLICE_370 \adc_control/SLICE_370 ( .B1(\adc_control/state_3 ), 
    .A1(\adc_control/state_2 ), .D0(\adc_control/data_ready_N_1632 ), 
    .C0(\adc_control/n17325 ), .B0(\adc_control/state_1 ), 
    .A0(\adc_control/state_0 ), .F0(\adc_control/n6032 ), 
    .F1(\adc_control/n17325 ));
  adc_control_SLICE_371 \adc_control/SLICE_371 ( 
    .D1(\adc_control/convert_count_4 ), .C1(\adc_control/convert_count_6 ), 
    .B1(\adc_control/n6 ), .A1(\adc_control/n8 ), 
    .D0(\adc_control/adc_convert_N_1625 ), .C0(\adc_control/n17325 ), 
    .B0(\adc_control/state_1 ), .A0(\adc_control/state_0 ), 
    .F0(\adc_control/clk_div2_enable_28 ), 
    .F1(\adc_control/adc_convert_N_1625 ));
  adc_control_SLICE_372 \adc_control/SLICE_372 ( .D1(\adc_control/state_3 ), 
    .C1(\adc_control/state_2 ), .B1(\adc_control/n16462 ), 
    .A1(\adc_control/adc_convert_N_1625 ), .B0(\adc_control/state_0 ), 
    .A0(\adc_control/state_1 ), .F0(\adc_control/n16462 ), 
    .F1(\adc_control/clk_div2_enable_27 ));
  i2c_slave_top_registers_SLICE_373 \i2c_slave_top/registers/SLICE_373 ( 
    .C1(\i2c_slave_top/registers/n16548 ), .B1(pulse_width_upper_limit_8), 
    .A1(pulse_width_lower_limit_8), .C0(\i2c_slave_top/n16546 ), 
    .B0(\i2c_slave_top/registers/n2314 ), .A0(pulse_width_lower_limit_0), 
    .F0(\i2c_slave_top/registers/n2477 ), .F1(\i2c_slave_top/registers/n2314 ));
  i2c_slave_top_registers_SLICE_374 \i2c_slave_top/registers/SLICE_374 ( 
    .D1(\i2c_slave_top/registers/n96 ), 
    .C1(\i2c_slave_top/registers/addr_i_7 ), 
    .B1(\i2c_slave_top/registers/n86 ), 
    .A1(\i2c_slave_top/registers/addr_i_5 ), 
    .C0(\i2c_slave_top/registers/n5983 ), .B0(\i2c_slave_top/registers/n5984 ), 
    .A0(\i2c_slave_top/registers/n5985 ), 
    .F0(\i2c_slave_top/registers/addr_i_7 ), 
    .F1(\i2c_slave_top/registers/n2558 ));
  i2c_slave_top_registers_SLICE_375 \i2c_slave_top/registers/SLICE_375 ( 
    .D1(\i2c_slave_top/registers/n16521 ), 
    .C1(\i2c_slave_top/registers/addr_i_5 ), 
    .B1(\i2c_slave_top/registers/n16550 ), 
    .A1(\i2c_slave_top/registers/addr_i_7 ), 
    .C0(\i2c_slave_top/registers/n5975 ), .B0(\i2c_slave_top/registers/n5976 ), 
    .A0(\i2c_slave_top/registers/n5977 ), 
    .F0(\i2c_slave_top/registers/addr_i_5 ), 
    .F1(\i2c_slave_top/registers/n16398 ));
  i2c_slave_top_registers_SLICE_376 \i2c_slave_top/registers/SLICE_376 ( 
    .C1(\i2c_slave_top/registers/n5955 ), .B1(\i2c_slave_top/registers/n5956 ), 
    .A1(\i2c_slave_top/registers/n5957 ), 
    .D0(\i2c_slave_top/registers/n16396 ), 
    .C0(\i2c_slave_top/registers/n5595 ), 
    .B0(\i2c_slave_top/registers/n16387 ), .A0(\i2c_slave_top/n16546 ), 
    .M1(\i2c_slave_top/n16420 ), .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_158 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/clk_div2_enable_203 ), 
    .Q0(\i2c_slave_top/registers/cw_current_limit_4 ), 
    .F1(\i2c_slave_top/n16546 ), 
    .Q1(\i2c_slave_top/registers/cw_current_limit_5 ));
  i2c_slave_top_registers_SLICE_377 \i2c_slave_top/registers/SLICE_377 ( 
    .C1(\i2c_slave_top/registers/n16559 ), 
    .B1(\i2c_slave_top/registers/n16550 ), 
    .A1(\i2c_slave_top/registers/addr_i_7 ), 
    .D0(\i2c_slave_top/registers/n16409 ), 
    .C0(\i2c_slave_top/registers/n16387 ), 
    .B0(\i2c_slave_top/registers/n16380 ), .A0(\i2c_slave_top/n16546 ), 
    .M1(\i2c_slave_top/n16430 ), .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_188 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/clk_div2_enable_188 ), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_0 ), 
    .F1(\i2c_slave_top/registers/n16387 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_1 ));
  i2c_slave_top_registers_SLICE_378 \i2c_slave_top/registers/SLICE_378 ( 
    .C1(\i2c_slave_top/registers/n5967 ), .B1(\i2c_slave_top/registers/n5968 ), 
    .A1(\i2c_slave_top/registers/n5969 ), 
    .C0(\i2c_slave_top/registers/n16435 ), .B0(rate_upper_limit_31), 
    .A0(pulse_width_upper_limit_31), .M1(\i2c_slave_top/n16422 ), 
    .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_166 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/n15576 ), 
    .Q0(\i2c_slave_top/registers/cw_current_limit_14 ), 
    .F1(\i2c_slave_top/registers/n16435 ), 
    .Q1(\i2c_slave_top/registers/cw_current_limit_15 ));
  i2c_slave_top_registers_SLICE_379 \i2c_slave_top/registers/SLICE_379 ( 
    .C1(\i2c_slave_top/registers/n16559 ), 
    .B1(\i2c_slave_top/registers/n16550 ), 
    .A1(\i2c_slave_top/registers/addr_i_7 ), 
    .D0(\i2c_slave_top/registers/n16393 ), 
    .C0(\i2c_slave_top/registers/n16409 ), 
    .B0(\i2c_slave_top/registers/n16381 ), .A0(\i2c_slave_top/n16546 ), 
    .M1(\i2c_slave_top/n16414 ), .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_196 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/clk_div2_enable_173 ), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_10 ), 
    .F1(\i2c_slave_top/registers/n16393 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_11 ));
  i2c_slave_top_registers_SLICE_380 \i2c_slave_top/registers/SLICE_380 ( 
    .C1(\i2c_slave_top/registers/n16548 ), 
    .B1(\i2c_slave_top/registers/n16396 ), 
    .A1(\i2c_slave_top/registers/n16435 ), 
    .D0(\i2c_slave_top/registers/n16409 ), 
    .C0(\i2c_slave_top/registers/n16387 ), 
    .B0(\i2c_slave_top/registers/n16381 ), .A0(\i2c_slave_top/n16546 ), 
    .M1(\i2c_slave_top/n16420 ), .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_196 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/clk_div2_enable_158 ), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_12 ), 
    .F1(\i2c_slave_top/registers/n16381 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_13 ));
  i2c_slave_top_registers_SLICE_381 \i2c_slave_top/registers/SLICE_381 ( 
    .D1(\i2c_slave_top/registers/n16410 ), .C1(\i2c_slave_top/n16417 ), 
    .B1(\i2c_slave_top/state_1_N_1054_0 ), 
    .A1(\i2c_slave_top/registers/n16522 ), 
    .D0(\i2c_slave_top/registers/n16393 ), 
    .C0(\i2c_slave_top/registers/n16409 ), 
    .B0(\i2c_slave_top/registers/n16378 ), .A0(\i2c_slave_top/n16546 ), 
    .M1(\i2c_slave_top/n16420 ), .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_188 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/clk_div2_enable_143 ), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_4 ), 
    .F1(\i2c_slave_top/registers/n16378 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_5 ));
  i2c_slave_top_registers_SLICE_382 \i2c_slave_top/registers/SLICE_382 ( 
    .D1(\i2c_slave_top/registers/count_1 ), 
    .C1(\i2c_slave_top/registers/count_2 ), 
    .B1(\i2c_slave_top/registers/count_3 ), 
    .A1(\i2c_slave_top/registers/count_3__N_751 ), .C0(\i2c_slave_top/n3141 ), 
    .B0(\i2c_slave_top/registers/n10730 ), .A0(\i2c_slave_top/n16546 ), 
    .F0(\i2c_slave_top/registers/clk_div2_enable_256 ), 
    .F1(\i2c_slave_top/registers/n10730 ));
  i2c_slave_top_registers_SLICE_383 \i2c_slave_top/registers/SLICE_383 ( 
    .D1(\i2c_slave_top/registers/addr_i_7 ), 
    .C1(\i2c_slave_top/registers/n5979 ), .B1(\i2c_slave_top/registers/n5980 ), 
    .A1(\i2c_slave_top/registers/n5981 ), 
    .D0(\i2c_slave_top/registers/n16559 ), 
    .C0(\i2c_slave_top/registers/n16434 ), 
    .B0(\i2c_slave_top/registers/n16521 ), 
    .A0(\i2c_slave_top/registers/addr_i_5 ), .M1(\i2c_slave_top/n16430 ), 
    .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_136 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/n16379 ), 
    .Q0(\i2c_slave_top/registers/drive_current_limit_8 ), 
    .F1(\i2c_slave_top/registers/n16434 ), 
    .Q1(\i2c_slave_top/registers/drive_current_limit_9 ));
  i2c_slave_top_registers_SLICE_384 \i2c_slave_top/registers/SLICE_384 ( 
    .C1(\i2c_slave_top/registers/n5963 ), .B1(\i2c_slave_top/registers/n5964 ), 
    .A1(\i2c_slave_top/registers/n5965 ), 
    .D0(\i2c_slave_top/registers/n16521 ), 
    .C0(\i2c_slave_top/registers/addr_i_5 ), 
    .B0(\i2c_slave_top/registers/n16548 ), 
    .A0(\i2c_slave_top/registers/n16435 ), 
    .F0(\i2c_slave_top/registers/n5595 ), 
    .F1(\i2c_slave_top/registers/n16548 ));
  i2c_slave_top_registers_SLICE_385 \i2c_slave_top/registers/SLICE_385 ( 
    .D1(\i2c_slave_top/registers/n14656 ), 
    .C1(\i2c_slave_top/registers/n16550 ), 
    .B1(\i2c_slave_top/registers/n16548 ), 
    .A1(\i2c_slave_top/registers/n16396 ), .C0(\i2c_slave_top/registers/n17 ), 
    .B0(\i2c_slave_top/n16546 ), .A0(\i2c_slave_top/registers/n16559 ), 
    .M1(\i2c_slave_top/n16420 ), .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_136 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/clk_div2_enable_253 ), 
    .Q0(\i2c_slave_top/registers/drive_current_limit_12 ), 
    .F1(\i2c_slave_top/registers/n17 ), 
    .Q1(\i2c_slave_top/registers/drive_current_limit_13 ));
  i2c_slave_top_registers_SLICE_386 \i2c_slave_top/registers/SLICE_386 ( 
    .C1(\i2c_slave_top/registers/n5959 ), .B1(\i2c_slave_top/registers/n5960 ), 
    .A1(\i2c_slave_top/registers/n5961 ), .C0(\i2c_slave_top/registers/n5 ), 
    .B0(\i2c_slave_top/n16546 ), .A0(\i2c_slave_top/registers/n16559 ), 
    .M1(\i2c_slave_top/n16414 ), .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_128 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/clk_div2_enable_121 ), 
    .Q0(\i2c_slave_top/registers/drive_current_limit_2 ), 
    .F1(\i2c_slave_top/registers/n16559 ), 
    .Q1(\i2c_slave_top/registers/drive_current_limit_3 ));
  i2c_slave_top_registers_SLICE_387 \i2c_slave_top/registers/SLICE_387 ( 
    .C1(\i2c_slave_top/registers/n16548 ), 
    .B1(\i2c_slave_top/registers/n16435 ), 
    .A1(\i2c_slave_top/registers/n16396 ), .D0(\i2c_slave_top/n16546 ), 
    .C0(\i2c_slave_top/registers/n16559 ), 
    .B0(\i2c_slave_top/registers/n16380 ), 
    .A0(\i2c_slave_top/registers/n16398 ), .M1(\i2c_slave_top/n16430 ), 
    .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_196 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/clk_div2_enable_66 ), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_8 ), 
    .F1(\i2c_slave_top/registers/n16380 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_9 ));
  i2c_slave_top_registers_SLICE_388 \i2c_slave_top/registers/SLICE_388 ( 
    .C1(\i2c_slave_top/registers/n16548 ), .B1(pulse_width_upper_limit_9), 
    .A1(pulse_width_lower_limit_9), .C0(\i2c_slave_top/n16546 ), 
    .B0(\i2c_slave_top/registers/n2313 ), .A0(pulse_width_lower_limit_1), 
    .F0(\i2c_slave_top/registers/n2476 ), .F1(\i2c_slave_top/registers/n2313 ));
  i2c_slave_top_registers_SLICE_389 \i2c_slave_top/registers/SLICE_389 ( 
    .C1(\i2c_slave_top/registers/n16548 ), .B1(pulse_width_upper_limit_10), 
    .A1(pulse_width_lower_limit_10), .C0(\i2c_slave_top/n16546 ), 
    .B0(\i2c_slave_top/registers/n2312 ), .A0(pulse_width_lower_limit_2), 
    .F0(\i2c_slave_top/registers/n2475 ), .F1(\i2c_slave_top/registers/n2312 ));
  i2c_slave_top_registers_SLICE_390 \i2c_slave_top/registers/SLICE_390 ( 
    .D1(\i2c_slave_top/registers/n16548 ), 
    .C1(\i2c_slave_top/registers/n16398 ), 
    .B1(\i2c_slave_top/registers/n16435 ), 
    .A1(\i2c_slave_top/registers/n16396 ), .C0(\i2c_slave_top/registers/n5 ), 
    .B0(\i2c_slave_top/registers/n16559 ), .A0(\i2c_slave_top/n16546 ), 
    .M1(\i2c_slave_top/n16422 ), .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_196 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/clk_div2_enable_113 ), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_14 ), 
    .F1(\i2c_slave_top/registers/n5 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_15 ));
  i2c_slave_top_registers_SLICE_391 \i2c_slave_top/registers/SLICE_391 ( 
    .C1(\i2c_slave_top/registers/n16548 ), .B1(pulse_width_upper_limit_11), 
    .A1(pulse_width_lower_limit_11), .C0(\i2c_slave_top/n16546 ), 
    .B0(\i2c_slave_top/registers/n2311 ), .A0(pulse_width_lower_limit_3), 
    .F0(\i2c_slave_top/registers/n2474 ), .F1(\i2c_slave_top/registers/n2311 ));
  i2c_slave_top_registers_SLICE_392 \i2c_slave_top/registers/SLICE_392 ( 
    .D1(\i2c_slave_top/registers/n16548 ), 
    .C1(\i2c_slave_top/registers/n5967 ), .B1(\i2c_slave_top/registers/n5968 ), 
    .A1(\i2c_slave_top/registers/n5969 ), 
    .D0(\i2c_slave_top/registers/n16396 ), 
    .C0(\i2c_slave_top/registers/n16410 ), 
    .B0(\i2c_slave_top/registers/n16379 ), .A0(\i2c_slave_top/n16546 ), 
    .M1(\i2c_slave_top/n16422 ), .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_188 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/clk_div2_enable_128 ), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_6 ), 
    .F1(\i2c_slave_top/registers/n16410 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_7 ));
  i2c_slave_top_registers_SLICE_393 \i2c_slave_top/registers/SLICE_393 ( 
    .C1(\i2c_slave_top/registers/n16548 ), .B1(pulse_width_upper_limit_12), 
    .A1(pulse_width_lower_limit_12), .C0(\i2c_slave_top/n16546 ), 
    .B0(\i2c_slave_top/registers/n2310 ), .A0(pulse_width_lower_limit_4), 
    .F0(\i2c_slave_top/registers/n2473 ), .F1(\i2c_slave_top/registers/n2310 ));
  i2c_slave_top_registers_SLICE_394 \i2c_slave_top/registers/SLICE_394 ( 
    .C1(\i2c_slave_top/registers/n16548 ), .B1(pulse_width_upper_limit_13), 
    .A1(pulse_width_lower_limit_13), .C0(\i2c_slave_top/n16546 ), 
    .B0(\i2c_slave_top/registers/n2309 ), .A0(pulse_width_lower_limit_5), 
    .F0(\i2c_slave_top/registers/n2472 ), .F1(\i2c_slave_top/registers/n2309 ));
  i2c_slave_top_registers_SLICE_395 \i2c_slave_top/registers/SLICE_395 ( 
    .C1(\i2c_slave_top/registers/n16548 ), .B1(pulse_width_upper_limit_14), 
    .A1(pulse_width_lower_limit_14), .C0(\i2c_slave_top/n16546 ), 
    .B0(\i2c_slave_top/registers/n2308 ), .A0(pulse_width_lower_limit_6), 
    .F0(\i2c_slave_top/registers/n2471 ), .F1(\i2c_slave_top/registers/n2308 ));
  i2c_slave_top_registers_SLICE_396 \i2c_slave_top/registers/SLICE_396 ( 
    .C1(\i2c_slave_top/registers/n16548 ), .B1(pulse_width_upper_limit_15), 
    .A1(pulse_width_lower_limit_15), .C0(\i2c_slave_top/n16546 ), 
    .B0(\i2c_slave_top/registers/n2307 ), .A0(pulse_width_lower_limit_7), 
    .F0(\i2c_slave_top/registers/n2470 ), .F1(\i2c_slave_top/registers/n2307 ));
  i2c_slave_top_SLICE_397 \i2c_slave_top/SLICE_397 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .D0(\i2c_slave_top/state_1_N_1054_0 ), 
    .C0(\i2c_slave_top/wr_done_reg1_i ), .B0(\i2c_slave_top/wr_done_reg2_i ), 
    .A0(\i2c_slave_top/n16523 ), .M0(\i2c_slave_top/registers/n5747 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_736 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/n16389 ), 
    .Q0(\i2c_slave_top/registers/n5957 ), .F1(\i2c_slave_top/n16523 ));
  i2c_slave_top_registers_SLICE_398 \i2c_slave_top/registers/SLICE_398 ( 
    .C1(\i2c_slave_top/registers/n5971 ), .B1(\i2c_slave_top/registers/n5972 ), 
    .A1(\i2c_slave_top/registers/n5973 ), 
    .C0(\i2c_slave_top/registers/n16435 ), 
    .B0(\i2c_slave_top/registers/addr_i_5 ), 
    .A0(\i2c_slave_top/registers/n16521 ), 
    .F0(\i2c_slave_top/registers/n16388 ), 
    .F1(\i2c_slave_top/registers/n16521 ));
  i2c_slave_top_registers_SLICE_399 \i2c_slave_top/registers/SLICE_399 ( 
    .D1(\i2c_slave_top/registers/n16381 ), .C1(\i2c_slave_top/n16546 ), 
    .B1(\i2c_slave_top/registers/n16387 ), 
    .A1(\i2c_slave_top/registers/n16409 ), 
    .D0(\i2c_slave_top/registers/addr_i_5 ), 
    .C0(\i2c_slave_top/registers/n5971 ), .B0(\i2c_slave_top/registers/n5972 ), 
    .A0(\i2c_slave_top/registers/n5973 ), 
    .F0(\i2c_slave_top/registers/n16409 ), 
    .F1(\i2c_slave_top/registers/clk_div2_enable_166 ));
  i2c_slave_top_registers_SLICE_400 \i2c_slave_top/registers/SLICE_400 ( 
    .D1(\i2c_slave_top/registers/n16434 ), 
    .C1(\i2c_slave_top/registers/n16418 ), 
    .B1(\i2c_slave_top/registers/n16381 ), 
    .A1(\i2c_slave_top/registers/n16424 ), 
    .D0(\i2c_slave_top/registers/addr_i_5 ), 
    .C0(\i2c_slave_top/registers/n5971 ), .B0(\i2c_slave_top/registers/n5972 ), 
    .A0(\i2c_slave_top/registers/n5973 ), 
    .F0(\i2c_slave_top/registers/n16418 ), 
    .F1(\i2c_slave_top/registers/clk_div2_enable_35 ));
  i2c_slave_top_registers_SLICE_401 \i2c_slave_top/registers/SLICE_401 ( 
    .D1(\i2c_slave_top/state_1_N_1054_0 ), .C1(\i2c_slave_top/n16417 ), 
    .B1(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A1(\i2c_slave_top/registers/byte_cnt_0 ), .D0(\i2c_slave_top/n16546 ), 
    .C0(\i2c_slave_top/registers/n16387 ), 
    .B0(\i2c_slave_top/registers/n5595 ), 
    .A0(\i2c_slave_top/registers/n16396 ), .M1(\i2c_slave_top/n16414 ), 
    .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_136 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/clk_div2_enable_211 ), 
    .Q0(\i2c_slave_top/registers/drive_current_limit_10 ), 
    .F1(\i2c_slave_top/registers/n16396 ), 
    .Q1(\i2c_slave_top/registers/drive_current_limit_11 ));
  i2c_slave_top_registers_SLICE_402 \i2c_slave_top/registers/SLICE_402 ( 
    .D1(\i2c_slave_top/registers/dynamic_control_9 ), 
    .C1(\i2c_slave_top/registers/dynamic_control_11 ), 
    .B1(\i2c_slave_top/registers/dynamic_control_14 ), 
    .A1(\i2c_slave_top/registers/dynamic_control_7 ), 
    .D0(\i2c_slave_top/registers/n26 ), 
    .C0(\i2c_slave_top/registers/n25_adj_1768 ), 
    .B0(\i2c_slave_top/registers/n27_adj_1767 ), .A0(dynamic_control_0), 
    .F0(\i2c_slave_top/registers/count_3__N_751 ), 
    .F1(\i2c_slave_top/registers/n26 ));
  i2c_slave_top_registers_SLICE_403 \i2c_slave_top/registers/SLICE_403 ( 
    .D1(\i2c_slave_top/registers/dynamic_control_3 ), 
    .C1(\i2c_slave_top/registers/dynamic_control_8 ), 
    .B1(\i2c_slave_top/registers/dynamic_control_13 ), 
    .A1(\i2c_slave_top/registers/dynamic_control_4 ), 
    .D0(\i2c_slave_top/registers/dynamic_control_1 ), 
    .C0(\i2c_slave_top/registers/dynamic_control_6 ), 
    .B0(\i2c_slave_top/registers/n24_adj_1769 ), 
    .A0(\i2c_slave_top/registers/dynamic_control_15 ), 
    .M0(\i2c_slave_top/registers/n5817 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_730 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/n27_adj_1767 ), 
    .Q0(\i2c_slave_top/registers/n5965 ), 
    .F1(\i2c_slave_top/registers/n24_adj_1769 ));
  i2c_slave_top_registers_SLICE_404 \i2c_slave_top/registers/SLICE_404 ( 
    .D1(\i2c_slave_top/registers/n16404 ), 
    .C1(\i2c_slave_top/registers/n16435 ), 
    .B1(\i2c_slave_top/registers/n16434 ), 
    .A1(\i2c_slave_top/registers/n16559 ), 
    .D0(\i2c_slave_top/registers/n16548 ), 
    .C0(\i2c_slave_top/registers/n5955 ), .B0(\i2c_slave_top/registers/n5956 ), 
    .A0(\i2c_slave_top/registers/n5957 ), 
    .F0(\i2c_slave_top/registers/n16404 ), .F1(\i2c_slave_top/registers/n86 ));
  i2c_slave_top_registers_SLICE_405 \i2c_slave_top/registers/SLICE_405 ( 
    .D1(\i2c_slave_top/registers/n16412 ), 
    .C1(\i2c_slave_top/registers/n16381 ), 
    .B1(\i2c_slave_top/registers/n16418 ), 
    .A1(\i2c_slave_top/registers/n16434 ), 
    .D0(\i2c_slave_top/registers/n16559 ), 
    .C0(\i2c_slave_top/registers/n5955 ), .B0(\i2c_slave_top/registers/n5956 ), 
    .A0(\i2c_slave_top/registers/n5957 ), 
    .F0(\i2c_slave_top/registers/n16412 ), 
    .F1(\i2c_slave_top/registers/clk_div2_enable_51 ));
  i2c_slave_top_registers_SLICE_406 \i2c_slave_top/registers/SLICE_406 ( 
    .D1(\i2c_slave_top/registers/n16381 ), 
    .C1(\i2c_slave_top/registers/n16411 ), 
    .B1(\i2c_slave_top/registers/n16418 ), 
    .A1(\i2c_slave_top/registers/n16434 ), 
    .D0(\i2c_slave_top/registers/n16559 ), 
    .C0(\i2c_slave_top/registers/n5955 ), .B0(\i2c_slave_top/registers/n5956 ), 
    .A0(\i2c_slave_top/registers/n5957 ), 
    .F0(\i2c_slave_top/registers/n16411 ), 
    .F1(\i2c_slave_top/registers/clk_div2_enable_59 ));
  i2c_slave_top_registers_SLICE_407 \i2c_slave_top/registers/SLICE_407 ( 
    .D1(\i2c_slave_top/registers/n16381 ), 
    .C1(\i2c_slave_top/registers/n16413 ), 
    .B1(\i2c_slave_top/registers/n16418 ), 
    .A1(\i2c_slave_top/registers/n16434 ), 
    .D0(\i2c_slave_top/registers/n16559 ), 
    .C0(\i2c_slave_top/registers/n5955 ), .B0(\i2c_slave_top/registers/n5956 ), 
    .A0(\i2c_slave_top/registers/n5957 ), 
    .F0(\i2c_slave_top/registers/n16413 ), 
    .F1(\i2c_slave_top/registers/clk_div2_enable_43 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_408 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_408 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_325 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16527 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16386 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16527 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_409 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_409 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_2 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16423 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16527 ), 
    .D0(count_i_3__N_145), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n667 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n7 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n17324 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n7 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_410 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_410 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_4 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16489 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16526 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .M1(\i2c_slave_top/data_out_1 ), .M0(\i2c_slave_top/data_out_0 ), 
    .LSR(\i2c_slave_top/state_1_N_1054_0 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16489 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_0 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16040 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_1 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_411 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_411 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16391 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_6 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_140 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16391 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1760 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_412 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_412 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16392 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_5 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_140 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16392 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1758 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_413 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_413 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_7 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16497 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16489 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16497 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16046 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_414 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_414 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3183 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3176 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16385 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , .C0(count_i_3__N_145), .B0(stop_detect_i), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , .M1(\i2c_slave_top/data_out_7 ), .M0(\i2c_slave_top/data_out_6 ), 
    .LSR(\i2c_slave_top/state_1_N_1054_0 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3183 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_6 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16374 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_7 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_415 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_415 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16406 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_7 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_140 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16406 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1762 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_416 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_416 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3176 ), 
    .B1(next_state_i_3_N_181_0), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16401 ), 
    .B0(stop_detect_i), .A0(count_i_3__N_145), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3176 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16376 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_417 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_417 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16374 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3086 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16382 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5943 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_140 )
    , .A0(\i2c_slave_top/i2cslave_controller_top/count_i_3__N_141 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3086 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5952 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_418 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_418 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5895 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16431 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16385 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3176 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5943 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16431 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_419 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_419 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , .C1(next_state_i_3_N_181_0), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16527 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16526 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16386 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3086 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16385 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3176 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16375 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16385 ));
  SLICE_420 SLICE_420( .C1(d_ff), .B1(reset_n), .A1(stop_detect_i), 
    .D0(n16517), .C0(\i2c_slave_top/addr_start_2 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .F0(\i2c_slave_top/addr_i_7__N_702 ), .F1(n16517));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_421 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_421 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16526 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16527 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/count_i_3__N_141 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n13380 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16526 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_422 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_422 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n667 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16048 ), 
    .B1(count_i_3__N_145), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1141 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_8 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16527 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16526 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1141 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2_adj_1765 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_423 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_423 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n667 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16044 ), 
    .B1(count_i_3__N_145), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1143 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_6 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16527 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16526 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1143 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2_adj_1761 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_424 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_424 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/count_i_3__N_141 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_146 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3041 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n15702 ), 
    .C0(n16517), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_140 )
    , .A0(next_state_i_3_N_181_0), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_8 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n15702 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_425 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_425 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n667 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16042 ), 
    .B1(count_i_3__N_145), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1144 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_5 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16527 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16526 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1144 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2_adj_1759 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_426 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_426 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n667 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16040 ), 
    .B1(count_i_3__N_145), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1145 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_4 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16527 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16526 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1145 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2_adj_1757 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_427 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_427 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n667 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16046 ), 
    .B1(count_i_3__N_145), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1142 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_7 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16527 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16526 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1142 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2_adj_1763 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_428 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_428 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_4 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16407 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16431 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .M1(\i2c_slave_top/data_out_3 ), .M0(\i2c_slave_top/data_out_2 ), 
    .LSR(\i2c_slave_top/state_1_N_1054_0 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16407 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_2 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n324 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_3 ));
  SLICE_429 SLICE_429( .B1(stop_detect_i), .A1(next_state_i_3_N_181_0), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , .C0(n4), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16527 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16526 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11685 ), 
    .F1(n4));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_430 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_430 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n667 ), 
    .C1(stop_detect_i), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , .A1(count_i_3__N_145), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16527 ), 
    .C0(next_state_i_3_N_181_0), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n667 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3041 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_431 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_431 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_8 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16432 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .M1(\i2c_slave_top/data_out_5 ), .M0(\i2c_slave_top/data_out_4 ), 
    .LSR(\i2c_slave_top/state_1_N_1054_0 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16432 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_4 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16048 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_5 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_432 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_432 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16390 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_8 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_140 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16390 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1764 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_433 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_433 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16399 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_2 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_140 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16399 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1753 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_434 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_434 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n7_adj_1751 )
    , 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_3 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_140 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n7_adj_1751 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1754 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_435 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_435 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16403 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_140 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_1 )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16403 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_436 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_436 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16431 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_325 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16403 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16377 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_146 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14091 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16377 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_437 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_437 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_6 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16423 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16489 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16044 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16423 ));
  i2c_slave_top_i2cslave_controller_top_SLICE_438 
    \i2c_slave_top/i2cslave_controller_top/SLICE_438 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/rw_mode_i ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/count_i_3__N_141 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_146 )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/first_read_done )
    , .B0(\i2c_slave_top/i2cslave_controller_top/wr_done_i_N_430 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3840 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/wr_done_i_N_430 ));
  SLICE_439 SLICE_439( .C1(\limit_check/logic_check/n32 ), 
    .B1(pulse_width_lower_limit_20), .A1(\limit_check/logic_check/count_20 ), 
    .C0(pulse_width_lower_limit_18), .B0(pulse_width_lower_limit_19), 
    .A0(\limit_check/logic_check/count_19 ), .M1(\i2c_slave_top/n16422 ), 
    .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_35 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n32 ), .Q0(pulse_width_upper_limit_6), 
    .F1(\limit_check/logic_check/n34 ), .Q1(pulse_width_upper_limit_7));
  SLICE_440 SLICE_440( .D1(\limit_check/logic_check/n14962 ), 
    .C1(\limit_check/logic_check/n16471 ), 
    .B1(\limit_check/logic_check/n16472 ), 
    .A1(\limit_check/logic_check/n16473 ), .B0(pulse_width_lower_limit_20), 
    .A0(\limit_check/logic_check/count_20 ), .M1(\i2c_slave_top/n16422 ), 
    .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_151 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16472 ), 
    .Q0(\i2c_slave_top/registers/pwm_current_limit_14 ), 
    .F1(\limit_check/logic_check/n14989 ), 
    .Q1(\i2c_slave_top/registers/pwm_current_limit_15 ));
  limit_check_logic_check_SLICE_441 \limit_check/logic_check/SLICE_441 ( 
    .D1(\limit_check/logic_check/n14952 ), 
    .C1(\limit_check/logic_check/n16481 ), 
    .B1(\limit_check/logic_check/n16482 ), 
    .A1(\limit_check/logic_check/n16471 ), 
    .C0(\limit_check/logic_check/n15733 ), .B0(pulse_width_lower_limit_20), 
    .A0(\limit_check/logic_check/count_20 ), 
    .F0(\limit_check/logic_check/n14982 ), 
    .F1(\limit_check/logic_check/n15733 ));
  limit_check_logic_check_SLICE_442 \limit_check/logic_check/SLICE_442 ( 
    .D1(\limit_check/logic_check/n14959 ), 
    .C1(\limit_check/logic_check/n16481 ), 
    .B1(\limit_check/logic_check/n16482 ), 
    .A1(\limit_check/logic_check/n16471 ), 
    .C0(\limit_check/logic_check/n15731 ), .B0(pulse_width_lower_limit_20), 
    .A0(\limit_check/logic_check/count_20 ), 
    .F0(\limit_check/logic_check/n14984 ), 
    .F1(\limit_check/logic_check/n15731 ));
  SLICE_443 SLICE_443( .D1(\limit_check/logic_check/n15090 ), 
    .C1(\limit_check/logic_check/n16543 ), 
    .B1(\limit_check/logic_check/n16544 ), 
    .A1(\limit_check/logic_check/n16545 ), 
    .D0(\limit_check/logic_check/n15081 ), .C0(\limit_check/logic_check/n9 ), 
    .B0(\limit_check/logic_check/n11 ), .A0(\limit_check/logic_check/n16547 ), 
    .M1(\i2c_slave_top/n16422 ), .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_97 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n15090 ), .Q0(rate_upper_limit_6), 
    .F1(\limit_check/logic_check/n15103 ), .Q1(rate_upper_limit_7));
  SLICE_444 SLICE_444( .D1(\limit_check/logic_check/n14914 ), 
    .C1(\limit_check/logic_check/n16484 ), 
    .B1(\limit_check/logic_check/n25_adj_1707 ), 
    .A1(\limit_check/logic_check/n16473 ), .B0(pulse_width_lower_limit_21), 
    .A0(\limit_check/logic_check/count_21 ), .M1(\i2c_slave_top/n16420 ), 
    .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_143 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16473 ), 
    .Q0(\i2c_slave_top/registers/pwm_current_limit_4 ), 
    .F1(\limit_check/logic_check/n14994 ), 
    .Q1(\i2c_slave_top/registers/pwm_current_limit_5 ));
  SLICE_445 SLICE_445( .D1(\limit_check/logic_check/n14924 ), 
    .C1(\limit_check/logic_check/n16474 ), 
    .B1(\limit_check/logic_check/n16475 ), 
    .A1(\limit_check/logic_check/n16476 ), .B0(pulse_width_lower_limit_13), 
    .A0(\limit_check/logic_check/count_13 ), .M1(\i2c_slave_top/n16422 ), 
    .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_59 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16474 ), .Q0(pulse_width_upper_limit_30), 
    .F1(\limit_check/logic_check/n14939 ), .Q1(pulse_width_upper_limit_31));
  limit_check_logic_check_SLICE_446 \limit_check/logic_check/SLICE_446 ( 
    .B1(pulse_width_lower_limit_15), .A1(\limit_check/logic_check/count_15 ), 
    .D0(\limit_check/logic_check/n16475 ), 
    .C0(\limit_check/logic_check/n16476 ), .B0(pulse_width_lower_limit_13), 
    .A0(\limit_check/logic_check/count_13 ), 
    .F0(\limit_check/logic_check/n14950 ), 
    .F1(\limit_check/logic_check/n16476 ));
  SLICE_447 SLICE_447( .D1(\limit_check/logic_check/n14936 ), 
    .C1(\limit_check/logic_check/n16475 ), 
    .B1(\limit_check/logic_check/n16476 ), 
    .A1(\limit_check/logic_check/n16480 ), .B0(pulse_width_lower_limit_14), 
    .A0(\limit_check/logic_check/count_14 ), .M1(\i2c_slave_top/n16420 ), 
    .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_35 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16475 ), .Q0(pulse_width_upper_limit_4), 
    .F1(\limit_check/logic_check/n14952 ), .Q1(pulse_width_upper_limit_5));
  limit_check_logic_check_SLICE_448 \limit_check/logic_check/SLICE_448 ( 
    .D1(\limit_check/logic_check/n11 ), .C1(\limit_check/logic_check/n16547 ), 
    .B1(\limit_check/logic_check/n16543 ), 
    .A1(\limit_check/logic_check/n16556 ), 
    .B0(\limit_check/logic_check/count_5 ), .A0(rate_upper_limit_5), 
    .F0(\limit_check/logic_check/n11 ), .F1(\limit_check/logic_check/n15134 ));
  limit_check_logic_check_SLICE_449 \limit_check/logic_check/SLICE_449 ( 
    .D1(\limit_check/logic_check/n9 ), .C1(\limit_check/logic_check/n16544 ), 
    .B1(\limit_check/logic_check/n16545 ), 
    .A1(\limit_check/logic_check/n16541 ), 
    .B0(\limit_check/logic_check/count_4 ), .A0(rate_upper_limit_4), 
    .F0(\limit_check/logic_check/n9 ), .F1(\limit_check/logic_check/n15112 ));
  limit_check_logic_check_SLICE_450 \limit_check/logic_check/SLICE_450 ( 
    .D1(\limit_check/logic_check/n15112 ), 
    .C1(\limit_check/logic_check/n16542 ), .B1(\limit_check/logic_check/n25 ), 
    .A1(\limit_check/logic_check/n16552 ), 
    .B0(\limit_check/logic_check/count_12 ), .A0(rate_upper_limit_12), 
    .F0(\limit_check/logic_check/n25 ), .F1(\limit_check/logic_check/n15192 ));
  SLICE_451 SLICE_451( .D1(\limit_check/logic_check/n14989 ), 
    .C1(\limit_check/logic_check/n16477 ), 
    .B1(\limit_check/logic_check/n16478 ), 
    .A1(\limit_check/logic_check/n16479 ), .B0(pulse_width_lower_limit_22), 
    .A0(\limit_check/logic_check/count_22 ), .M1(\i2c_slave_top/n16422 ), 
    .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_143 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16477 ), 
    .Q0(\i2c_slave_top/registers/pwm_current_limit_6 ), 
    .F1(\limit_check/logic_check/n15004 ), 
    .Q1(\i2c_slave_top/registers/pwm_current_limit_7 ));
  SLICE_452 SLICE_452( .D1(\limit_check/logic_check/n14994 ), 
    .C1(\limit_check/logic_check/n16477 ), 
    .B1(\limit_check/logic_check/n16478 ), 
    .A1(\limit_check/logic_check/n16479 ), .B0(pulse_width_lower_limit_23), 
    .A0(\limit_check/logic_check/count_23 ), .M1(\i2c_slave_top/n16430 ), 
    .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_151 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16478 ), 
    .Q0(\i2c_slave_top/registers/pwm_current_limit_8 ), 
    .F1(\limit_check/logic_check/n15015 ), 
    .Q1(\i2c_slave_top/registers/pwm_current_limit_9 ));
  SLICE_453 SLICE_453( .D1(\limit_check/logic_check/n15001 ), 
    .C1(\limit_check/logic_check/n16477 ), 
    .B1(\limit_check/logic_check/n16478 ), 
    .A1(\limit_check/logic_check/n16479 ), .B0(pulse_width_lower_limit_24), 
    .A0(\limit_check/logic_check/count_24 ), .M1(\i2c_slave_top/n16430 ), 
    .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_173 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16479 ), 
    .Q0(\i2c_slave_top/registers/pwm_mon_current_limit_0 ), 
    .F1(\limit_check/logic_check/n15710 ), 
    .Q1(\i2c_slave_top/registers/pwm_mon_current_limit_1 ));
  SLICE_454 SLICE_454( .C1(\limit_check/logic_check/n42 ), 
    .B1(pulse_width_lower_limit_25), .A1(\limit_check/logic_check/count_25 ), 
    .C0(pulse_width_lower_limit_23), .B0(pulse_width_lower_limit_24), 
    .A0(\limit_check/logic_check/count_24 ), .M1(\i2c_slave_top/n16414 ), 
    .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_143 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n42 ), 
    .Q0(\i2c_slave_top/registers/pwm_current_limit_2 ), 
    .F1(\limit_check/logic_check/n44_adj_1697 ), 
    .Q1(\i2c_slave_top/registers/pwm_current_limit_3 ));
  SLICE_455 SLICE_455( .D1(\limit_check/logic_check/n14939 ), 
    .C1(\limit_check/logic_check/n16480 ), 
    .B1(\limit_check/logic_check/n16481 ), 
    .A1(\limit_check/logic_check/n16482 ), .B0(pulse_width_lower_limit_16), 
    .A0(\limit_check/logic_check/count_16 ), .M1(\i2c_slave_top/n16430 ), 
    .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_43 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16480 ), .Q0(pulse_width_upper_limit_8), 
    .F1(\limit_check/logic_check/n14962 ), .Q1(pulse_width_upper_limit_9));
  SLICE_456 SLICE_456( .D1(\limit_check/logic_check/n14883 ), 
    .C1(\limit_check/logic_check/n9_adj_1732 ), 
    .B1(\limit_check/logic_check/n11_adj_1692 ), 
    .A1(\limit_check/logic_check/n16488 ), 
    .D0(\limit_check/logic_check/count_2 ), .C0(pulse_width_lower_limit_2), 
    .B0(pulse_width_lower_limit_3), .A0(\limit_check/logic_check/count_3 ), 
    .M1(\i2c_slave_top/n16414 ), .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_113 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n14883 ), .Q0(rate_upper_limit_18), 
    .F1(\limit_check/logic_check/n14892 ), .Q1(rate_upper_limit_19));
  SLICE_457 SLICE_457( .D1(\limit_check/logic_check/n14905 ), 
    .C1(\limit_check/logic_check/n16483 ), 
    .B1(\limit_check/logic_check/n16484 ), 
    .A1(\limit_check/logic_check/n25_adj_1707 ), 
    .B0(pulse_width_lower_limit_10), .A0(\limit_check/logic_check/count_10 ), 
    .M1(\i2c_slave_top/n16414 ), .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_59 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16483 ), .Q0(pulse_width_upper_limit_26), 
    .F1(\limit_check/logic_check/n14924 ), .Q1(pulse_width_upper_limit_27));
  SLICE_458 SLICE_458( .D1(\limit_check/logic_check/n14921 ), 
    .C1(\limit_check/logic_check/n25_adj_1707 ), 
    .B1(\limit_check/logic_check/n16469 ), 
    .A1(\limit_check/logic_check/n16470 ), 
    .D0(\limit_check/logic_check/count_10 ), .C0(pulse_width_lower_limit_10), 
    .B0(pulse_width_lower_limit_11), .A0(\limit_check/logic_check/count_11 ), 
    .M1(\i2c_slave_top/n16414 ), .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_97 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n14921 ), .Q0(rate_upper_limit_2), 
    .F1(\limit_check/logic_check/n15044 ), .Q1(rate_upper_limit_3));
  SLICE_459 SLICE_459( .D1(\limit_check/logic_check/n14892 ), 
    .C1(\limit_check/logic_check/n16485 ), 
    .B1(\limit_check/logic_check/n16486 ), 
    .A1(\limit_check/logic_check/n16487 ), .B0(pulse_width_lower_limit_7), 
    .A0(\limit_check/logic_check/count_7 ), .M1(\i2c_slave_top/n16414 ), 
    .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_35 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16485 ), .Q0(pulse_width_upper_limit_2), 
    .F1(\limit_check/logic_check/n14905 ), .Q1(pulse_width_upper_limit_3));
  SLICE_460 SLICE_460( .D1(\limit_check/logic_check/n9_adj_1732 ), 
    .C1(\limit_check/logic_check/n16486 ), 
    .B1(\limit_check/logic_check/n16487 ), 
    .A1(\limit_check/logic_check/n16483 ), .B0(pulse_width_lower_limit_8), 
    .A0(\limit_check/logic_check/count_8 ), .M1(\i2c_slave_top/n16422 ), 
    .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_51 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16486 ), .Q0(pulse_width_upper_limit_22), 
    .F1(\limit_check/logic_check/n14914 ), .Q1(pulse_width_upper_limit_23));
  SLICE_461 SLICE_461( .D1(\limit_check/logic_check/n11_adj_1692 ), 
    .C1(\limit_check/logic_check/n16488 ), 
    .B1(\limit_check/logic_check/n16485 ), 
    .A1(\limit_check/logic_check/n16474 ), .B0(pulse_width_lower_limit_6), 
    .A0(\limit_check/logic_check/count_6 ), .M1(\i2c_slave_top/n16430 ), 
    .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_51 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16488 ), .Q0(pulse_width_upper_limit_16), 
    .F1(\limit_check/logic_check/n14936 ), .Q1(pulse_width_upper_limit_17));
  limit_check_logic_check_SLICE_462 \limit_check/logic_check/SLICE_462 ( 
    .D1(\limit_check/logic_check/n25_adj_1708 ), 
    .C1(\limit_check/logic_check/n16492 ), 
    .B1(\limit_check/logic_check/n16493 ), 
    .A1(\limit_check/logic_check/n16490 ), 
    .B0(\limit_check/logic_check/count_31 ), .A0(pulse_width_upper_limit_31), 
    .F0(\limit_check/logic_check/n16490 ), 
    .F1(\limit_check/logic_check/n14872 ));
  limit_check_logic_check_SLICE_463 \limit_check/logic_check/SLICE_463 ( 
    .D1(\limit_check/logic_check/n14839 ), 
    .C1(\limit_check/logic_check/n16491 ), 
    .B1(\limit_check/logic_check/n16492 ), 
    .A1(\limit_check/logic_check/n16493 ), 
    .C0(\limit_check/logic_check/n15722 ), 
    .B0(\limit_check/logic_check/count_31 ), .A0(pulse_width_upper_limit_31), 
    .F0(\limit_check/logic_check/n14868 ), 
    .F1(\limit_check/logic_check/n15722 ));
  limit_check_logic_check_SLICE_464 \limit_check/logic_check/SLICE_464 ( 
    .D1(\limit_check/logic_check/n14830 ), 
    .C1(\limit_check/logic_check/n16491 ), 
    .B1(\limit_check/logic_check/n16492 ), 
    .A1(\limit_check/logic_check/n16493 ), 
    .B0(\limit_check/logic_check/count_28 ), .A0(pulse_width_upper_limit_28), 
    .F0(\limit_check/logic_check/n16491 ), 
    .F1(\limit_check/logic_check/n14857 ));
  limit_check_logic_check_SLICE_465 \limit_check/logic_check/SLICE_465 ( 
    .B1(\limit_check/logic_check/count_27 ), .A1(pulse_width_upper_limit_27), 
    .D0(\limit_check/logic_check/n16496 ), 
    .C0(\limit_check/logic_check/n16495 ), 
    .B0(\limit_check/logic_check/count_28 ), .A0(pulse_width_upper_limit_28), 
    .F0(\limit_check/logic_check/n14850 ), 
    .F1(\limit_check/logic_check/n16496 ));
  limit_check_logic_check_SLICE_466 \limit_check/logic_check/SLICE_466 ( 
    .D1(\limit_check/logic_check/n14828 ), 
    .C1(\limit_check/logic_check/n16491 ), 
    .B1(\limit_check/logic_check/n16492 ), 
    .A1(\limit_check/logic_check/n16493 ), 
    .B0(\limit_check/logic_check/count_29 ), .A0(pulse_width_upper_limit_29), 
    .F0(\limit_check/logic_check/n16492 ), 
    .F1(\limit_check/logic_check/n14855 ));
  limit_check_logic_check_SLICE_467 \limit_check/logic_check/SLICE_467 ( 
    .D1(\limit_check/logic_check/n14799 ), 
    .C1(\limit_check/logic_check/n16494 ), 
    .B1(\limit_check/logic_check/n16495 ), 
    .A1(\limit_check/logic_check/n16496 ), 
    .B0(\limit_check/logic_check/count_25 ), .A0(pulse_width_upper_limit_25), 
    .F0(\limit_check/logic_check/n16494 ), 
    .F1(\limit_check/logic_check/n14828 ));
  limit_check_logic_check_SLICE_468 \limit_check/logic_check/SLICE_468 ( 
    .C1(\limit_check/logic_check/count_23 ), 
    .B1(\limit_check/logic_check/count_24 ), .A1(pulse_width_upper_limit_24), 
    .C0(\limit_check/logic_check/n42_adj_1663 ), 
    .B0(\limit_check/logic_check/count_25 ), .A0(pulse_width_upper_limit_25), 
    .F0(\limit_check/logic_check/n44 ), 
    .F1(\limit_check/logic_check/n42_adj_1663 ));
  limit_check_logic_check_SLICE_469 \limit_check/logic_check/SLICE_469 ( 
    .D1(\limit_check/logic_check/n14796 ), 
    .C1(\limit_check/logic_check/n16501 ), 
    .B1(\limit_check/logic_check/n16502 ), 
    .A1(\limit_check/logic_check/n16503 ), 
    .C0(\limit_check/logic_check/n15741 ), 
    .B0(\limit_check/logic_check/count_25 ), .A0(pulse_width_upper_limit_25), 
    .F0(\limit_check/logic_check/n14821 ), 
    .F1(\limit_check/logic_check/n15741 ));
  limit_check_logic_check_SLICE_470 \limit_check/logic_check/SLICE_470 ( 
    .D1(\limit_check/logic_check/n14810 ), 
    .C1(\limit_check/logic_check/n16494 ), 
    .B1(\limit_check/logic_check/n16495 ), 
    .A1(\limit_check/logic_check/n16496 ), 
    .B0(\limit_check/logic_check/count_26 ), .A0(pulse_width_upper_limit_26), 
    .F0(\limit_check/logic_check/n16495 ), 
    .F1(\limit_check/logic_check/n14830 ));
  limit_check_logic_check_SLICE_471 \limit_check/logic_check/SLICE_471 ( 
    .D1(\limit_check/logic_check/n14757 ), 
    .C1(\limit_check/logic_check/n16498 ), 
    .B1(\limit_check/logic_check/n16499 ), 
    .A1(\limit_check/logic_check/n16500 ), 
    .B0(\limit_check/logic_check/count_19 ), .A0(pulse_width_upper_limit_19), 
    .F0(\limit_check/logic_check/n16498 ), 
    .F1(\limit_check/logic_check/n14784 ));
  limit_check_logic_check_SLICE_472 \limit_check/logic_check/SLICE_472 ( 
    .C1(\limit_check/logic_check/n32_adj_1668 ), 
    .B1(\limit_check/logic_check/count_20 ), .A1(pulse_width_upper_limit_20), 
    .C0(\limit_check/logic_check/count_18 ), 
    .B0(\limit_check/logic_check/count_19 ), .A0(pulse_width_upper_limit_19), 
    .F0(\limit_check/logic_check/n32_adj_1668 ), 
    .F1(\limit_check/logic_check/n34_adj_1672 ));
  limit_check_logic_check_SLICE_473 \limit_check/logic_check/SLICE_473 ( 
    .D1(\limit_check/logic_check/n14747 ), 
    .C1(\limit_check/logic_check/n16508 ), 
    .B1(\limit_check/logic_check/n16509 ), 
    .A1(\limit_check/logic_check/n16498 ), 
    .C0(\limit_check/logic_check/n15664 ), 
    .B0(\limit_check/logic_check/count_20 ), .A0(pulse_width_upper_limit_20), 
    .F0(\limit_check/logic_check/n14777 ), 
    .F1(\limit_check/logic_check/n15664 ));
  limit_check_logic_check_SLICE_474 \limit_check/logic_check/SLICE_474 ( 
    .D1(\limit_check/logic_check/n14754 ), 
    .C1(\limit_check/logic_check/n16508 ), 
    .B1(\limit_check/logic_check/n16509 ), 
    .A1(\limit_check/logic_check/n16498 ), 
    .C0(\limit_check/logic_check/n15656 ), 
    .B0(\limit_check/logic_check/count_20 ), .A0(pulse_width_upper_limit_20), 
    .F0(\limit_check/logic_check/n14779 ), 
    .F1(\limit_check/logic_check/n15656 ));
  limit_check_logic_check_SLICE_475 \limit_check/logic_check/SLICE_475 ( 
    .D1(\limit_check/logic_check/n14709 ), 
    .C1(\limit_check/logic_check/n16514 ), 
    .B1(\limit_check/logic_check/n25_adj_1708 ), 
    .A1(\limit_check/logic_check/n16500 ), 
    .B0(\limit_check/logic_check/count_21 ), .A0(pulse_width_upper_limit_21), 
    .F0(\limit_check/logic_check/n16500 ), 
    .F1(\limit_check/logic_check/n14789 ));
  limit_check_logic_check_SLICE_476 \limit_check/logic_check/SLICE_476 ( 
    .D1(\limit_check/logic_check/n14784 ), 
    .C1(\limit_check/logic_check/n16501 ), 
    .B1(\limit_check/logic_check/n16502 ), 
    .A1(\limit_check/logic_check/n16503 ), 
    .B0(\limit_check/logic_check/count_22 ), .A0(pulse_width_upper_limit_22), 
    .F0(\limit_check/logic_check/n16501 ), 
    .F1(\limit_check/logic_check/n14799 ));
  limit_check_logic_check_SLICE_477 \limit_check/logic_check/SLICE_477 ( 
    .D1(\limit_check/logic_check/n14789 ), 
    .C1(\limit_check/logic_check/n16501 ), 
    .B1(\limit_check/logic_check/n16502 ), 
    .A1(\limit_check/logic_check/n16503 ), 
    .B0(\limit_check/logic_check/count_23 ), .A0(pulse_width_upper_limit_23), 
    .F0(\limit_check/logic_check/n16502 ), 
    .F1(\limit_check/logic_check/n14810 ));
  limit_check_logic_check_SLICE_478 \limit_check/logic_check/SLICE_478 ( 
    .D1(\limit_check/logic_check/n14719 ), 
    .C1(\limit_check/logic_check/n16504 ), 
    .B1(\limit_check/logic_check/n16505 ), 
    .A1(\limit_check/logic_check/n16506 ), 
    .B0(\limit_check/logic_check/count_13 ), .A0(pulse_width_upper_limit_13), 
    .F0(\limit_check/logic_check/n16504 ), 
    .F1(\limit_check/logic_check/n14734 ));
  limit_check_logic_check_SLICE_479 \limit_check/logic_check/SLICE_479 ( 
    .B1(\limit_check/logic_check/count_15 ), .A1(pulse_width_upper_limit_15), 
    .D0(\limit_check/logic_check/n16505 ), 
    .C0(\limit_check/logic_check/n16506 ), 
    .B0(\limit_check/logic_check/count_13 ), .A0(pulse_width_upper_limit_13), 
    .F0(\limit_check/logic_check/n14745 ), 
    .F1(\limit_check/logic_check/n16506 ));
  limit_check_logic_check_SLICE_480 \limit_check/logic_check/SLICE_480 ( 
    .D1(\limit_check/logic_check/n14731 ), 
    .C1(\limit_check/logic_check/n16505 ), 
    .B1(\limit_check/logic_check/n16506 ), 
    .A1(\limit_check/logic_check/n16507 ), 
    .B0(\limit_check/logic_check/count_14 ), .A0(pulse_width_upper_limit_14), 
    .F0(\limit_check/logic_check/n16505 ), 
    .F1(\limit_check/logic_check/n14747 ));
  limit_check_logic_check_SLICE_481 \limit_check/logic_check/SLICE_481 ( 
    .B1(rate_lower_limit_19), .A1(\limit_check/logic_check/count_19 ), 
    .D0(\limit_check/logic_check/n15348 ), 
    .C0(\limit_check/logic_check/n16448 ), 
    .B0(\limit_check/logic_check/n16449 ), 
    .A0(\limit_check/logic_check/n16450 ), 
    .F0(\limit_check/logic_check/n15712 ), 
    .F1(\limit_check/logic_check/n16450 ));
  limit_check_logic_check_SLICE_482 \limit_check/logic_check/SLICE_482 ( 
    .B1(rate_lower_limit_16), .A1(\limit_check/logic_check/count_16 ), 
    .D0(\limit_check/logic_check/n15332 ), 
    .C0(\limit_check/logic_check/n16453 ), 
    .B0(\limit_check/logic_check/n16454 ), 
    .A0(\limit_check/logic_check/n16455 ), 
    .F0(\limit_check/logic_check/n15348 ), 
    .F1(\limit_check/logic_check/n16455 ));
  limit_check_logic_check_SLICE_483 \limit_check/logic_check/SLICE_483 ( 
    .B1(rate_lower_limit_5), .A1(\limit_check/logic_check/count_5 ), 
    .D0(\limit_check/logic_check/n11_adj_1686 ), 
    .C0(\limit_check/logic_check/n16451 ), 
    .B0(\limit_check/logic_check/n16452 ), 
    .A0(\limit_check/logic_check/n16457 ), 
    .F0(\limit_check/logic_check/n15332 ), 
    .F1(\limit_check/logic_check/n11_adj_1686 ));
  limit_check_logic_check_SLICE_484 \limit_check/logic_check/SLICE_484 ( 
    .D1(\limit_check/logic_check/n14734 ), 
    .C1(\limit_check/logic_check/n16507 ), 
    .B1(\limit_check/logic_check/n16508 ), 
    .A1(\limit_check/logic_check/n16509 ), 
    .B0(\limit_check/logic_check/count_16 ), .A0(pulse_width_upper_limit_16), 
    .F0(\limit_check/logic_check/n16507 ), 
    .F1(\limit_check/logic_check/n14757 ));
  limit_check_logic_check_SLICE_485 \limit_check/logic_check/SLICE_485 ( 
    .B1(\limit_check/logic_check/count_18 ), .A1(rate_upper_limit_18), 
    .D0(\limit_check/logic_check/n15150 ), 
    .C0(\limit_check/logic_check/n16554 ), 
    .B0(\limit_check/logic_check/n16555 ), 
    .A0(\limit_check/logic_check/n16549 ), 
    .F0(\limit_check/logic_check/n15739 ), 
    .F1(\limit_check/logic_check/n16555 ));
  SLICE_486 SLICE_486( .B1(\limit_check/logic_check/count_15 ), 
    .A1(rate_upper_limit_15), .D0(\limit_check/logic_check/n15134 ), 
    .C0(\limit_check/logic_check/n16557 ), 
    .B0(\limit_check/logic_check/n16558 ), 
    .A0(\limit_check/logic_check/n16553 ), .M1(\i2c_slave_top/n16430 ), 
    .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_203 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n15150 ), 
    .Q0(\i2c_slave_top/registers/static_control_0 ), 
    .F1(\limit_check/logic_check/n16558 ), 
    .Q1(\i2c_slave_top/registers/static_control_1 ));
  limit_check_logic_check_SLICE_487 \limit_check/logic_check/SLICE_487 ( 
    .D1(\limit_check/logic_check/n14687 ), 
    .C1(\limit_check/logic_check/n16510 ), 
    .B1(\limit_check/logic_check/n16511 ), 
    .A1(\limit_check/logic_check/n16512 ), 
    .B0(\limit_check/logic_check/count_7 ), .A0(pulse_width_upper_limit_7), 
    .F0(\limit_check/logic_check/n16510 ), 
    .F1(\limit_check/logic_check/n14700 ));
  limit_check_logic_check_SLICE_488 \limit_check/logic_check/SLICE_488 ( 
    .D1(\limit_check/logic_check/n9_adj_1736 ), 
    .C1(\limit_check/logic_check/n16511 ), 
    .B1(\limit_check/logic_check/n16512 ), 
    .A1(\limit_check/logic_check/n16513 ), 
    .B0(\limit_check/logic_check/count_8 ), .A0(pulse_width_upper_limit_8), 
    .F0(\limit_check/logic_check/n16511 ), 
    .F1(\limit_check/logic_check/n14709 ));
  limit_check_logic_check_SLICE_489 \limit_check/logic_check/SLICE_489 ( 
    .D1(\limit_check/logic_check/n14700 ), 
    .C1(\limit_check/logic_check/n16513 ), 
    .B1(\limit_check/logic_check/n16514 ), 
    .A1(\limit_check/logic_check/n25_adj_1708 ), 
    .B0(\limit_check/logic_check/count_10 ), .A0(pulse_width_upper_limit_10), 
    .F0(\limit_check/logic_check/n16513 ), 
    .F1(\limit_check/logic_check/n14719 ));
  SLICE_490 SLICE_490( .D1(\limit_check/logic_check/n14716 ), 
    .C1(\limit_check/logic_check/n25_adj_1708 ), 
    .B1(\limit_check/logic_check/n16495 ), 
    .A1(\limit_check/logic_check/n16496 ), .D0(pulse_width_upper_limit_10), 
    .C0(\limit_check/logic_check/count_10 ), 
    .B0(\limit_check/logic_check/count_11 ), .A0(pulse_width_upper_limit_11), 
    .M1(\i2c_slave_top/n16422 ), .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_105 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n14716 ), .Q0(rate_upper_limit_14), 
    .F1(\limit_check/logic_check/n14839 ), .Q1(rate_upper_limit_15));
  SLICE_491 SLICE_491( .B1(\limit_check/logic_check/count_5 ), 
    .A1(pulse_width_upper_limit_5), 
    .D0(\limit_check/logic_check/n11_adj_1695 ), 
    .C0(\limit_check/logic_check/n16515 ), 
    .B0(\limit_check/logic_check/n16510 ), 
    .A0(\limit_check/logic_check/n16504 ), .M1(\i2c_slave_top/n16430 ), 
    .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_113 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n14731 ), .Q0(rate_upper_limit_16), 
    .F1(\limit_check/logic_check/n11_adj_1695 ), .Q1(rate_upper_limit_17));
  limit_check_logic_check_SLICE_492 \limit_check/logic_check/SLICE_492 ( 
    .D1(\limit_check/logic_check/n14678 ), 
    .C1(\limit_check/logic_check/n9_adj_1736 ), 
    .B1(\limit_check/logic_check/n11_adj_1695 ), 
    .A1(\limit_check/logic_check/n16515 ), 
    .B0(\limit_check/logic_check/count_6 ), .A0(pulse_width_upper_limit_6), 
    .F0(\limit_check/logic_check/n16515 ), 
    .F1(\limit_check/logic_check/n14687 ));
  limit_check_logic_check_SLICE_493 \limit_check/logic_check/SLICE_493 ( 
    .B1(rate_lower_limit_30), .A1(\limit_check/logic_check/count_30 ), 
    .D0(\limit_check/logic_check/n15440 ), 
    .C0(\limit_check/logic_check/n16439 ), 
    .B0(\limit_check/logic_check/n16440 ), 
    .A0(\limit_check/logic_check/n16441 ), 
    .F0(\limit_check/logic_check/n15695 ), 
    .F1(\limit_check/logic_check/n16441 ));
  limit_check_logic_check_SLICE_494 \limit_check/logic_check/SLICE_494 ( 
    .B1(rate_lower_limit_12), .A1(\limit_check/logic_check/count_12 ), 
    .D0(\limit_check/logic_check/n15317 ), 
    .C0(\limit_check/logic_check/n25_adj_1702 ), 
    .B0(\limit_check/logic_check/n16437 ), 
    .A0(\limit_check/logic_check/n16438 ), 
    .F0(\limit_check/logic_check/n15440 ), 
    .F1(\limit_check/logic_check/n25_adj_1702 ));
  limit_check_logic_check_SLICE_495 \limit_check/logic_check/SLICE_495 ( 
    .B1(\limit_check/logic_check/count_30 ), .A1(rate_upper_limit_30), 
    .D0(\limit_check/logic_check/n15242 ), 
    .C0(\limit_check/logic_check/n16532 ), 
    .B0(\limit_check/logic_check/n16533 ), 
    .A0(\limit_check/logic_check/n16534 ), 
    .F0(\limit_check/logic_check/n15725 ), 
    .F1(\limit_check/logic_check/n16534 ));
  SLICE_496 SLICE_496( .D1(rate_upper_limit_10), 
    .C1(\limit_check/logic_check/count_10 ), 
    .B1(\limit_check/logic_check/count_11 ), .A1(rate_upper_limit_11), 
    .D0(\limit_check/logic_check/n15119 ), .C0(\limit_check/logic_check/n25 ), 
    .B0(\limit_check/logic_check/n16539 ), 
    .A0(\limit_check/logic_check/n16540 ), .M1(\i2c_slave_top/n16422 ), 
    .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_211 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n15242 ), 
    .Q0(\i2c_slave_top/registers/static_control_14 ), 
    .F1(\limit_check/logic_check/n15119 ), 
    .Q1(\i2c_slave_top/registers/static_control_15 ));
  limit_check_logic_check_SLICE_497 \limit_check/logic_check/SLICE_497 ( 
    .B1(pulse_width_lower_limit_30), .A1(\limit_check/logic_check/count_30 ), 
    .D0(\limit_check/logic_check/n15044 ), 
    .C0(\limit_check/logic_check/n16465 ), 
    .B0(\limit_check/logic_check/n16466 ), 
    .A0(\limit_check/logic_check/n16467 ), 
    .F0(\limit_check/logic_check/n15672 ), 
    .F1(\limit_check/logic_check/n16467 ));
  limit_check_logic_check_SLICE_498 \limit_check/logic_check/SLICE_498 ( 
    .B1(rate_lower_limit_29), .A1(\limit_check/logic_check/count_29 ), 
    .D0(\limit_check/logic_check/n25_adj_1702 ), 
    .C0(\limit_check/logic_check/n16440 ), 
    .B0(\limit_check/logic_check/n16441 ), 
    .A0(\limit_check/logic_check/n16436 ), 
    .F0(\limit_check/logic_check/n15473 ), 
    .F1(\limit_check/logic_check/n16440 ));
  limit_check_logic_check_SLICE_499 \limit_check/logic_check/SLICE_499 ( 
    .D1(\limit_check/logic_check/count_21 ), .C1(rate_lower_limit_21), 
    .B1(rate_lower_limit_9), .A1(\limit_check/logic_check/count_9 ), 
    .D0(\limit_check/logic_check/n15397 ), 
    .C0(\limit_check/logic_check/n16444 ), 
    .B0(\limit_check/logic_check/n16445 ), 
    .A0(\limit_check/logic_check/n16446 ), 
    .F0(\limit_check/logic_check/n15706 ), 
    .F1(\limit_check/logic_check/n15397 ));
  limit_check_logic_check_SLICE_500 \limit_check/logic_check/SLICE_500 ( 
    .D1(\limit_check/logic_check/count_7 ), .C1(rate_lower_limit_7), 
    .B1(rate_lower_limit_16), .A1(\limit_check/logic_check/count_16 ), 
    .D0(\limit_check/logic_check/n15355 ), 
    .C0(\limit_check/logic_check/n16448 ), 
    .B0(\limit_check/logic_check/n16449 ), 
    .A0(\limit_check/logic_check/n16450 ), 
    .F0(\limit_check/logic_check/n15708 ), 
    .F1(\limit_check/logic_check/n15355 ));
  limit_check_logic_check_SLICE_501 \limit_check/logic_check/SLICE_501 ( 
    .D1(rate_upper_limit_9), .C1(\limit_check/logic_check/count_9 ), 
    .B1(\limit_check/logic_check/count_21 ), .A1(rate_upper_limit_21), 
    .D0(\limit_check/logic_check/n15199 ), 
    .C0(\limit_check/logic_check/n16535 ), 
    .B0(\limit_check/logic_check/n16536 ), 
    .A0(\limit_check/logic_check/n16537 ), 
    .F0(\limit_check/logic_check/n15735 ), 
    .F1(\limit_check/logic_check/n15199 ));
  limit_check_logic_check_SLICE_502 \limit_check/logic_check/SLICE_502 ( 
    .B1(\limit_check/logic_check/count_17 ), .A1(rate_upper_limit_17), 
    .D0(\limit_check/logic_check/n15157 ), 
    .C0(\limit_check/logic_check/n16554 ), 
    .B0(\limit_check/logic_check/n16555 ), 
    .A0(\limit_check/logic_check/n16549 ), 
    .F0(\limit_check/logic_check/n15737 ), 
    .F1(\limit_check/logic_check/n16554 ));
  SLICE_503 SLICE_503( .D1(\limit_check/logic_check/n15137 ), 
    .C1(\limit_check/logic_check/n16553 ), 
    .B1(\limit_check/logic_check/n16554 ), 
    .A1(\limit_check/logic_check/n16555 ), 
    .D0(\limit_check/logic_check/n15122 ), 
    .C0(\limit_check/logic_check/n16556 ), 
    .B0(\limit_check/logic_check/n16557 ), 
    .A0(\limit_check/logic_check/n16558 ), .M1(\i2c_slave_top/n16430 ), 
    .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_105 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n15137 ), .Q0(rate_upper_limit_8), 
    .F1(\limit_check/logic_check/n15160 ), .Q1(rate_upper_limit_9));
  limit_check_logic_check_SLICE_504 \limit_check/logic_check/SLICE_504 ( 
    .B1(\limit_check/logic_check/count_29 ), .A1(rate_upper_limit_29), 
    .D0(\limit_check/logic_check/n25 ), .C0(\limit_check/logic_check/n16533 ), 
    .B0(\limit_check/logic_check/n16534 ), 
    .A0(\limit_check/logic_check/n16531 ), 
    .F0(\limit_check/logic_check/n15275 ), 
    .F1(\limit_check/logic_check/n16533 ));
  limit_check_logic_check_SLICE_505 \limit_check/logic_check/SLICE_505 ( 
    .B1(pulse_width_lower_limit_29), .A1(\limit_check/logic_check/count_29 ), 
    .D0(\limit_check/logic_check/n25_adj_1707 ), 
    .C0(\limit_check/logic_check/n16466 ), 
    .B0(\limit_check/logic_check/n16467 ), 
    .A0(\limit_check/logic_check/n16464 ), 
    .F0(\limit_check/logic_check/n15077 ), 
    .F1(\limit_check/logic_check/n16466 ));
  limit_check_logic_check_SLICE_506 \limit_check/logic_check/SLICE_506 ( 
    .D1(\limit_check/logic_check/n15233 ), 
    .C1(\limit_check/logic_check/n16532 ), 
    .B1(\limit_check/logic_check/n16533 ), 
    .A1(\limit_check/logic_check/n16534 ), 
    .B0(\limit_check/logic_check/count_28 ), .A0(rate_upper_limit_28), 
    .F0(\limit_check/logic_check/n16532 ), 
    .F1(\limit_check/logic_check/n15260 ));
  limit_check_logic_check_SLICE_507 \limit_check/logic_check/SLICE_507 ( 
    .B1(\limit_check/logic_check/count_27 ), .A1(rate_upper_limit_27), 
    .D0(\limit_check/logic_check/n16540 ), 
    .C0(\limit_check/logic_check/n16539 ), 
    .B0(\limit_check/logic_check/count_28 ), .A0(rate_upper_limit_28), 
    .F0(\limit_check/logic_check/n15253 ), 
    .F1(\limit_check/logic_check/n16540 ));
  limit_check_logic_check_SLICE_508 \limit_check/logic_check/SLICE_508 ( 
    .D1(\limit_check/logic_check/n15192 ), 
    .C1(\limit_check/logic_check/n16535 ), 
    .B1(\limit_check/logic_check/n16536 ), 
    .A1(\limit_check/logic_check/n16537 ), 
    .B0(\limit_check/logic_check/count_22 ), .A0(rate_upper_limit_22), 
    .F0(\limit_check/logic_check/n16535 ), 
    .F1(\limit_check/logic_check/n15213 ));
  limit_check_logic_check_SLICE_509 \limit_check/logic_check/SLICE_509 ( 
    .D1(\limit_check/logic_check/n15187 ), 
    .C1(\limit_check/logic_check/n16535 ), 
    .B1(\limit_check/logic_check/n16536 ), 
    .A1(\limit_check/logic_check/n16537 ), 
    .B0(\limit_check/logic_check/count_23 ), .A0(rate_upper_limit_23), 
    .F0(\limit_check/logic_check/n16536 ), 
    .F1(\limit_check/logic_check/n15202 ));
  limit_check_logic_check_SLICE_510 \limit_check/logic_check/SLICE_510 ( 
    .C1(\limit_check/logic_check/n42_adj_1719 ), 
    .B1(\limit_check/logic_check/count_25 ), .A1(rate_upper_limit_25), 
    .C0(\limit_check/logic_check/count_23 ), 
    .B0(\limit_check/logic_check/count_24 ), .A0(rate_upper_limit_24), 
    .F0(\limit_check/logic_check/n42_adj_1719 ), 
    .F1(\limit_check/logic_check/n44_adj_1700 ));
  limit_check_logic_check_SLICE_511 \limit_check/logic_check/SLICE_511 ( 
    .D1(\limit_check/logic_check/n15213 ), 
    .C1(\limit_check/logic_check/n16538 ), 
    .B1(\limit_check/logic_check/n16539 ), 
    .A1(\limit_check/logic_check/n16540 ), 
    .B0(\limit_check/logic_check/count_25 ), .A0(rate_upper_limit_25), 
    .F0(\limit_check/logic_check/n16538 ), 
    .F1(\limit_check/logic_check/n15233 ));
  limit_check_logic_check_SLICE_512 \limit_check/logic_check/SLICE_512 ( 
    .D1(\limit_check/logic_check/state_0 ), 
    .C1(\limit_check/logic_check/n14577 ), 
    .B1(\limit_check/logic_check/count_31__N_1131 ), 
    .A1(\limit_check/logic_check/n16463 ), 
    .B0(\limit_check/logic_check/laser_pulse_d1 ), 
    .A0(\limit_check/logic_check/state_1 ), 
    .F0(\limit_check/logic_check/n14577 ), 
    .F1(\limit_check/logic_check/n12_adj_1721 ));
  limit_check_logic_check_SLICE_513 \limit_check/logic_check/SLICE_513 ( 
    .D1(\limit_check/logic_check/n15202 ), 
    .C1(\limit_check/logic_check/n16538 ), 
    .B1(\limit_check/logic_check/n16539 ), 
    .A1(\limit_check/logic_check/n16540 ), 
    .B0(\limit_check/logic_check/count_26 ), .A0(rate_upper_limit_26), 
    .F0(\limit_check/logic_check/n16539 ), 
    .F1(\limit_check/logic_check/n15231 ));
  limit_check_logic_check_SLICE_514 \limit_check/logic_check/SLICE_514 ( 
    .D1(\limit_check/logic_check/n15103 ), 
    .C1(\limit_check/logic_check/n16541 ), 
    .B1(\limit_check/logic_check/n16542 ), .A1(\limit_check/logic_check/n25 ), 
    .B0(\limit_check/logic_check/count_10 ), .A0(rate_upper_limit_10), 
    .F0(\limit_check/logic_check/n16541 ), 
    .F1(\limit_check/logic_check/n15122 ));
  SLICE_515 SLICE_515( .D1(\limit_check/logic_check/n16470 ), 
    .C1(\limit_check/logic_check/n16469 ), .B1(pulse_width_lower_limit_28), 
    .A1(\limit_check/logic_check/count_28 ), .B0(pulse_width_lower_limit_27), 
    .A0(\limit_check/logic_check/count_27 ), .M1(\i2c_slave_top/n16420 ), 
    .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_181 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16470 ), 
    .Q0(\i2c_slave_top/registers/pwm_mon_current_limit_12 ), 
    .F1(\limit_check/logic_check/n15055 ), 
    .Q1(\i2c_slave_top/registers/pwm_mon_current_limit_13 ));
  SLICE_516 SLICE_516( .D1(\limit_check/logic_check/n15436 ), 
    .C1(\limit_check/logic_check/n16440 ), 
    .B1(\limit_check/logic_check/n16441 ), 
    .A1(\limit_check/logic_check/n16436 ), .B0(rate_lower_limit_31), 
    .A0(\limit_check/logic_check/count_31 ), .M1(\i2c_slave_top/n16430 ), 
    .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_74 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16436 ), .Q0(rate_lower_limit_8), 
    .F1(\limit_check/logic_check/n15465 ), .Q1(rate_lower_limit_9));
  SLICE_517 SLICE_517( .D1(\limit_check/logic_check/n15409 ), 
    .C1(\limit_check/logic_check/n16437 ), 
    .B1(\limit_check/logic_check/n16438 ), 
    .A1(\limit_check/logic_check/n16439 ), .B0(rate_lower_limit_26), 
    .A0(\limit_check/logic_check/count_26 ), .M1(\i2c_slave_top/n16422 ), 
    .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_90 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16437 ), .Q0(rate_lower_limit_30), 
    .F1(\limit_check/logic_check/n15436 ), .Q1(rate_lower_limit_31));
  limit_check_logic_check_SLICE_518 \limit_check/logic_check/SLICE_518 ( 
    .B1(rate_lower_limit_28), .A1(\limit_check/logic_check/count_28 ), 
    .D0(\limit_check/logic_check/n16438 ), 
    .C0(\limit_check/logic_check/n16439 ), .B0(rate_lower_limit_26), 
    .A0(\limit_check/logic_check/count_26 ), 
    .F0(\limit_check/logic_check/n15451 ), 
    .F1(\limit_check/logic_check/n16439 ));
  SLICE_519 SLICE_519( .D1(\limit_check/logic_check/n15411 ), 
    .C1(\limit_check/logic_check/n16447 ), 
    .B1(\limit_check/logic_check/n16437 ), 
    .A1(\limit_check/logic_check/n16438 ), .B0(rate_lower_limit_27), 
    .A0(\limit_check/logic_check/count_27 ), .M1(\i2c_slave_top/n16420 ), 
    .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_66 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16438 ), .Q0(rate_lower_limit_4), 
    .F1(\limit_check/logic_check/n15431 ), .Q1(rate_lower_limit_5));
  SLICE_520 SLICE_520( .D1(\limit_check/logic_check/n15367 ), 
    .C1(\limit_check/logic_check/n16442 ), 
    .B1(\limit_check/logic_check/n16443 ), 
    .A1(\limit_check/logic_check/n16444 ), .B0(rate_lower_limit_20), 
    .A0(\limit_check/logic_check/count_20 ), .M1(\i2c_slave_top/n16414 ), 
    .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_66 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16442 ), .Q0(rate_lower_limit_2), 
    .F1(\limit_check/logic_check/n15388 ), .Q1(rate_lower_limit_3));
  SLICE_521 SLICE_521( .C1(rate_lower_limit_18), .B1(rate_lower_limit_19), 
    .A1(\limit_check/logic_check/count_19 ), 
    .C0(\limit_check/logic_check/n32_adj_1731 ), .B0(rate_lower_limit_20), 
    .A0(\limit_check/logic_check/count_20 ), .M1(\i2c_slave_top/n16430 ), 
    .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_82 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n34_adj_1703 ), .Q0(rate_lower_limit_16), 
    .F1(\limit_check/logic_check/n32_adj_1731 ), .Q1(rate_lower_limit_17));
  SLICE_522 SLICE_522( .B1(pulse_width_lower_limit_28), 
    .A1(\limit_check/logic_check/count_28 ), 
    .D0(\limit_check/logic_check/n15033 ), 
    .C0(\limit_check/logic_check/n16465 ), 
    .B0(\limit_check/logic_check/n16466 ), 
    .A0(\limit_check/logic_check/n16467 ), .M1(\i2c_slave_top/n16430 ), 
    .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_121 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n15060 ), .Q0(rate_upper_limit_24), 
    .F1(\limit_check/logic_check/n16465 ), .Q1(rate_upper_limit_25));
  SLICE_523 SLICE_523( .D1(\limit_check/logic_check/n15015 ), 
    .C1(\limit_check/logic_check/n16468 ), 
    .B1(\limit_check/logic_check/n16469 ), 
    .A1(\limit_check/logic_check/n16470 ), 
    .D0(\limit_check/logic_check/n15035 ), 
    .C0(\limit_check/logic_check/n16465 ), 
    .B0(\limit_check/logic_check/n16466 ), 
    .A0(\limit_check/logic_check/n16467 ), .M1(\i2c_slave_top/n16420 ), 
    .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_97 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n15062 ), .Q0(rate_upper_limit_4), 
    .F1(\limit_check/logic_check/n15035 ), .Q1(rate_upper_limit_5));
  SLICE_524 SLICE_524( .B1(pulse_width_lower_limit_26), 
    .A1(\limit_check/logic_check/count_26 ), 
    .D0(\limit_check/logic_check/n15004 ), 
    .C0(\limit_check/logic_check/n16468 ), 
    .B0(\limit_check/logic_check/n16469 ), 
    .A0(\limit_check/logic_check/n16470 ), .M1(\i2c_slave_top/n16422 ), 
    .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_113 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n15033 ), .Q0(rate_upper_limit_22), 
    .F1(\limit_check/logic_check/n16469 ), .Q1(rate_upper_limit_23));
  limit_check_logic_check_SLICE_525 \limit_check/logic_check/SLICE_525 ( 
    .D1(\limit_check/logic_check/n15160 ), 
    .C1(\limit_check/logic_check/n16549 ), 
    .B1(\limit_check/logic_check/n16551 ), 
    .A1(\limit_check/logic_check/n16552 ), 
    .B0(\limit_check/logic_check/count_19 ), .A0(rate_upper_limit_19), 
    .F0(\limit_check/logic_check/n16549 ), 
    .F1(\limit_check/logic_check/n15187 ));
  limit_check_logic_check_SLICE_526 \limit_check/logic_check/SLICE_526 ( 
    .C1(\limit_check/logic_check/n32_adj_1733 ), 
    .B1(\limit_check/logic_check/count_20 ), .A1(rate_upper_limit_20), 
    .C0(\limit_check/logic_check/count_18 ), 
    .B0(\limit_check/logic_check/count_19 ), .A0(rate_upper_limit_19), 
    .F0(\limit_check/logic_check/n32_adj_1733 ), 
    .F1(\limit_check/logic_check/n34_adj_1698 ));
  SLICE_527 SLICE_527( .D1(\limit_check/logic_check/n15310 ), 
    .C1(\limit_check/logic_check/n16456 ), 
    .B1(\limit_check/logic_check/n25_adj_1702 ), 
    .A1(\limit_check/logic_check/n16443 ), .B0(rate_lower_limit_21), 
    .A0(\limit_check/logic_check/count_21 ), .M1(\i2c_slave_top/n16422 ), 
    .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_82 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16443 ), .Q0(rate_lower_limit_22), 
    .F1(\limit_check/logic_check/n15390 ), .Q1(rate_lower_limit_23));
  SLICE_528 SLICE_528( .D1(\limit_check/logic_check/n15390 ), 
    .C1(\limit_check/logic_check/n16444 ), 
    .B1(\limit_check/logic_check/n16445 ), 
    .A1(\limit_check/logic_check/n16446 ), .B0(rate_lower_limit_22), 
    .A0(\limit_check/logic_check/count_22 ), .M1(\i2c_slave_top/n16430 ), 
    .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_90 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16444 ), .Q0(rate_lower_limit_24), 
    .F1(\limit_check/logic_check/n15411 ), .Q1(rate_lower_limit_25));
  SLICE_529 SLICE_529( .D1(\limit_check/logic_check/n15388 ), 
    .C1(\limit_check/logic_check/n16445 ), 
    .B1(\limit_check/logic_check/n16446 ), 
    .A1(\limit_check/logic_check/n16447 ), .B0(rate_lower_limit_23), 
    .A0(\limit_check/logic_check/count_23 ), .M1(\i2c_slave_top/n16414 ), 
    .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_90 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16445 ), .Q0(rate_lower_limit_26), 
    .F1(\limit_check/logic_check/n15409 ), .Q1(rate_lower_limit_27));
  SLICE_530 SLICE_530( .C1(\limit_check/logic_check/n42_adj_1738 ), 
    .B1(rate_lower_limit_25), .A1(\limit_check/logic_check/count_25 ), 
    .C0(rate_lower_limit_23), .B0(rate_lower_limit_24), 
    .A0(\limit_check/logic_check/count_24 ), .M1(\i2c_slave_top/n16420 ), 
    .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_82 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n42_adj_1738 ), .Q0(rate_lower_limit_20), 
    .F1(\limit_check/logic_check/n44_adj_1705 ), .Q1(rate_lower_limit_21));
  limit_check_logic_check_SLICE_531 \limit_check/logic_check/SLICE_531 ( 
    .B1(\limit_check/logic_check/count_14 ), .A1(rate_upper_limit_14), 
    .D0(\limit_check/logic_check/n16557 ), 
    .C0(\limit_check/logic_check/n16558 ), 
    .B0(\limit_check/logic_check/count_13 ), .A0(rate_upper_limit_13), 
    .F0(\limit_check/logic_check/n15148 ), 
    .F1(\limit_check/logic_check/n16557 ));
  SLICE_532 SLICE_532( .D1(\limit_check/logic_check/n15342 ), 
    .C1(\limit_check/logic_check/n16448 ), 
    .B1(\limit_check/logic_check/n16449 ), 
    .A1(\limit_check/logic_check/n16450 ), .B0(rate_lower_limit_17), 
    .A0(\limit_check/logic_check/count_17 ), .M1(\i2c_slave_top/n16414 ), 
    .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_82 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16448 ), .Q0(rate_lower_limit_18), 
    .F1(\limit_check/logic_check/n15367 ), .Q1(rate_lower_limit_19));
  SLICE_533 SLICE_533( .D1(\limit_check/logic_check/n15282 ), 
    .C1(\limit_check/logic_check/n11_adj_1686 ), 
    .B1(\limit_check/logic_check/n16451 ), 
    .A1(\limit_check/logic_check/n16452 ), .B0(rate_lower_limit_6), 
    .A0(\limit_check/logic_check/count_6 ), .M1(\i2c_slave_top/n16422 ), 
    .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_173 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16451 ), 
    .Q0(\i2c_slave_top/registers/pwm_mon_current_limit_6 ), 
    .F1(\limit_check/logic_check/n15293 ), 
    .Q1(\i2c_slave_top/registers/pwm_mon_current_limit_7 ));
  SLICE_534 SLICE_534( .D1(\limit_check/logic_check/n15327 ), 
    .C1(\limit_check/logic_check/n16453 ), 
    .B1(\limit_check/logic_check/n16454 ), 
    .A1(\limit_check/logic_check/n16455 ), .B0(rate_lower_limit_14), 
    .A0(\limit_check/logic_check/count_14 ), .M1(\i2c_slave_top/n16422 ), 
    .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_74 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16453 ), .Q0(rate_lower_limit_14), 
    .F1(\limit_check/logic_check/n15342 ), .Q1(rate_lower_limit_15));
  limit_check_logic_check_SLICE_535 \limit_check/logic_check/SLICE_535 ( 
    .B1(rate_lower_limit_13), .A1(\limit_check/logic_check/count_13 ), 
    .D0(\limit_check/logic_check/n16457 ), 
    .C0(\limit_check/logic_check/n16454 ), .B0(rate_lower_limit_14), 
    .A0(\limit_check/logic_check/count_14 ), 
    .F0(\limit_check/logic_check/n15346 ), 
    .F1(\limit_check/logic_check/n16457 ));
  SLICE_536 SLICE_536( .D1(\limit_check/logic_check/n15306 ), 
    .C1(\limit_check/logic_check/n16456 ), 
    .B1(\limit_check/logic_check/n25_adj_1702 ), 
    .A1(\limit_check/logic_check/n16457 ), .B0(rate_lower_limit_11), 
    .A0(\limit_check/logic_check/count_11 ), .M1(\i2c_slave_top/n16420 ), 
    .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_74 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16456 ), .Q0(rate_lower_limit_12), 
    .F1(\limit_check/logic_check/n15327 ), .Q1(rate_lower_limit_13));
  SLICE_537 SLICE_537( .D1(\limit_check/logic_check/n15293 ), 
    .C1(\limit_check/logic_check/n16458 ), 
    .B1(\limit_check/logic_check/n16459 ), 
    .A1(\limit_check/logic_check/n16460 ), .B0(rate_lower_limit_8), 
    .A0(\limit_check/logic_check/count_8 ), .M1(\i2c_slave_top/n16430 ), 
    .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_181 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16458 ), 
    .Q0(\i2c_slave_top/registers/pwm_mon_current_limit_8 ), 
    .F1(\limit_check/logic_check/n15306 ), 
    .Q1(\i2c_slave_top/registers/pwm_mon_current_limit_9 ));
  SLICE_538 SLICE_538( .D1(\limit_check/logic_check/n9_adj_1747 ), 
    .C1(\limit_check/logic_check/n16458 ), 
    .B1(\limit_check/logic_check/n16459 ), 
    .A1(\limit_check/logic_check/n16460 ), .B0(rate_lower_limit_9), 
    .A0(\limit_check/logic_check/count_9 ), .M1(\i2c_slave_top/n16414 ), 
    .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_74 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16459 ), .Q0(rate_lower_limit_10), 
    .F1(\limit_check/logic_check/n15310 ), .Q1(rate_lower_limit_11));
  SLICE_539 SLICE_539( .D1(rate_lower_limit_2), 
    .C1(\limit_check/logic_check/count_2 ), 
    .B1(\limit_check/logic_check/n16461 ), 
    .A1(\limit_check/logic_check/n9_adj_1747 ), .B0(rate_lower_limit_3), 
    .A0(\limit_check/logic_check/count_3 ), .M1(\i2c_slave_top/n16430 ), 
    .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_97 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16461 ), .Q0(rate_upper_limit_0), 
    .F1(\limit_check/logic_check/n15282 ), .Q1(rate_upper_limit_1));
  SLICE_540 SLICE_540( .D1(\limit_check/logic_check/n15431 ), 
    .C1(\limit_check/logic_check/n16439 ), 
    .B1(\limit_check/logic_check/n16440 ), 
    .A1(\limit_check/logic_check/n16441 ), 
    .D0(\limit_check/logic_check/n15458 ), 
    .C0(\limit_check/logic_check/n16436 ), .B0(\limit_check/logic_check/n60 ), 
    .A0(\limit_check/logic_check/n48 ), .M1(\i2c_slave_top/n16422 ), 
    .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_66 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n62_adj_1745 ), .Q0(rate_lower_limit_6), 
    .F1(\limit_check/logic_check/n15458 ), .Q1(rate_lower_limit_7));
  SLICE_541 SLICE_541( .D1(\limit_check/logic_check/state_0 ), 
    .C1(\limit_check/logic_check/count_31_N_1168_0 ), 
    .B1(\limit_check/logic_check/count_31__N_1131 ), 
    .A1(\limit_check/logic_check/n16463 ), .B0(laser_pulse_c), 
    .A0(\limit_check/logic_check/laser_pulse_d1 ), .M1(\i2c_slave_top/n16414 ), 
    .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_105 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16463 ), .Q0(rate_upper_limit_10), 
    .F1(\limit_check/logic_check/n12_adj_1741 ), .Q1(rate_upper_limit_11));
  SLICE_542 SLICE_542( .D1(pulse_upper_limit_fail), .C1(rate_lower_limit_fail), 
    .B1(rate_upper_limit_fail), .A1(pulse_lower_limit_fail), 
    .D0(\limit_check/logic_check/count_0 ), 
    .C0(\limit_check/logic_check/state_2 ), .B0(dynamic_control_0), 
    .A0(TA_shutdown_c), .F0(\limit_check/logic_check/n2 ), .F1(TA_shutdown_c));
  adc_control_SLICE_543 \adc_control/SLICE_543 ( .D1(\adc_control/state_1 ), 
    .C1(\adc_control/state_0 ), .B1(\adc_control/state_3 ), 
    .A1(\adc_control/state_2 ), .D0(\adc_control/state_0 ), 
    .C0(\adc_control/state_1 ), .B0(\adc_control/state_3 ), 
    .A0(\adc_control/state_2 ), .F0(\adc_control/clk_div2_enable_255 ), 
    .F1(\adc_control/clk_div2_enable_258 ));
  i2c_slave_top_registers_SLICE_544 \i2c_slave_top/registers/SLICE_544 ( 
    .D1(\i2c_slave_top/registers/state_0 ), 
    .C1(\i2c_slave_top/registers/state_1 ), 
    .B1(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A1(\i2c_slave_top/registers/byte_cnt_0 ), 
    .D0(\i2c_slave_top/registers/byte_cnt_0 ), 
    .C0(\i2c_slave_top/registers/state_1 ), 
    .B0(\i2c_slave_top/registers/state_0 ), 
    .A0(\i2c_slave_top/registers/byte_cnt_1 ), .M1(\i2c_slave_top/n16422 ), 
    .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_158 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/data_vld_dly_enable_3 ), 
    .Q0(\i2c_slave_top/registers/cw_current_limit_6 ), 
    .F1(\i2c_slave_top/registers/n16429 ), 
    .Q1(\i2c_slave_top/registers/cw_current_limit_7 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_545 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_545 ( 
    .D1(n16517), .C1(\i2c_slave_top/addr_start_1 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .D0(n16517), .C0(\i2c_slave_top/addr_start_1 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .F0(\i2c_slave_top/addr_i_7__N_703 ), 
    .F1(\i2c_slave_top/addr_i_7__N_733 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_546 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_546 ( 
    .D1(n16517), .C1(\i2c_slave_top/addr_start_3 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .D0(n16517), .C0(\i2c_slave_top/addr_start_3 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .F0(\i2c_slave_top/addr_i_7__N_701 ), 
    .F1(\i2c_slave_top/addr_i_7__N_727 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_547 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_547 ( 
    .D1(n16517), .C1(\i2c_slave_top/addr_start_4 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .D0(n16517), .C0(\i2c_slave_top/addr_start_4 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .F0(\i2c_slave_top/addr_i_7__N_700 ), 
    .F1(\i2c_slave_top/addr_i_7__N_724 ));
  i2c_slave_top_i2cslave_controller_top_SLICE_548 
    \i2c_slave_top/i2cslave_controller_top/SLICE_548 ( .D1(n16517), 
    .C1(\i2c_slave_top/addr_start_5 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .D0(n16517), .C0(\i2c_slave_top/addr_start_5 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .M1(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d2 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d2 ), 
    .CLK(clk_div2), .F0(\i2c_slave_top/addr_i_7__N_699 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d3 ), 
    .F1(\i2c_slave_top/addr_i_7__N_721 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d3 ));
  i2c_slave_top_i2cslave_controller_top_SLICE_549 
    \i2c_slave_top/i2cslave_controller_top/SLICE_549 ( .D1(n16517), 
    .C1(\i2c_slave_top/addr_start_6 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .D0(n16517), .C0(\i2c_slave_top/addr_start_6 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .M0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d3 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n_N_83 ), 
    .CLK(clk_div2), .F0(\i2c_slave_top/addr_i_7__N_698 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n ), 
    .F1(\i2c_slave_top/addr_i_7__N_718 ));
  i2c_slave_top_i2cslave_controller_top_SLICE_550 
    \i2c_slave_top/i2cslave_controller_top/SLICE_550 ( .D1(n16517), 
    .C1(\i2c_slave_top/addr_start_7 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .D0(n16517), .C0(\i2c_slave_top/addr_start_7 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .M0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d3 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n_N_83 ), 
    .CLK(clk_div2), .F0(\i2c_slave_top/addr_i_7__N_695 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F1(\i2c_slave_top/addr_i_7__N_705 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_551 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_551 ( 
    .D1(n16517), .C1(\i2c_slave_top/addr_start_0 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .D0(n16517), .C0(\i2c_slave_top/addr_start_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .F0(\i2c_slave_top/addr_i_7__N_736 ), 
    .F1(\i2c_slave_top/addr_i_7__N_704 ));
  i2c_slave_top_registers_SLICE_552 \i2c_slave_top/registers/SLICE_552 ( 
    .C1(\i2c_slave_top/registers/n17 ), .B1(\i2c_slave_top/registers/n16559 ), 
    .A1(\i2c_slave_top/n16546 ), .C0(\i2c_slave_top/registers/n17 ), 
    .B0(\i2c_slave_top/registers/n16559 ), .A0(\i2c_slave_top/n16546 ), 
    .M1(\i2c_slave_top/n16430 ), .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_166 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/clk_div2_enable_245 ), 
    .Q0(\i2c_slave_top/registers/cw_current_limit_8 ), 
    .F1(\i2c_slave_top/registers/clk_div2_enable_229 ), 
    .Q1(\i2c_slave_top/registers/cw_current_limit_9 ));
  i2c_slave_top_registers_SLICE_553 \i2c_slave_top/registers/SLICE_553 ( 
    .C1(\i2c_slave_top/registers/n5 ), .B1(\i2c_slave_top/registers/n16559 ), 
    .A1(\i2c_slave_top/n16546 ), .C0(\i2c_slave_top/registers/n5 ), 
    .B0(\i2c_slave_top/registers/n16559 ), .A0(\i2c_slave_top/n16546 ), 
    .M1(\i2c_slave_top/n16422 ), .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_128 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/clk_div2_enable_105 ), 
    .Q0(\i2c_slave_top/registers/drive_current_limit_6 ), 
    .F1(\i2c_slave_top/registers/clk_div2_enable_97 ), 
    .Q1(\i2c_slave_top/registers/drive_current_limit_7 ));
  i2c_slave_top_registers_SLICE_554 \i2c_slave_top/registers/SLICE_554 ( 
    .C1(\i2c_slave_top/registers/state_1 ), 
    .B1(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A1(\i2c_slave_top/registers/state_0 ), 
    .C0(\i2c_slave_top/registers/state_1 ), 
    .B0(\i2c_slave_top/registers/state_0 ), 
    .A0(\i2c_slave_top/registers/byte_cnt_1 ), 
    .F0(\i2c_slave_top/registers/data_vld_dly_enable_1 ), 
    .F1(\i2c_slave_top/registers/data_vld_dly_enable_2 ));
  i2c_slave_top_registers_SLICE_555 \i2c_slave_top/registers/SLICE_555 ( 
    .D1(\i2c_slave_top/registers/n16378 ), .C1(\i2c_slave_top/n16546 ), 
    .B1(\i2c_slave_top/registers/n16409 ), 
    .A1(\i2c_slave_top/registers/n16393 ), 
    .D0(\i2c_slave_top/registers/n16381 ), .C0(\i2c_slave_top/n16546 ), 
    .B0(\i2c_slave_top/registers/n16409 ), 
    .A0(\i2c_slave_top/registers/n16393 ), .M1(\i2c_slave_top/n16430 ), 
    .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_128 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/clk_div2_enable_181 ), 
    .Q0(\i2c_slave_top/registers/drive_current_limit_0 ), 
    .F1(\i2c_slave_top/registers/clk_div2_enable_151 ), 
    .Q1(\i2c_slave_top/registers/drive_current_limit_1 ));
  i2c_slave_top_registers_SLICE_556 \i2c_slave_top/registers/SLICE_556 ( 
    .D1(\i2c_slave_top/registers/n16548 ), 
    .C1(\i2c_slave_top/registers/n5955 ), .B1(\i2c_slave_top/registers/n5956 ), 
    .A1(\i2c_slave_top/registers/n5957 ), 
    .D0(\i2c_slave_top/registers/n16559 ), 
    .C0(\i2c_slave_top/registers/n5955 ), .B0(\i2c_slave_top/registers/n5956 ), 
    .A0(\i2c_slave_top/registers/n5957 ), 
    .F0(\i2c_slave_top/registers/n16424 ), 
    .F1(\i2c_slave_top/registers/n14620 ));
  i2c_slave_top_registers_SLICE_557 \i2c_slave_top/registers/SLICE_557 ( 
    .D1(\i2c_slave_top/registers/n16380 ), 
    .C1(\i2c_slave_top/registers/n16413 ), 
    .B1(\i2c_slave_top/registers/n16418 ), 
    .A1(\i2c_slave_top/registers/n16434 ), 
    .D0(\i2c_slave_top/registers/n16380 ), 
    .C0(\i2c_slave_top/registers/n16411 ), 
    .B0(\i2c_slave_top/registers/n16418 ), 
    .A0(\i2c_slave_top/registers/n16434 ), .M1(\i2c_slave_top/n16422 ), 
    .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_136 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/clk_div2_enable_90 ), 
    .Q0(\i2c_slave_top/registers/drive_current_limit_14 ), 
    .F1(\i2c_slave_top/registers/clk_div2_enable_74 ), 
    .Q1(\i2c_slave_top/registers/drive_current_limit_15 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_558 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_558 ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/rw_mode_i ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/count_i_3__N_141 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/count_i_3__N_141 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/rw_mode_i ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16427 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n528 ));
  SLICE_559 SLICE_559( .D1(\limit_check/logic_check/count_21 ), 
    .C1(pulse_width_lower_limit_21), .B1(pulse_width_lower_limit_9), 
    .A1(\limit_check/logic_check/count_9 ), .C0(pulse_width_lower_limit_9), 
    .B0(pulse_width_lower_limit_21), .A0(\limit_check/logic_check/count_21 ), 
    .M1(\i2c_slave_top/n16420 ), .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_51 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16 ), .Q0(pulse_width_upper_limit_20), 
    .F1(\limit_check/logic_check/n15001 ), .Q1(pulse_width_upper_limit_21));
  SLICE_560 SLICE_560( .D1(\limit_check/logic_check/count_16 ), 
    .C1(pulse_width_lower_limit_16), .B1(pulse_width_lower_limit_7), 
    .A1(\limit_check/logic_check/count_7 ), .C0(pulse_width_lower_limit_7), 
    .B0(pulse_width_lower_limit_16), .A0(\limit_check/logic_check/count_16 ), 
    .M1(\i2c_slave_top/n16422 ), .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_43 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n12 ), .Q0(pulse_width_upper_limit_14), 
    .F1(\limit_check/logic_check/n14959 ), .Q1(pulse_width_upper_limit_15));
  limit_check_logic_check_SLICE_561 \limit_check/logic_check/SLICE_561 ( 
    .D1(pulse_width_upper_limit_21), .C1(\limit_check/logic_check/count_21 ), 
    .B1(\limit_check/logic_check/count_9 ), .A1(pulse_width_upper_limit_9), 
    .C0(\limit_check/logic_check/count_9 ), 
    .B0(\limit_check/logic_check/count_21 ), .A0(pulse_width_upper_limit_21), 
    .F0(\limit_check/logic_check/n16_adj_1677 ), 
    .F1(\limit_check/logic_check/n14796 ));
  limit_check_logic_check_SLICE_562 \limit_check/logic_check/SLICE_562 ( 
    .D1(pulse_width_upper_limit_16), .C1(\limit_check/logic_check/count_16 ), 
    .B1(\limit_check/logic_check/count_7 ), .A1(pulse_width_upper_limit_7), 
    .C0(\limit_check/logic_check/count_7 ), 
    .B0(\limit_check/logic_check/count_16 ), .A0(pulse_width_upper_limit_16), 
    .F0(\limit_check/logic_check/n12_adj_1691 ), 
    .F1(\limit_check/logic_check/n14754 ));
  SLICE_563 SLICE_563( .C1(\limit_check/logic_check/count_7 ), 
    .B1(\limit_check/logic_check/count_16 ), .A1(rate_upper_limit_16), 
    .D0(rate_upper_limit_7), .C0(\limit_check/logic_check/count_7 ), 
    .B0(\limit_check/logic_check/count_16 ), .A0(rate_upper_limit_16), 
    .M1(\i2c_slave_top/n16414 ), .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_211 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n15157 ), 
    .Q0(\i2c_slave_top/registers/static_control_10 ), 
    .F1(\limit_check/logic_check/n12_adj_1737 ), 
    .Q1(\i2c_slave_top/registers/static_control_11 ));
  SLICE_564 SLICE_564( .D1(\limit_check/logic_check/count_11 ), 
    .C1(rate_lower_limit_11), .B1(rate_lower_limit_10), 
    .A1(\limit_check/logic_check/count_10 ), .C0(rate_lower_limit_10), 
    .B0(rate_lower_limit_11), .A0(\limit_check/logic_check/count_11 ), 
    .M1(\i2c_slave_top/n16430 ), .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_66 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n18_adj_1727 ), .Q0(rate_lower_limit_0), 
    .F1(\limit_check/logic_check/n15317 ), .Q1(rate_lower_limit_1));
  adc_control_SLICE_565 \adc_control/SLICE_565 ( .D1(\adc_control/state_2 ), 
    .C1(\adc_control/state_3 ), .B1(\adc_control/n16462 ), 
    .A1(\adc_control/adc_convert_N_1625 ), .C0(\adc_control/state_1 ), 
    .B0(\adc_control/state_3 ), .A0(\adc_control/state_2 ), 
    .F0(\adc_control/clk_div2_enable_3 ), 
    .F1(\adc_control/clk_div2_enable_26 ));
  i2c_slave_top_registers_SLICE_566 \i2c_slave_top/registers/SLICE_566 ( 
    .D1(\i2c_slave_top/registers/n16380 ), .C1(\i2c_slave_top/n16546 ), 
    .B1(\i2c_slave_top/registers/n16387 ), 
    .A1(\i2c_slave_top/registers/n16409 ), .D0(\i2c_slave_top/n16546 ), 
    .C0(\i2c_slave_top/registers/n16559 ), 
    .B0(\i2c_slave_top/registers/n16380 ), 
    .A0(\i2c_slave_top/registers/n16398 ), .M1(\i2c_slave_top/n16414 ), 
    .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_188 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/clk_div2_enable_82 ), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_2 ), 
    .F1(\i2c_slave_top/registers/clk_div2_enable_196 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_3 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_567 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_567 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_140 )
    , .A1(next_state_i_3_N_181_0), .B0(next_state_i_3_N_181_0), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_140 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16524 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16525 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_568 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_568 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_140 )
    , .C0(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), 
    .B0(next_state_i_3_N_181_0), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_140 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16428 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16382 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_569 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_569 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_2 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16527 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16526 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16527 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .M0(count_i_3__N_145), 
    .LSR(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16431 ), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16401 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_570 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_570 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16431 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16403 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_1 )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16431 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_325 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16403 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i_N_362 )
    , 
    .LSR(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16330 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n327 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_571 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_571 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_7 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16406 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16431 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_2 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16399 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16431 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n326 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n321 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_572 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_572 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_5 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16433 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16489 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_5 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16392 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16431 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n323 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16042 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_573 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_573 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_3 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n7_adj_1751 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16431 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_6 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16391 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16431 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n322 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n325 ));
  SLICE_574 SLICE_574( .D1(\limit_check/logic_check/count_23 ), 
    .C1(rate_lower_limit_23), .B1(rate_lower_limit_24), 
    .A1(\limit_check/logic_check/count_24 ), 
    .D0(\limit_check/logic_check/count_23 ), .C0(pulse_width_lower_limit_23), 
    .B0(pulse_width_lower_limit_24), .A0(\limit_check/logic_check/count_24 ), 
    .M1(\i2c_slave_top/n16420 ), .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_113 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n15019 ), .Q0(rate_upper_limit_20), 
    .F1(\limit_check/logic_check/n15415 ), .Q1(rate_upper_limit_21));
  SLICE_575 SLICE_575( .D1(\limit_check/logic_check/count_19 ), 
    .C1(pulse_width_lower_limit_19), .B1(pulse_width_lower_limit_18), 
    .A1(\limit_check/logic_check/count_18 ), .B0(pulse_width_lower_limit_18), 
    .A0(\limit_check/logic_check/count_18 ), .M1(\i2c_slave_top/n16414 ), 
    .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_151 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16482 ), 
    .Q0(\i2c_slave_top/registers/pwm_current_limit_10 ), 
    .F1(\limit_check/logic_check/n14977 ), 
    .Q1(\i2c_slave_top/registers/pwm_current_limit_11 ));
  SLICE_576 SLICE_576( .C1(pulse_width_lower_limit_10), 
    .B1(pulse_width_lower_limit_11), .A1(\limit_check/logic_check/count_11 ), 
    .B0(pulse_width_lower_limit_11), .A0(\limit_check/logic_check/count_11 ), 
    .M1(\i2c_slave_top/n16420 ), .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_59 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16484 ), .Q0(pulse_width_upper_limit_28), 
    .F1(\limit_check/logic_check/n18 ), .Q1(pulse_width_upper_limit_29));
  limit_check_logic_check_SLICE_577 \limit_check/logic_check/SLICE_577 ( 
    .C1(\limit_check/logic_check/count_12 ), 
    .B1(\limit_check/logic_check/count_29 ), .A1(rate_upper_limit_29), 
    .C0(\limit_check/logic_check/count_12 ), 
    .B0(\limit_check/logic_check/count_29 ), .A0(pulse_width_upper_limit_29), 
    .F0(\limit_check/logic_check/n20 ), 
    .F1(\limit_check/logic_check/n20_adj_1717 ));
  limit_check_logic_check_SLICE_578 \limit_check/logic_check/SLICE_578 ( 
    .C1(\limit_check/logic_check/count_26 ), 
    .B1(\limit_check/logic_check/count_27 ), .A1(rate_upper_limit_27), 
    .C0(\limit_check/logic_check/count_26 ), 
    .B0(\limit_check/logic_check/count_27 ), .A0(pulse_width_upper_limit_27), 
    .F0(\limit_check/logic_check/n22 ), 
    .F1(\limit_check/logic_check/n22_adj_1713 ));
  limit_check_logic_check_SLICE_579 \limit_check/logic_check/SLICE_579 ( 
    .D1(pulse_width_upper_limit_23), .C1(\limit_check/logic_check/count_23 ), 
    .B1(\limit_check/logic_check/count_24 ), .A1(pulse_width_upper_limit_24), 
    .B0(\limit_check/logic_check/count_24 ), .A0(pulse_width_upper_limit_24), 
    .F0(\limit_check/logic_check/n16503 ), 
    .F1(\limit_check/logic_check/n14814 ));
  limit_check_logic_check_SLICE_580 \limit_check/logic_check/SLICE_580 ( 
    .C1(\limit_check/logic_check/count_13 ), 
    .B1(\limit_check/logic_check/count_14 ), .A1(rate_upper_limit_14), 
    .C0(\limit_check/logic_check/count_13 ), 
    .B0(\limit_check/logic_check/count_14 ), .A0(pulse_width_upper_limit_14), 
    .F0(\limit_check/logic_check/n14_adj_1687 ), 
    .F1(\limit_check/logic_check/n14_adj_1710 ));
  limit_check_logic_check_SLICE_581 \limit_check/logic_check/SLICE_581 ( 
    .D1(pulse_width_upper_limit_19), .C1(\limit_check/logic_check/count_19 ), 
    .B1(\limit_check/logic_check/count_18 ), .A1(pulse_width_upper_limit_18), 
    .B0(\limit_check/logic_check/count_18 ), .A0(pulse_width_upper_limit_18), 
    .F0(\limit_check/logic_check/n16509 ), 
    .F1(\limit_check/logic_check/n14772 ));
  limit_check_logic_check_SLICE_582 \limit_check/logic_check/SLICE_582 ( 
    .C1(\limit_check/logic_check/count_4 ), 
    .B1(\limit_check/logic_check/count_8 ), .A1(rate_upper_limit_8), 
    .C0(\limit_check/logic_check/count_4 ), 
    .B0(\limit_check/logic_check/count_8 ), .A0(pulse_width_upper_limit_8), 
    .F0(\limit_check/logic_check/n8_adj_1694 ), 
    .F1(\limit_check/logic_check/n8_adj_1701 ));
  limit_check_logic_check_SLICE_583 \limit_check/logic_check/SLICE_583 ( 
    .C1(\limit_check/logic_check/count_10 ), 
    .B1(\limit_check/logic_check/count_11 ), .A1(pulse_width_upper_limit_11), 
    .B0(\limit_check/logic_check/count_11 ), .A0(pulse_width_upper_limit_11), 
    .F0(\limit_check/logic_check/n16514 ), 
    .F1(\limit_check/logic_check/n18_adj_1653 ));
  limit_check_logic_check_SLICE_584 \limit_check/logic_check/SLICE_584 ( 
    .C1(\limit_check/logic_check/count_5 ), 
    .B1(\limit_check/logic_check/count_6 ), .A1(rate_upper_limit_6), 
    .C0(\limit_check/logic_check/count_5 ), 
    .B0(\limit_check/logic_check/count_6 ), .A0(pulse_width_upper_limit_6), 
    .F0(\limit_check/logic_check/n10_adj_1693 ), 
    .F1(\limit_check/logic_check/n10_adj_1699 ));
  SLICE_585 SLICE_585( .D1(rate_upper_limit_2), 
    .C1(\limit_check/logic_check/count_2 ), 
    .B1(\limit_check/logic_check/count_3 ), .A1(rate_upper_limit_3), 
    .D0(pulse_width_upper_limit_2), .C0(\limit_check/logic_check/count_2 ), 
    .B0(\limit_check/logic_check/count_3 ), .A0(pulse_width_upper_limit_3), 
    .M1(\i2c_slave_top/n16420 ), .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_105 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n14678 ), .Q0(rate_upper_limit_12), 
    .F1(\limit_check/logic_check/n15081 ), .Q1(rate_upper_limit_13));
  limit_check_logic_check_SLICE_586 \limit_check/logic_check/SLICE_586 ( 
    .C1(\limit_check/logic_check/n15725 ), 
    .B1(\limit_check/logic_check/count_31 ), .A1(rate_upper_limit_31), 
    .B0(\limit_check/logic_check/count_31 ), .A0(rate_upper_limit_31), 
    .F0(\limit_check/logic_check/n16531 ), 
    .F1(\limit_check/logic_check/n15271 ));
  limit_check_logic_check_SLICE_587 \limit_check/logic_check/SLICE_587 ( 
    .D1(rate_upper_limit_23), .C1(\limit_check/logic_check/count_23 ), 
    .B1(\limit_check/logic_check/count_24 ), .A1(rate_upper_limit_24), 
    .B0(\limit_check/logic_check/count_24 ), .A0(rate_upper_limit_24), 
    .F0(\limit_check/logic_check/n16537 ), 
    .F1(\limit_check/logic_check/n15217 ));
  limit_check_logic_check_SLICE_588 \limit_check/logic_check/SLICE_588 ( 
    .C1(\limit_check/logic_check/count_10 ), 
    .B1(\limit_check/logic_check/count_11 ), .A1(rate_upper_limit_11), 
    .B0(\limit_check/logic_check/count_11 ), .A0(rate_upper_limit_11), 
    .F0(\limit_check/logic_check/n16542 ), 
    .F1(\limit_check/logic_check/n18_adj_1712 ));
  limit_check_logic_check_SLICE_589 \limit_check/logic_check/SLICE_589 ( 
    .C1(\limit_check/logic_check/n15708 ), .B1(rate_lower_limit_20), 
    .A1(\limit_check/logic_check/count_20 ), 
    .C0(\limit_check/logic_check/n15712 ), .B0(rate_lower_limit_20), 
    .A0(\limit_check/logic_check/count_20 ), 
    .F0(\limit_check/logic_check/n15378 ), 
    .F1(\limit_check/logic_check/n15380 ));
  limit_check_logic_check_SLICE_590 \limit_check/logic_check/SLICE_590 ( 
    .C1(\limit_check/logic_check/n15737 ), 
    .B1(\limit_check/logic_check/count_20 ), .A1(rate_upper_limit_20), 
    .B0(\limit_check/logic_check/count_20 ), .A0(rate_upper_limit_20), 
    .F0(\limit_check/logic_check/n16551 ), 
    .F1(\limit_check/logic_check/n15182 ));
  limit_check_logic_check_SLICE_591 \limit_check/logic_check/SLICE_591 ( 
    .C1(\limit_check/logic_check/count_9 ), 
    .B1(\limit_check/logic_check/count_21 ), .A1(rate_upper_limit_21), 
    .B0(\limit_check/logic_check/count_21 ), .A0(rate_upper_limit_21), 
    .F0(\limit_check/logic_check/n16552 ), 
    .F1(\limit_check/logic_check/n16_adj_1718 ));
  SLICE_592 SLICE_592( .C1(\limit_check/logic_check/n15706 ), 
    .B1(rate_lower_limit_25), .A1(\limit_check/logic_check/count_25 ), 
    .B0(rate_lower_limit_25), .A0(\limit_check/logic_check/count_25 ), 
    .M1(\i2c_slave_top/n16420 ), .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_90 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16447 ), .Q0(rate_lower_limit_28), 
    .F1(\limit_check/logic_check/n15422 ), .Q1(rate_lower_limit_29));
  SLICE_593 SLICE_593( .D1(\limit_check/logic_check/count_18 ), 
    .C1(rate_lower_limit_18), .B1(rate_lower_limit_19), 
    .A1(\limit_check/logic_check/count_19 ), .D0(rate_upper_limit_19), 
    .C0(\limit_check/logic_check/count_19 ), 
    .B0(\limit_check/logic_check/count_18 ), .A0(rate_upper_limit_18), 
    .M1(\i2c_slave_top/n16420 ), .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_211 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n15175 ), 
    .Q0(\i2c_slave_top/registers/static_control_12 ), 
    .F1(\limit_check/logic_check/n15373 ), 
    .Q1(\i2c_slave_top/registers/static_control_13 ));
  SLICE_594 SLICE_594( .C1(\limit_check/logic_check/n15672 ), 
    .B1(pulse_width_lower_limit_31), .A1(\limit_check/logic_check/count_31 ), 
    .B0(pulse_width_lower_limit_31), .A0(\limit_check/logic_check/count_31 ), 
    .M1(\i2c_slave_top/n16422 ), .M0(\i2c_slave_top/n16419 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_181 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16464 ), 
    .Q0(\i2c_slave_top/registers/pwm_mon_current_limit_14 ), 
    .F1(\limit_check/logic_check/n15073 ), 
    .Q1(\i2c_slave_top/registers/pwm_mon_current_limit_15 ));
  SLICE_595 SLICE_595( .C1(\limit_check/logic_check/n15710 ), 
    .B1(pulse_width_lower_limit_25), .A1(\limit_check/logic_check/count_25 ), 
    .B0(pulse_width_lower_limit_25), .A0(\limit_check/logic_check/count_25 ), 
    .M1(\i2c_slave_top/n16414 ), .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_181 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16468 ), 
    .Q0(\i2c_slave_top/registers/pwm_mon_current_limit_10 ), 
    .F1(\limit_check/logic_check/n15026 ), 
    .Q1(\i2c_slave_top/registers/pwm_mon_current_limit_11 ));
  SLICE_596 SLICE_596( .C1(\limit_check/logic_check/n15695 ), 
    .B1(rate_lower_limit_31), .A1(\limit_check/logic_check/count_31 ), 
    .C0(\i2c_slave_top/registers/n16435 ), .B0(rate_lower_limit_31), 
    .A0(pulse_width_lower_limit_31), .M1(\i2c_slave_top/n16420 ), 
    .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_166 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/n15575 ), 
    .Q0(\i2c_slave_top/registers/cw_current_limit_12 ), 
    .F1(\limit_check/logic_check/n15469 ), 
    .Q1(\i2c_slave_top/registers/cw_current_limit_13 ));
  i2c_slave_top_registers_SLICE_597 \i2c_slave_top/registers/SLICE_597 ( 
    .D1(\i2c_slave_top/registers/n16559 ), 
    .C1(\i2c_slave_top/registers/n5963 ), .B1(\i2c_slave_top/registers/n5964 ), 
    .A1(\i2c_slave_top/registers/n5965 ), .C0(\i2c_slave_top/registers/n17 ), 
    .B0(\i2c_slave_top/registers/n16559 ), .A0(\i2c_slave_top/n16546 ), 
    .M1(\i2c_slave_top/n16420 ), .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_128 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/clk_div2_enable_237 ), 
    .Q0(\i2c_slave_top/registers/drive_current_limit_4 ), 
    .F1(\i2c_slave_top/registers/n79 ), 
    .Q1(\i2c_slave_top/registers/drive_current_limit_5 ));
  i2c_slave_top_registers_SLICE_598 \i2c_slave_top/registers/SLICE_598 ( 
    .C1(\i2c_slave_top/registers/n16435 ), .B1(rate_lower_limit_24), 
    .A1(pulse_width_lower_limit_24), .D0(\i2c_slave_top/registers/n16435 ), 
    .C0(\i2c_slave_top/registers/addr_i_7 ), 
    .B0(\i2c_slave_top/registers/addr_i_5 ), 
    .A0(\i2c_slave_top/registers/n16521 ), 
    .M0(\i2c_slave_top/registers/n5813 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_733 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/n14656 ), 
    .Q0(\i2c_slave_top/registers/n5961 ), 
    .F1(\i2c_slave_top/registers/n15551 ));
  SLICE_599 SLICE_599( .B1(\limit_check/logic_check/count_30 ), 
    .A1(pulse_width_upper_limit_30), .C0(\i2c_slave_top/registers/n16435 ), 
    .B0(rate_upper_limit_30), .A0(pulse_width_upper_limit_30), 
    .M1(\i2c_slave_top/n16414 ), .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_166 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/n15573 ), 
    .Q0(\i2c_slave_top/registers/cw_current_limit_10 ), 
    .F1(\limit_check/logic_check/n16493 ), 
    .Q1(\i2c_slave_top/registers/cw_current_limit_11 ));
  i2c_slave_top_registers_SLICE_600 \i2c_slave_top/registers/SLICE_600 ( 
    .C1(\i2c_slave_top/registers/n16435 ), .B1(rate_upper_limit_24), 
    .A1(pulse_width_upper_limit_24), .C0(\i2c_slave_top/registers/n16435 ), 
    .B0(rate_lower_limit_30), .A0(pulse_width_lower_limit_30), 
    .M1(\i2c_slave_top/n16430 ), .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_158 ), .CLK(clk_div2), 
    .F0(\i2c_slave_top/registers/n15572 ), 
    .Q0(\i2c_slave_top/registers/cw_current_limit_0 ), 
    .F1(\i2c_slave_top/registers/n15552 ), 
    .Q1(\i2c_slave_top/registers/cw_current_limit_1 ));
  i2c_slave_top_registers_SLICE_601 \i2c_slave_top/registers/SLICE_601 ( 
    .C1(\i2c_slave_top/registers/n16435 ), .B1(rate_lower_limit_25), 
    .A1(pulse_width_lower_limit_25), .C0(\i2c_slave_top/registers/n16435 ), 
    .B0(rate_upper_limit_29), .A0(pulse_width_upper_limit_29), 
    .CE(\i2c_slave_top/registers/data_vld_dly_enable_3 ), .LSR(n16408), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/n15570 ), 
    .Q0(\i2c_slave_top/registers/byte_cnt_1 ), 
    .F1(\i2c_slave_top/registers/n15557 ));
  SLICE_602 SLICE_602( .C1(pulse_width_lower_limit_12), 
    .B1(pulse_width_lower_limit_29), .A1(\limit_check/logic_check/count_29 ), 
    .C0(\i2c_slave_top/registers/n16435 ), .B0(rate_lower_limit_29), 
    .A0(pulse_width_lower_limit_29), .M0(\i2c_slave_top/registers/n5837 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_705 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/n15569 ), 
    .Q0(\i2c_slave_top/registers/n5985 ), 
    .F1(\limit_check/logic_check/n20_adj_1748 ));
  i2c_slave_top_registers_SLICE_603 \i2c_slave_top/registers/SLICE_603 ( 
    .C1(\i2c_slave_top/registers/n16435 ), .B1(rate_upper_limit_25), 
    .A1(pulse_width_upper_limit_25), .C0(\i2c_slave_top/registers/n16435 ), 
    .B0(rate_upper_limit_28), .A0(pulse_width_upper_limit_28), 
    .M0(\i2c_slave_top/registers/n5833 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_718 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/n15567 ), 
    .Q0(\i2c_slave_top/registers/n5981 ), 
    .F1(\i2c_slave_top/registers/n15558 ));
  i2c_slave_top_registers_SLICE_604 \i2c_slave_top/registers/SLICE_604 ( 
    .C1(\i2c_slave_top/registers/n16435 ), .B1(rate_lower_limit_26), 
    .A1(pulse_width_lower_limit_26), .C0(\i2c_slave_top/registers/n16435 ), 
    .B0(rate_lower_limit_28), .A0(pulse_width_lower_limit_28), 
    .M0(\i2c_slave_top/registers/n5829 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_721 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/n15566 ), 
    .Q0(\i2c_slave_top/registers/n5977 ), 
    .F1(\i2c_slave_top/registers/n15560 ));
  i2c_slave_top_registers_SLICE_605 \i2c_slave_top/registers/SLICE_605 ( 
    .C1(\i2c_slave_top/registers/n16435 ), .B1(rate_upper_limit_26), 
    .A1(pulse_width_upper_limit_26), .C0(\i2c_slave_top/registers/n16435 ), 
    .B0(rate_upper_limit_27), .A0(pulse_width_upper_limit_27), 
    .M0(\i2c_slave_top/registers/n5825 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_724 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/n15564 ), 
    .Q0(\i2c_slave_top/registers/n5973 ), 
    .F1(\i2c_slave_top/registers/n15561 ));
  SLICE_606 SLICE_606( .C1(pulse_width_lower_limit_26), 
    .B1(pulse_width_lower_limit_27), .A1(\limit_check/logic_check/count_27 ), 
    .C0(\i2c_slave_top/registers/n16435 ), .B0(rate_lower_limit_27), 
    .A0(pulse_width_lower_limit_27), .M0(\i2c_slave_top/registers/n5821 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_727 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/n15563 ), 
    .Q0(\i2c_slave_top/registers/n5969 ), 
    .F1(\limit_check/logic_check/n22_adj_1746 ));
  SLICE_607 SLICE_607( .D1(n16518), .C1(d_ff), .B1(reset_n), 
    .A1(stop_detect_i), .B0(reset_n), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3261 ), 
    .F1(n16408));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_608 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_608 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16407 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_4 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_140 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_2 )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_6 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_4 )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_5 )
    , .M0(stop_detect_i), .CLK(clk_div2), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n14674 ), 
    .Q0(d_ff), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1756 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_609 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_609 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_8 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16390 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16431 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_7 )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_8 )
    , .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n320 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_610 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_610 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n11685 ), 
    .C1(stop_detect_i), .B1(count_i_3__N_145), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n16431 ), 
    .B0(next_state_i_3_N_181_0), .A0(stop_detect_i), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4_adj_1752 )
    , .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n506 ));
  SLICE_611 SLICE_611( .C1(rate_lower_limit_13), .B1(rate_lower_limit_14), 
    .A1(\limit_check/logic_check/count_14 ), .C0(pulse_width_lower_limit_13), 
    .B0(pulse_width_lower_limit_14), .A0(\limit_check/logic_check/count_14 ), 
    .M1(\i2c_slave_top/n16414 ), .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_51 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n14 ), .Q0(pulse_width_upper_limit_18), 
    .F1(\limit_check/logic_check/n14_adj_1740 ), 
    .Q1(pulse_width_upper_limit_19));
  SLICE_612 SLICE_612( .B1(\limit_check/logic_check/count_17 ), 
    .A1(pulse_width_upper_limit_17), .B0(pulse_width_lower_limit_17), 
    .A0(\limit_check/logic_check/count_17 ), .M1(\i2c_slave_top/n16430 ), 
    .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_143 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16481 ), 
    .Q0(\i2c_slave_top/registers/pwm_current_limit_0 ), 
    .F1(\limit_check/logic_check/n16508 ), 
    .Q1(\i2c_slave_top/registers/pwm_current_limit_1 ));
  SLICE_613 SLICE_613( .C1(rate_lower_limit_4), .B1(rate_lower_limit_8), 
    .A1(\limit_check/logic_check/count_8 ), .C0(pulse_width_lower_limit_4), 
    .B0(pulse_width_lower_limit_8), .A0(\limit_check/logic_check/count_8 ), 
    .M1(\i2c_slave_top/n16420 ), .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_173 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n8 ), 
    .Q0(\i2c_slave_top/registers/pwm_mon_current_limit_4 ), 
    .F1(\limit_check/logic_check/n8_adj_1706 ), 
    .Q1(\i2c_slave_top/registers/pwm_mon_current_limit_5 ));
  SLICE_614 SLICE_614( .B1(\limit_check/logic_check/count_9 ), 
    .A1(rate_upper_limit_9), .B0(pulse_width_lower_limit_9), 
    .A0(\limit_check/logic_check/count_9 ), .M1(\i2c_slave_top/n16430 ), 
    .M0(\i2c_slave_top/n16425 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_59 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16487 ), .Q0(pulse_width_upper_limit_24), 
    .F1(\limit_check/logic_check/n16545 ), .Q1(pulse_width_upper_limit_25));
  SLICE_615 SLICE_615( .C1(rate_lower_limit_5), .B1(rate_lower_limit_6), 
    .A1(\limit_check/logic_check/count_6 ), .C0(pulse_width_lower_limit_5), 
    .B0(pulse_width_lower_limit_6), .A0(\limit_check/logic_check/count_6 ), 
    .M1(\i2c_slave_top/n16414 ), .M0(\i2c_slave_top/n16421 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_43 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n10 ), .Q0(pulse_width_upper_limit_10), 
    .F1(\limit_check/logic_check/n10_adj_1704 ), 
    .Q1(pulse_width_upper_limit_11));
  limit_check_logic_check_SLICE_616 \limit_check/logic_check/SLICE_616 ( 
    .C1(\limit_check/logic_check/n15739 ), 
    .B1(\limit_check/logic_check/count_20 ), .A1(rate_upper_limit_20), 
    .B0(\limit_check/logic_check/count_20 ), .A0(pulse_width_upper_limit_20), 
    .F0(\limit_check/logic_check/n16499 ), 
    .F1(\limit_check/logic_check/n15180 ));
  limit_check_logic_check_SLICE_617 \limit_check/logic_check/SLICE_617 ( 
    .B1(\limit_check/logic_check/laser_pulse_d1 ), 
    .A1(\limit_check/logic_check/pulse_lower_limit_fail_N_1286 ), 
    .C0(\limit_check/logic_check/pulse_lower_limit_fail_N_1285 ), 
    .B0(\limit_check/logic_check/pulse_lower_limit_fail_N_1286 ), 
    .A0(\limit_check/logic_check/state_0 ), 
    .F0(\limit_check/logic_check/n14557 ), .F1(\limit_check/logic_check/n355 ));
  limit_check_logic_check_SLICE_618 \limit_check/logic_check/SLICE_618 ( 
    .B1(rate_lower_limit_7), .A1(\limit_check/logic_check/count_7 ), 
    .B0(\limit_check/logic_check/count_7 ), .A0(rate_upper_limit_7), 
    .F0(\limit_check/logic_check/n16543 ), 
    .F1(\limit_check/logic_check/n16452 ));
  limit_check_logic_check_SLICE_619 \limit_check/logic_check/SLICE_619 ( 
    .C1(rate_lower_limit_7), .B1(rate_lower_limit_16), 
    .A1(\limit_check/logic_check/count_16 ), 
    .B0(\limit_check/logic_check/count_16 ), .A0(rate_upper_limit_16), 
    .F0(\limit_check/logic_check/n16553 ), 
    .F1(\limit_check/logic_check/n12_adj_1739 ));
  limit_check_logic_check_SLICE_620 \limit_check/logic_check/SLICE_620 ( 
    .B1(rate_lower_limit_4), .A1(\limit_check/logic_check/count_4 ), 
    .B0(\limit_check/logic_check/count_4 ), .A0(pulse_width_upper_limit_4), 
    .F0(\limit_check/logic_check/n9_adj_1736 ), 
    .F1(\limit_check/logic_check/n9_adj_1747 ));
  limit_check_logic_check_SLICE_621 \limit_check/logic_check/SLICE_621 ( 
    .B1(pulse_width_lower_limit_12), .A1(\limit_check/logic_check/count_12 ), 
    .B0(\limit_check/logic_check/count_12 ), .A0(pulse_width_upper_limit_12), 
    .F0(\limit_check/logic_check/n25_adj_1708 ), 
    .F1(\limit_check/logic_check/n25_adj_1707 ));
  limit_check_logic_check_SLICE_622 \limit_check/logic_check/SLICE_622 ( 
    .B1(\limit_check/logic_check/laser_pulse_d1 ), 
    .A1(\limit_check/logic_check/rate_upper_limit_fail_N_1309 ), 
    .B0(\limit_check/logic_check/count_31_N_1168_0 ), 
    .A0(\limit_check/logic_check/laser_pulse_d1 ), 
    .F0(\limit_check/logic_check/n8_adj_1742 ), 
    .F1(\limit_check/logic_check/n3735 ));
  adc_control_SLICE_623 \adc_control/SLICE_623 ( 
    .D1(\adc_control/convert_count_1 ), .C1(\adc_control/convert_count_2 ), 
    .B1(\adc_control/convert_count_3 ), .A1(\adc_control/convert_count_0 ), 
    .B0(\adc_control/convert_count_5 ), .A0(\adc_control/convert_count_7 ), 
    .F0(\adc_control/n6 ), .F1(\adc_control/n8 ));
  i2c_slave_top_registers_SLICE_624 \i2c_slave_top/registers/SLICE_624 ( 
    .D1(\i2c_slave_top/registers/n16379 ), .C1(\i2c_slave_top/n16546 ), 
    .B1(\i2c_slave_top/registers/n16410 ), 
    .A1(\i2c_slave_top/registers/n16396 ), 
    .C0(\i2c_slave_top/registers/n5979 ), .B0(\i2c_slave_top/registers/n5980 ), 
    .A0(\i2c_slave_top/registers/n5981 ), 
    .F0(\i2c_slave_top/registers/n16550 ), 
    .F1(\i2c_slave_top/registers/clk_div2_enable_136 ));
  limit_check_logic_check_SLICE_625 \limit_check/logic_check/SLICE_625 ( 
    .C1(rate_lower_limit_12), .B1(rate_lower_limit_29), 
    .A1(\limit_check/logic_check/count_29 ), 
    .D0(\limit_check/logic_check/n15231 ), 
    .C0(\limit_check/logic_check/n16532 ), 
    .B0(\limit_check/logic_check/n16533 ), 
    .A0(\limit_check/logic_check/n16534 ), 
    .F0(\limit_check/logic_check/n15258 ), 
    .F1(\limit_check/logic_check/n20_adj_1730 ));
  SLICE_626 SLICE_626( .B1(rate_lower_limit_18), 
    .A1(\limit_check/logic_check/count_18 ), .B0(pulse_width_lower_limit_19), 
    .A0(\limit_check/logic_check/count_19 ), .M1(\i2c_slave_top/n16420 ), 
    .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_151 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n16471 ), 
    .Q0(\i2c_slave_top/registers/pwm_current_limit_12 ), 
    .F1(\limit_check/logic_check/n16449 ), 
    .Q1(\i2c_slave_top/registers/pwm_current_limit_13 ));
  SLICE_627 SLICE_627( .B1(pulse_width_lower_limit_4), 
    .A1(\limit_check/logic_check/count_4 ), .B0(pulse_width_lower_limit_5), 
    .A0(\limit_check/logic_check/count_5 ), .M1(\i2c_slave_top/n16420 ), 
    .M0(\i2c_slave_top/n16415 ), 
    .CE(\i2c_slave_top/registers/clk_div2_enable_43 ), .CLK(clk_div2), 
    .F0(\limit_check/logic_check/n11_adj_1692 ), 
    .Q0(pulse_width_upper_limit_12), 
    .F1(\limit_check/logic_check/n9_adj_1732 ), 
    .Q1(pulse_width_upper_limit_13));
  limit_check_logic_check_SLICE_628 \limit_check/logic_check/SLICE_628 ( 
    .B1(\limit_check/logic_check/count_13 ), .A1(rate_upper_limit_13), 
    .B0(\limit_check/logic_check/count_6 ), .A0(rate_upper_limit_6), 
    .F0(\limit_check/logic_check/n16547 ), 
    .F1(\limit_check/logic_check/n16556 ));
  SLICE_629 SLICE_629( .B1(reset_bus_i), .A1(reset_n), .D0(n16517), 
    .C0(\i2c_slave_top/addr_start_2 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .F0(\i2c_slave_top/addr_i_7__N_730 ), .F1(start_detect_i_N_352));
  SLICE_630 SLICE_630( .D1(\i2c_slave_top/registers/n16548 ), 
    .C1(\i2c_slave_top/registers/n5971 ), .B1(\i2c_slave_top/registers/n5972 ), 
    .A1(\i2c_slave_top/registers/n5973 ), 
    .B0(\limit_check/logic_check/count_8 ), .A0(rate_upper_limit_8), 
    .F0(\limit_check/logic_check/n16544 ), 
    .F1(\i2c_slave_top/registers/n14662 ));
  limit_check_logic_check_SLICE_631 \limit_check/logic_check/SLICE_631 ( 
    .C1(rate_lower_limit_9), .B1(rate_lower_limit_21), 
    .A1(\limit_check/logic_check/count_21 ), 
    .B0(\limit_check/logic_check/count_9 ), .A0(pulse_width_upper_limit_9), 
    .F0(\limit_check/logic_check/n16512 ), 
    .F1(\limit_check/logic_check/n16_adj_1734 ));
  laser_pwr_en1_n laser_pwr_en1_n_I( .PADDO(laser_pwr_en1_n_c), 
    .laser_pwr_en1_n(laser_pwr_en1_n));
  sda sda_I( .PADDI(sda_out), .PADDT(n11577), .PADDO(GND_net), .sda(sda));
  scl scl_I( .PADDI(scl_out), .PADDO(GND_net), .scl(scl));
  watchdog_timeout_led_n watchdog_timeout_led_n_I( 
    .PADDO(watchdog_timeout_led_n_c), 
    .watchdog_timeout_led_n(watchdog_timeout_led_n));
  calibrated_led_n calibrated_led_n_I( .PADDO(calibrated_led_n_c), 
    .calibrated_led_n(calibrated_led_n));
  peak_error_led_n peak_error_led_n_I( .PADDO(peak_error_led_n_c), 
    .peak_error_led_n(peak_error_led_n));
  pulse_error_led_n pulse_error_led_n_I( .PADDO(pulse_error_led_n_c), 
    .pulse_error_led_n(pulse_error_led_n));
  rate_error_led_n rate_error_led_n_I( .PADDO(rate_error_led_n_c), 
    .rate_error_led_n(rate_error_led_n));
  test_pass_led_n test_pass_led_n_I( .PADDO(test_pass_led_n_c), 
    .test_pass_led_n(test_pass_led_n));
  test_fail_led_n test_fail_led_n_I( .PADDO(test_fail_led_n_c), 
    .test_fail_led_n(test_fail_led_n));
  TA_shutdown TA_shutdown_I( .PADDO(TA_shutdown_c), .TA_shutdown(TA_shutdown));
  adc_sck adc_sck_I( .PADDO(spare1_c), .adc_sck(adc_sck));
  adc_convert adc_convert_I( .PADDO(spare2_c), .adc_convert(adc_convert));
  temp_scl temp_scl_I( .PADDO(GND_net), .temp_scl(temp_scl));
  temp_sda temp_sda_I( .PADDO(GND_net), .temp_sda(temp_sda));
  prom_scl prom_scl_I( .PADDO(GND_net), .prom_scl(prom_scl));
  prom_sda prom_sda_I( .PADDO(GND_net), .prom_sda(prom_sda));
  heartbeat_n heartbeat_n_I( .PADDO(heartbeat_n_c_7), 
    .heartbeat_n(heartbeat_n));
  spare1 spare1_I( .PADDO(spare1_c), .spare1(spare1));
  spare2 spare2_I( .PADDO(spare2_c), .spare2(spare2));
  spare3 spare3_I( .PADDO(spare3_c_c), .spare3(spare3));
  spare4 spare4_I( .PADDO(GND_net), .spare4(spare4));
  gpio1 gpio1_I( .PADDO(GND_net), .gpio1(gpio1));
  gpio2 gpio2_I( .PADDO(GND_net), .gpio2(gpio2));
  gpio3 gpio3_I( .PADDO(GND_net), .gpio3(gpio3));
  gpio4 gpio4_I( .PADDO(GND_net), .gpio4(gpio4));
  rstn rstn_I( .PADDI(rstn_c), .rstn(rstn));
  system_reset_n system_reset_n_I( .PADDI(system_reset_n_c_2), 
    .system_reset_n(system_reset_n));
  clk_50mhz clk_50mhz_I( .PADDI(clk_50mhz_c), .clk_50mhz(clk_50mhz));
  laser_pulse laser_pulse_I( .PADDI(laser_pulse_c), .laser_pulse(laser_pulse));
  pwr_good pwr_good_I( .PADDI(pwr_good_c_1), .pwr_good(pwr_good));
  adc_sdo adc_sdo_I( .PADDI(spare3_c_c), .adc_sdo(adc_sdo));
  GSR_INST GSR_INST( .GSRNET(reset_n));
  VHI VHI_INST( .Z(VCCI));
  PUR PUR_INST( .PUR(VCCI));
endmodule

module adc_control_SLICE_0 ( input A0, DI0, CE, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre \adc_control/convert_count_922__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu2 \adc_control/convert_count_922_add_4_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3IY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module ccu2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hfaaa;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module adc_control_SLICE_1 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre \adc_control/convert_count_922__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \adc_control/convert_count_922__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20001 \adc_control/convert_count_922_add_4_7 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20001 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hfaaa;
  defparam inst1.INIT1 = 16'hfaaa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module adc_control_SLICE_2 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre \adc_control/convert_count_922__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \adc_control/convert_count_922__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20001 \adc_control/convert_count_922_add_4_5 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_3 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre \adc_control/convert_count_922__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \adc_control/convert_count_922__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20001 \adc_control/convert_count_922_add_4_3 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_4 ( input A1, DI1, CE, LSR, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre \adc_control/convert_count_922__i0 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20002 \adc_control/convert_count_922_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20002 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'h0555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module i2c_slave_top_registers_SLICE_5 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20003 \i2c_slave_top/registers/add_279_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20003 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5aaa;
  defparam inst1.INIT1 = 16'h5aaa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module i2c_slave_top_registers_SLICE_6 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20003 \i2c_slave_top/registers/add_279_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_7 ( input A1, A0, M1, M0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_reg2_i_790 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_reg1_i_789 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20003 \i2c_slave_top/registers/add_279_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0004 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module i2c_slave_top_SLICE_8 ( input A1, M1, M0, CLK, output Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i_751 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i_750 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20005 \i2c_slave_top/registers/add_279_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20005 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'h5555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module i2c_slave_top_registers_SLICE_9 ( input A0, FCI, output F0 );
  wire   GNDI;

  ccu20006 \i2c_slave_top/registers/add_279_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20006 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5aaa;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_10 ( input A1, A0, M1, M0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i9 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0007 \i2c_slave_top/registers/pulse_width_lower_limit_i8 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20003 \limit_check/logic_check/add_11_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0007 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module SLICE_11 ( input A1, A0, M1, M0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i31 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i30 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20003 \limit_check/logic_check/add_11_31 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_12 ( input A1, A0, M1, M0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i27 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i26 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20003 \limit_check/logic_check/add_11_29 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_13 ( input A1, A0, M1, M0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i29 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i28 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20003 \limit_check/logic_check/add_11_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_14 ( input A1, A0, M1, M0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i25 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i24 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20003 \limit_check/logic_check/add_11_27 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_15 ( input A1, A0, M1, M0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i23 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i22 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20003 \limit_check/logic_check/add_11_25 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_16 ( input A1, A0, M1, M0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i21 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i20 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20003 \limit_check/logic_check/add_11_23 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_17 ( input A1, A0, M1, M0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i3 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i2 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20003 \limit_check/logic_check/add_11_21 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_18 ( input A1, A0, M1, M0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0007 \i2c_slave_top/registers/pulse_width_lower_limit_i7 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i6 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20003 \limit_check/logic_check/add_11_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_19 ( input A1, A0, M1, M0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i19 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i18 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20003 \limit_check/logic_check/add_11_19 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_20 ( input A1, A0, M1, M0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i17 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i16 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20003 \limit_check/logic_check/add_11_17 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_21 ( input A1, A0, M1, M0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i15 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i14 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20003 \limit_check/logic_check/add_11_15 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_22 ( input A1, A0, M1, M0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i13 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i12 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20003 \limit_check/logic_check/add_11_13 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_23 ( input A1, A0, M1, M0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i11 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0007 \i2c_slave_top/registers/pulse_width_lower_limit_i10 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20003 \limit_check/logic_check/add_11_11 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_24 ( input A0, M1, M0, CE, CLK, FCI, output F0, Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0007 \i2c_slave_top/registers/pulse_width_lower_limit_i5 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0007 \i2c_slave_top/registers/pulse_width_lower_limit_i4 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20006 \limit_check/logic_check/add_11_33 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_25 ( input A1, A0, M1, M0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i1 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i0 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20003 \limit_check/logic_check/add_11_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_26 ( input A1, M1, M0, CE, CLK, output Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i1 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_lower_limit_i0 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20005 \limit_check/logic_check/add_11_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_27 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre0004 \heart_beat/count_919_985__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \heart_beat/count_919_985__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \heart_beat/count_919_985_add_4_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_28 ( input A1, DI1, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly;

  vmuxregsre0004 \heart_beat/count_919_985__i0 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20002 \heart_beat/count_919_985_add_4_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_29 ( input A0, DI0, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  vmuxregsre0004 \heart_beat/prescale_920__i15 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu2 \heart_beat/prescale_920_add_4_17 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_30 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre0004 \heart_beat/prescale_920__i14 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \heart_beat/prescale_920__i13 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \heart_beat/prescale_920_add_4_15 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_31 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre0004 \heart_beat/prescale_920__i12 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \heart_beat/prescale_920__i11 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \heart_beat/prescale_920_add_4_13 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_32 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre0004 \heart_beat/prescale_920__i10 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \heart_beat/prescale_920__i9 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \heart_beat/prescale_920_add_4_11 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_33 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre0004 \heart_beat/prescale_920__i8 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \heart_beat/prescale_920__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \heart_beat/prescale_920_add_4_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_34 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre0004 \heart_beat/prescale_920__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \heart_beat/prescale_920__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \heart_beat/prescale_920_add_4_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_35 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre0004 \heart_beat/prescale_920__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \heart_beat/prescale_920__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \heart_beat/prescale_920_add_4_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_36 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre0004 \heart_beat/prescale_920__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \heart_beat/prescale_920__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \heart_beat/prescale_920_add_4_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_37 ( input A1, DI1, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly;

  vmuxregsre0004 \heart_beat/prescale_920__i0 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20002 \heart_beat/prescale_920_add_4_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_38 ( input A0, DI0, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  vmuxregsre0004 \heart_beat/count_919_985__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu2 \heart_beat/count_919_985_add_4_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_39 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre0004 \heart_beat/count_919_985__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \heart_beat/count_919_985__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \heart_beat/count_919_985_add_4_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_40 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre0004 \heart_beat/count_919_985__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \heart_beat/count_919_985__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \heart_beat/count_919_985_add_4_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_41 ( input A0, DI0, CE, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut4 \adc_control/i3348_1_lut_rep_460 ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \adc_control/adc_sck_temp_84 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5555) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_42 ( input D1, C1, B1, A1, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40008 \adc_control/i3494_2_lut_3_lut_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40009 \adc_control/i9086_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \adc_control/data_ready_83 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40008 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40009 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2222) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_43 ( input B1, A1, A0, DI1, DI0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40010 \adc_control/i10591_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 \adc_control/i10589_1_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre \adc_control/sck_count_921__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \adc_control/sck_count_921__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40010 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6666) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_44 ( input D1, C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40011 \adc_control/i10605_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40012 \adc_control/i10598_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \adc_control/sck_count_921__i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \adc_control/sck_count_921__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40011 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40012 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7878) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_45 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CLK, 
    output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40013 \adc_control/i2_3_lut_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40014 \adc_control/i3394_2_lut_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \adc_control/state_i0 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40013 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0301) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40014 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA5A7) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_46 ( input D1, C1, B1, A1, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40015 \adc_control/i2_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40016 \adc_control/mux_449_Mux_1_i3_3_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \adc_control/state_i1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40015 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8880) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40016 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7C7C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_47 ( input DI0, CE, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40017 \adc_control/n17327\010/BUF1/BUF1 ( .A(GNDI), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \adc_control/state_i2 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40017 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_48 ( input DI0, CE, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40017 m1_lut( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \adc_control/state_i3 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module clock_generator_SLICE_49 ( input A0, DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, LSR_NOTIN, DI0_dly, CLK_dly, LSR_dly;

  lut4 \clock_generator/i13815 ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0018 \clock_generator/clk_div2_8 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0018 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module inverter ( input I, output Z );

  INV INST1( .A(I), .Z(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_50
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40019 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_326_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40020 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1383_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_FSM_i1 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40019 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40020 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCECC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_SLICE_52 ( input C1, B1, A1, D0, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40021 \i2c_slave_top/registers/i1_3_lut_adj_173 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40022 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_146 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/dynamic_control_i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40021 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hECEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40022 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_SLICE_53 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40023 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_362_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40023 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_357_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/addr_start_i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0004 \i2c_slave_top/registers/addr_start_i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40023 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_SLICE_54 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40023 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9083_2_lut_rep_346_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40023 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_353_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/addr_start_i3 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0004 \i2c_slave_top/registers/addr_start_i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module i2c_slave_top_SLICE_55 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40023 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_352_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40023 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_347_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/addr_start_i5 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0004 \i2c_slave_top/registers/addr_start_i4 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module i2c_slave_top_SLICE_56 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40023 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9084_2_lut_rep_354_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40023 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_351_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/addr_start_i7 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0004 \i2c_slave_top/registers/addr_start_i6 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_57 ( input C1, B1, A1, C0, B0, A0, DI0, 
    M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_57/i2c_slave_top/registers/SLICE_57_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_57/i2c_slave_top/registers/mux_682_i1/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40024 \i2c_slave_top/registers/SLICE_57_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_57/i2c_slave_top/registers/SLICE_57_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/mux_682_i1/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_57/i2c_slave_top/registers/mux_682_i1/GATE_H0 )
    );
  vmuxregsre \i2c_slave_top/registers/data_out_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_57_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_57/i2c_slave_top/registers/mux_682_i1/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_57/i2c_slave_top/registers/SLICE_57_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40024 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module selmux2 ( input D0, D1, SD, output Z );

  MUX21 INST1( .D0(D0), .D1(D1), .SD(SD), .Z(Z));
endmodule

module i2c_slave_top_registers_SLICE_58 ( input C1, B1, A1, C0, B0, A0, DI0, 
    M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_58/i2c_slave_top/registers/SLICE_58_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_58/i2c_slave_top/registers/mux_682_i2/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40024 \i2c_slave_top/registers/SLICE_58_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_58/i2c_slave_top/registers/SLICE_58_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/mux_682_i2/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_58/i2c_slave_top/registers/mux_682_i2/GATE_H0 )
    );
  vmuxregsre \i2c_slave_top/registers/data_out_i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_58_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_58/i2c_slave_top/registers/mux_682_i2/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_58/i2c_slave_top/registers/SLICE_58_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_59 ( input C1, B1, A1, C0, B0, A0, DI0, 
    M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_59/i2c_slave_top/registers/SLICE_59_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_59/i2c_slave_top/registers/mux_682_i3/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40024 \i2c_slave_top/registers/SLICE_59_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_59/i2c_slave_top/registers/SLICE_59_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/mux_682_i3/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_59/i2c_slave_top/registers/mux_682_i3/GATE_H0 )
    );
  vmuxregsre \i2c_slave_top/registers/data_out_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_59_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_59/i2c_slave_top/registers/mux_682_i3/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_59/i2c_slave_top/registers/SLICE_59_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_60 ( input C1, B1, A1, C0, B0, A0, DI0, 
    M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_60/i2c_slave_top/registers/SLICE_60_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_60/i2c_slave_top/registers/mux_682_i4/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40024 \i2c_slave_top/registers/SLICE_60_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_60/i2c_slave_top/registers/SLICE_60_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/mux_682_i4/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_60/i2c_slave_top/registers/mux_682_i4/GATE_H0 )
    );
  vmuxregsre \i2c_slave_top/registers/data_out_i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_60_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_60/i2c_slave_top/registers/mux_682_i4/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_60/i2c_slave_top/registers/SLICE_60_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_61 ( input C1, B1, A1, C0, B0, A0, DI0, 
    M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_61/i2c_slave_top/registers/SLICE_61_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_61/i2c_slave_top/registers/mux_682_i5/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40024 \i2c_slave_top/registers/SLICE_61_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_61/i2c_slave_top/registers/SLICE_61_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/mux_682_i5/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_61/i2c_slave_top/registers/mux_682_i5/GATE_H0 )
    );
  vmuxregsre \i2c_slave_top/registers/data_out_i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_61_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_61/i2c_slave_top/registers/mux_682_i5/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_61/i2c_slave_top/registers/SLICE_61_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_62 ( input C1, B1, A1, C0, B0, A0, DI0, 
    M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_62/i2c_slave_top/registers/SLICE_62_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_62/i2c_slave_top/registers/mux_682_i6/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40024 \i2c_slave_top/registers/SLICE_62_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_62/i2c_slave_top/registers/SLICE_62_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/mux_682_i6/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_62/i2c_slave_top/registers/mux_682_i6/GATE_H0 )
    );
  vmuxregsre \i2c_slave_top/registers/data_out_i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_62_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_62/i2c_slave_top/registers/mux_682_i6/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_62/i2c_slave_top/registers/SLICE_62_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_63 ( input C1, B1, A1, C0, B0, A0, DI0, 
    M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_63/i2c_slave_top/registers/SLICE_63_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_63/i2c_slave_top/registers/mux_682_i7/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40024 \i2c_slave_top/registers/SLICE_63_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_63/i2c_slave_top/registers/SLICE_63_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/mux_682_i7/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_63/i2c_slave_top/registers/mux_682_i7/GATE_H0 )
    );
  vmuxregsre \i2c_slave_top/registers/data_out_i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_63_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_63/i2c_slave_top/registers/mux_682_i7/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_63/i2c_slave_top/registers/SLICE_63_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_64 ( input C1, B1, A1, C0, B0, A0, DI0, 
    M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_64/i2c_slave_top/registers/SLICE_64_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_64/i2c_slave_top/registers/mux_682_i8/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40024 \i2c_slave_top/registers/SLICE_64_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_64/i2c_slave_top/registers/SLICE_64_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/mux_682_i8/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_64/i2c_slave_top/registers/mux_682_i8/GATE_H0 )
    );
  vmuxregsre \i2c_slave_top/registers/data_out_i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_64_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_64/i2c_slave_top/registers/mux_682_i8/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_64/i2c_slave_top/registers/SLICE_64_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_65
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   VCCI, CLK_NOTIN, GNDI, DI0_dly, CLK_dly;

  lut40025 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7_4_lut ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40026 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_150 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i_768 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40025 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40026 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_66
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40027 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_144 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40028 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_154 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_FSM_i4 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40027 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2220) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40028 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_filter_scl_inst_SLICE_67 ( input 
    A0, DI0, M1, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut4 \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_I_0_1_lut ( 
    .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d2_14 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d1_13 ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_filter_sda_inst_SLICE_70 ( input 
    A0, DI0, M1, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut4 \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_I_0_1_lut ( 
    .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d2_14 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d1_13 ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_73
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, M0, CE, LSR, CLK, output OFX0, 
    Q0 );
  wire   
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_73/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_73_K1_H1 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_73/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/mux_817_i1/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40029 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_73_K1 
    ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_73/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_73_K1_H1 )
    );
  lut40030 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/mux_817_i1/GATE 
    ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_73/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/mux_817_i1/GATE_H0 )
    );
  vmuxregsre0018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_i0_i0 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_73_K0K1MUX 
    ( 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_73/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/mux_817_i1/GATE_H0 )
    , 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_73/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_73_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40029 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0102) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40030 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_74
   ( input D1, C1, B1, A1, C0, B0, A0, DI1, DI0, CE, LSR, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40031 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9098_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40032 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9097_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_i0_i2 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_i0_i1 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40031 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40032 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8484) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_75
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, M0, CE, LSR, CLK, output OFX0, 
    Q0 );
  wire   
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_75/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_75_K1_H1 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_75/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13399/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40033 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_75_K1 
    ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_75/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_75_K1_H1 )
    );
  lut40034 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13399/GATE 
    ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_75/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13399/GATE_H0 )
    );
  vmuxregsre0018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_i0_i3 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_75_K0K1MUX 
    ( 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_75/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13399/GATE_H0 )
    , 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_75/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_75_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40033 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF09) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40034 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_76
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, LSR, CLK, output F0, Q0, 
    F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40035 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40019 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_156 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_FSM_i0 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0036 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_FSM_i5 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40035 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF20) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0036 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_77
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, CLK, output F0, Q0, 
    F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40037 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_4_lut_adj_159 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40037 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_4_lut_adj_157 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i2 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i1 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40037 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_78
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, CLK, output F0, Q0, 
    F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40037 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_4_lut_adj_162 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40037 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_4_lut_adj_160 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i4 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i3 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_79
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, CLK, output F0, Q0, 
    F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40037 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_4_lut_adj_165 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40037 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_4_lut_adj_163 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i6 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i5 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_80
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, CLK, output F0, Q0, 
    F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40037 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_4_lut_adj_167 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40037 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_4_lut_adj_166 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i8 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i7 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_85
   ( input DI0, CE, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40017 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n17327\000/BUF1/BUF1 
    ( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/first_read_done_788 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_86
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, LSR, CLK, output F0, Q0, 
    F1 );
  wire   VCCI, CLK_NOTIN, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40026 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_141_I_0_856_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40026 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_146_I_0_859_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0038 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i_772 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module vmuxregsre0038 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3IY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_91
   ( input B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40039 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_365_2_lut 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40040 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13304_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0007 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_data_i_777 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40039 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDDDD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40040 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_SLICE_92 ( input A0, DI0, M1, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut4 \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n_I_0_1_lut 
    ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i_766 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0007 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg_749 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_93
   ( input C1, B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40041 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/select_726_Select_0_i1_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40019 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_4_lut ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0036 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_756 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40041 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC8C8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_96
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40042 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_334_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40043 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/equal_32_i8_1_lut_rep_329_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_i_787 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40042 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F1E) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40043 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_99 ( input DI0, CE, LSR, CLK, output F0, 
    Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40017 \i2c_slave_top/registers/n17327\009/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0018 \i2c_slave_top/registers/byte_cnt_i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_101 ( input B1, A1, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40010 \i2c_slave_top/registers/i10620_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 \i2c_slave_top/registers/i10618_1_lut ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/count_923__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/count_923__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_102 ( input D1, C1, B1, A1, C0, B0, A0, 
    DI1, DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40011 \i2c_slave_top/registers/i10634_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40012 \i2c_slave_top/registers/i10627_2_lut_3_lut ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/count_923__i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/count_923__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_119 ( input B1, A1, D0, C0, B0, A0, DI0, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, CLK_NOTIN, DI0_dly, CLK_dly;

  lut40044 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/o_start_I_0_2_lut_rep_450 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40045 \i2c_slave_top/registers/i13070_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/data_vld_cnt_192 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40044 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40045 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F70) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_SLICE_120 ( input C1, B1, A1, D0, C0, B0, A0, DI0, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, CLK_NOTIN, DI0_dly, CLK_dly;

  lut40046 \i2c_slave_top/registers/i2_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40047 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_rep_349_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/data_vld_dly_193 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40046 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40047 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h44F4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_SLICE_129 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40022 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_141 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40022 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_142 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/dynamic_control_i2 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/dynamic_control_i1 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_130 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40022 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_140 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40022 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_143 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/dynamic_control_i4 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/dynamic_control_i3 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_131 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40022 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_138 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40022 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_139 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/dynamic_control_i6 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/dynamic_control_i5 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_132 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40022 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_145 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/dynamic_control_i7 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40048 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_SLICE_133 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40048 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_132 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40048 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/dynamic_control_i9 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/dynamic_control_i8 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_134 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40048 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_134 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40048 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_133 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/dynamic_control_i11 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/dynamic_control_i10 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_135 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40048 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_136 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40048 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_135 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/dynamic_control_i13 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/dynamic_control_i12 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_136 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40048 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9116_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40048 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_137 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/dynamic_control_i15 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/dynamic_control_i14 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_137 ( input DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40017 \i2c_slave_top/registers/n17327\001/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0049 \i2c_slave_top/registers/i3409 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0049 ( input D0, D1, SD, SP, CK, LSR, output Q );
  wire   GATE;

  AND2 INST50( .A(SP), .B(CK), .Z(GATE));
  FL1S1D INST01( .D0(D0), .D1(D1), .CK(GATE), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module i2c_slave_top_registers_SLICE_138 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_138/i2c_slave_top/registers/SLICE_138_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_138/i2c_slave_top/registers/i3201/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40024 \i2c_slave_top/registers/SLICE_138_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_138/i2c_slave_top/registers/SLICE_138_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40050 \i2c_slave_top/registers/i3201/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_138/i2c_slave_top/registers/i3201/GATE_H0 ));
  vmuxregsre0036 \i2c_slave_top/registers/addr_i_reg_i0_3410_3411_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_138_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_138/i2c_slave_top/registers/i3201/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_138/i2c_slave_top/registers/SLICE_138_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40050 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8F80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_140 ( input DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40017 \i2c_slave_top/registers/n17327\008/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0049 \i2c_slave_top/registers/i3413 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_141 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_141/i2c_slave_top/registers/SLICE_141_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_141/i2c_slave_top/registers/i3267/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40024 \i2c_slave_top/registers/SLICE_141_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_141/i2c_slave_top/registers/SLICE_141_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40050 \i2c_slave_top/registers/i3267/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_141/i2c_slave_top/registers/i3267/GATE_H0 ));
  vmuxregsre0036 \i2c_slave_top/registers/addr_i_reg_i1_3414_3415_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_141_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_141/i2c_slave_top/registers/i3267/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_141/i2c_slave_top/registers/SLICE_141_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_143 ( input DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40017 \i2c_slave_top/registers/n17327\007/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0049 \i2c_slave_top/registers/i3417 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_144 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_144/i2c_slave_top/registers/SLICE_144_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_144/i2c_slave_top/registers/i3271/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40024 \i2c_slave_top/registers/SLICE_144_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_144/i2c_slave_top/registers/SLICE_144_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40050 \i2c_slave_top/registers/i3271/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_144/i2c_slave_top/registers/i3271/GATE_H0 ));
  vmuxregsre0036 \i2c_slave_top/registers/addr_i_reg_i2_3418_3419_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_144_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_144/i2c_slave_top/registers/i3271/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_144/i2c_slave_top/registers/SLICE_144_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_146 ( input DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40017 \i2c_slave_top/registers/n17327\006/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0049 \i2c_slave_top/registers/i3421 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_147 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_147/i2c_slave_top/registers/SLICE_147_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_147/i2c_slave_top/registers/i3275/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40024 \i2c_slave_top/registers/SLICE_147_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_147/i2c_slave_top/registers/SLICE_147_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40050 \i2c_slave_top/registers/i3275/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_147/i2c_slave_top/registers/i3275/GATE_H0 ));
  vmuxregsre0036 \i2c_slave_top/registers/addr_i_reg_i3_3422_3423_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_147_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_147/i2c_slave_top/registers/i3275/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_147/i2c_slave_top/registers/SLICE_147_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_149 ( input DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40017 \i2c_slave_top/registers/n17327\005/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0049 \i2c_slave_top/registers/i3425 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_150 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_150/i2c_slave_top/registers/SLICE_150_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_150/i2c_slave_top/registers/i3279/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40024 \i2c_slave_top/registers/SLICE_150_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_150/i2c_slave_top/registers/SLICE_150_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40050 \i2c_slave_top/registers/i3279/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_150/i2c_slave_top/registers/i3279/GATE_H0 ));
  vmuxregsre0036 \i2c_slave_top/registers/addr_i_reg_i4_3426_3427_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_150_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_150/i2c_slave_top/registers/i3279/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_150/i2c_slave_top/registers/SLICE_150_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_152 ( input DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40017 \i2c_slave_top/registers/n17327\004/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0049 \i2c_slave_top/registers/i3429 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_153 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_153/i2c_slave_top/registers/SLICE_153_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_153/i2c_slave_top/registers/i3283/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40024 \i2c_slave_top/registers/SLICE_153_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_153/i2c_slave_top/registers/SLICE_153_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40050 \i2c_slave_top/registers/i3283/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_153/i2c_slave_top/registers/i3283/GATE_H0 ));
  vmuxregsre0036 \i2c_slave_top/registers/addr_i_reg_i5_3430_3431_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_153_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_153/i2c_slave_top/registers/i3283/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_153/i2c_slave_top/registers/SLICE_153_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_155 ( input DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40017 \i2c_slave_top/registers/n17327\003/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0049 \i2c_slave_top/registers/i3433 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_156 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_156/i2c_slave_top/registers/SLICE_156_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_156/i2c_slave_top/registers/i3287/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40024 \i2c_slave_top/registers/SLICE_156_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_156/i2c_slave_top/registers/SLICE_156_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40050 \i2c_slave_top/registers/i3287/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_156/i2c_slave_top/registers/i3287/GATE_H0 ));
  vmuxregsre0036 \i2c_slave_top/registers/addr_i_reg_i6_3434_3435_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_156_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_156/i2c_slave_top/registers/i3287/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_156/i2c_slave_top/registers/SLICE_156_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_158 ( input DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40017 \i2c_slave_top/registers/n17327\002/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0049 \i2c_slave_top/registers/i3437 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_159 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_159/i2c_slave_top/registers/SLICE_159_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_159/i2c_slave_top/registers/i3291/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40024 \i2c_slave_top/registers/SLICE_159_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_159/i2c_slave_top/registers/SLICE_159_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40050 \i2c_slave_top/registers/i3291/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_159/i2c_slave_top/registers/i3291/GATE_H0 ));
  vmuxregsre0036 \i2c_slave_top/registers/addr_i_reg_i7_3438_3439_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_159_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_159/i2c_slave_top/registers/i3291/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_159/i2c_slave_top/registers/SLICE_159_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_177 ( input C1, B1, A1, C0, B0, A0, DI0, 
    CE, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40051 \i2c_slave_top/registers/i1_3_lut_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40052 \i2c_slave_top/registers/i9076_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0018 \i2c_slave_top/registers/state_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40051 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCBCB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40052 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3232) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_178 ( input B1, A1, C0, B0, A0, DI0, CE, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40053 \i2c_slave_top/registers/i13318_2_lut_4_lut_2_lut_4_lut ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40054 \i2c_slave_top/registers/i13295_2_lut_3_lut ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0018 \i2c_slave_top/registers/state_i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40053 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40054 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0101) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module limit_check_logic_check_SLICE_186 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40055 \limit_check/logic_check/i1_4_lut_adj_89 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40028 \limit_check/logic_check/i2_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0004 \limit_check/logic_check/count_i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \limit_check/logic_check/count_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40055 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hECA0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module limit_check_logic_check_SLICE_187 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40055 \limit_check/logic_check/i1_4_lut_adj_91 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40055 \limit_check/logic_check/i1_4_lut_adj_90 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \limit_check/logic_check/count_i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \limit_check/logic_check/count_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_188 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40055 \limit_check/logic_check/i1_4_lut_adj_93 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40055 \limit_check/logic_check/i1_4_lut_adj_92 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \limit_check/logic_check/count_i5 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \limit_check/logic_check/count_i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_189 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40055 \limit_check/logic_check/i1_4_lut_adj_95 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40055 \limit_check/logic_check/i1_4_lut_adj_94 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \limit_check/logic_check/count_i7 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \limit_check/logic_check/count_i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_190 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40055 \limit_check/logic_check/i1_4_lut_adj_97 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40055 \limit_check/logic_check/i1_4_lut_adj_96 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \limit_check/logic_check/count_i9 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \limit_check/logic_check/count_i8 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_191 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40055 \limit_check/logic_check/i1_4_lut_adj_99 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40055 \limit_check/logic_check/i1_4_lut_adj_98 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \limit_check/logic_check/count_i11 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \limit_check/logic_check/count_i10 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_192 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40055 \limit_check/logic_check/i1_4_lut_adj_101 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40055 \limit_check/logic_check/i1_4_lut_adj_100 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \limit_check/logic_check/count_i13 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \limit_check/logic_check/count_i12 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_193 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40055 \limit_check/logic_check/i1_4_lut_adj_103 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40055 \limit_check/logic_check/i1_4_lut_adj_102 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \limit_check/logic_check/count_i15 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \limit_check/logic_check/count_i14 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_194 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40055 \limit_check/logic_check/i1_4_lut_adj_105 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40055 \limit_check/logic_check/i1_4_lut_adj_104 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \limit_check/logic_check/count_i17 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \limit_check/logic_check/count_i16 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_195 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40055 \limit_check/logic_check/i1_4_lut_adj_107 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40055 \limit_check/logic_check/i1_4_lut_adj_106 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \limit_check/logic_check/count_i19 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \limit_check/logic_check/count_i18 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_196 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40055 \limit_check/logic_check/i1_4_lut_adj_109 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40055 \limit_check/logic_check/i1_4_lut_adj_108 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \limit_check/logic_check/count_i21 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \limit_check/logic_check/count_i20 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_197 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40055 \limit_check/logic_check/i1_4_lut_adj_111 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40055 \limit_check/logic_check/i1_4_lut_adj_110 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \limit_check/logic_check/count_i23 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \limit_check/logic_check/count_i22 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_198 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40055 \limit_check/logic_check/i1_4_lut_adj_114 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40055 \limit_check/logic_check/i1_4_lut_adj_113 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \limit_check/logic_check/count_i25 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \limit_check/logic_check/count_i24 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_199 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40055 \limit_check/logic_check/i1_4_lut_adj_116 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40055 \limit_check/logic_check/i1_4_lut_adj_115 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \limit_check/logic_check/count_i27 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \limit_check/logic_check/count_i26 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_200 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40055 \limit_check/logic_check/i1_4_lut_adj_118 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40055 \limit_check/logic_check/i1_4_lut_adj_117 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \limit_check/logic_check/count_i29 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \limit_check/logic_check/count_i28 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_201 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40055 \limit_check/logic_check/i1_4_lut_adj_120 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40055 \limit_check/logic_check/i1_4_lut_adj_119 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \limit_check/logic_check/count_i31 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \limit_check/logic_check/count_i30 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_202 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI0, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40056 \limit_check/logic_check/i1_4_lut_adj_88 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40057 \limit_check/logic_check/i2_3_lut_4_lut_adj_128 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0007 \limit_check/logic_check/state_FSM_i3 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40056 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0EC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40057 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module limit_check_logic_check_SLICE_204 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40058 \limit_check/logic_check/i1_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40059 \limit_check/logic_check/i1_4_lut_adj_87 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \limit_check/logic_check/state_FSM_i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \limit_check/logic_check/state_FSM_i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40058 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4454) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40059 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module limit_check_logic_check_SLICE_205 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40060 \limit_check/logic_check/i1296_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40061 \limit_check/logic_check/i1297_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \limit_check/logic_check/state_FSM_i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40060 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7070) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40061 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFAEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_SLICE_206 ( input D1, C1, B1, A1, 
    A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, CLK_NOTIN, DI0_dly, CLK_dly, LSR_dly;

  lut40062 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_153 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4 \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/i13814 ( .A(A0), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect_i_747 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40062 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF700) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module limit_check_logic_check_SLICE_207 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M1, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut40063 \limit_check/logic_check/i1_3_lut_adj_129 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40064 \limit_check/logic_check/i1_4_lut_adj_122 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \limit_check/logic_check/laser_pulse_d1_109 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \limit_check/logic_check/pulse_lower_limit_fail_116 ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40063 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0404) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40064 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hECA8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module limit_check_logic_check_SLICE_208 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI0, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40065 \limit_check/logic_check/i1_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40064 \limit_check/logic_check/i1_4_lut_adj_123 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \limit_check/logic_check/pulse_upper_limit_fail_117 ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40065 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module limit_check_logic_check_SLICE_257 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI0, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40066 \limit_check/logic_check/i1_4_lut_adj_125 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40064 \limit_check/logic_check/i1_4_lut_adj_124 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \limit_check/logic_check/rate_lower_limit_fail_118 ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40066 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h88A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_271 ( input M1, M0, CE, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40067 i1( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i27 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i26 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40067 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_272 ( input C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40023 \limit_check/logic_check/i97_2_lut_rep_337_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \limit_check/logic_check/count_31__I_0_i21_2_lut_rep_392 ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i29 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i28 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_273 ( input B1, A1, B0, A0, M1, M0, CE, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40010 \limit_check/logic_check/count_31__I_0_i31_2_lut_rep_386 ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \limit_check/logic_check/count_31__I_0_i49_2_lut_rep_378 ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i31 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i30 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_274 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI0, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40065 \limit_check/logic_check/i1_3_lut_4_lut_adj_126 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40068 \limit_check/logic_check/i1_4_lut_adj_112 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \limit_check/logic_check/rate_upper_limit_fail_119 ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40068 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF8A8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_275
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40069 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40070 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_131 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/reset_bus_i_758 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40069 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF04) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40070 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDCCC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_276 ( input C1, B1, A1, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, LSR_NOTIN, DI0_dly, CLK_dly, LSR_dly;

  lut40071 \limit_check/logic_check/count_31__I_0_i22_3_lut_3_lut ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 \reset_generator/clk_d2_I_0_1_lut ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0018 \reset_generator/clk_d2_19 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40071 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD4D4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_277 ( input C1, B1, A1, B0, A0, M1, M0, LSR, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, LSR_NOTIN, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40072 \limit_check/logic_check/i13377_2_lut_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40073 \reset_generator/in_d2_I_0_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0018 \reset_generator/in_d2_21 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre0018 \reset_generator/in_d1_20 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40072 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF6F6) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40073 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h9999) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_278 ( input B1, A1, B0, A0, M0, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, LSR_NOTIN, M0_dly, CLK_dly, LSR_dly;

  lut40073 
    \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d2_I_0_2_lut ( 
    .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40073 
    \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d2_I_0_2_lut ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0018 \reset_generator/in_d3_22 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_279 ( input B1, A1, B0, A0, M0, CE, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, LSR_NOTIN, M0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40074 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9043_2_lut 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40053 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i12144_2_lut 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0018 \reset_generator/out_n_23 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40074 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_280 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, CE, CLK, output 
    F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  lut40075 \i2c_slave_top/registers/i13323_2_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40019 \i2c_slave_top/registers/i10_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0004 \adc_control/adc_convert_81 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40075 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFCA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_281 ( input B1, A1, B0, A0, M1, M0, CE, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40009 \i2c_slave_top/registers/i1_2_lut_rep_454 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40074 \adc_control/i1_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/static_control_i3 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/static_control_i2 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_282 ( input A1, A0, M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut4 static_control_9__I_0_1_lut( .A(A1), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 static_control_8__I_0_1_lut( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/static_control_i5 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/static_control_i4 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_283 ( input A1, A0, M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut4 static_control_6__I_0_1_lut( .A(A1), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 static_control_5__I_0_1_lut( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/static_control_i7 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/static_control_i6 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_284 ( input A1, A0, M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut4 static_control_4__I_0_1_lut( .A(A1), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 static_control_3__I_0_1_lut( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/static_control_i9 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/static_control_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_285 ( input A1, A0, M0, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut4 static_control_7__I_0_1_lut( .A(A1), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 static_control_2__I_0_1_lut( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/stop_detect_i_752 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_286 ( input C1, B1, A1, D0, C0, B0, A0, 
    M1, FXB, FXA, output OFX0, F1, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_286/i2c_slave_top/registers/rate_upper_limit_15__bdd_4_lut_4_lut_H0 
         ;

  lut40076 \i2c_slave_top/registers/mux_619_i8_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40077 \i2c_slave_top/registers/rate_upper_limit_15__bdd_4_lut_4_lut ( 
    .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_286/i2c_slave_top/registers/rate_upper_limit_15__bdd_4_lut_4_lut_H0 )
    );
  selmux20078 \i2c_slave_top/registers/SLICE_286_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_286/i2c_slave_top/registers/rate_upper_limit_15__bdd_4_lut_4_lut_H0 )
    , .Z(OFX0));
  selmux2 \i2c_slave_top/registers/SLICE_286_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40076 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40077 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7430) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module selmux20078 ( input D0, output Z );

  BUFBA INST1( .A(D0), .Z(Z));
endmodule

module i2c_slave_top_registers_SLICE_287 ( input C1, B1, A1, D0, C0, B0, A0, 
    M1, FXB, FXA, output OFX0, F1, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_287/i2c_slave_top/registers/rate_upper_limit_14__bdd_4_lut_4_lut_H0 
         ;

  lut40076 \i2c_slave_top/registers/mux_619_i7_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40077 \i2c_slave_top/registers/rate_upper_limit_14__bdd_4_lut_4_lut ( 
    .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_287/i2c_slave_top/registers/rate_upper_limit_14__bdd_4_lut_4_lut_H0 )
    );
  selmux20078 \i2c_slave_top/registers/SLICE_287_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_287/i2c_slave_top/registers/rate_upper_limit_14__bdd_4_lut_4_lut_H0 )
    , .Z(OFX0));
  selmux2 \i2c_slave_top/registers/SLICE_287_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_288 ( input C1, B1, A1, D0, C0, B0, A0, 
    M1, FXB, FXA, output OFX0, F1, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_288/i2c_slave_top/registers/rate_upper_limit_11__bdd_4_lut_4_lut_H0 
         ;

  lut40076 \i2c_slave_top/registers/mux_619_i4_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40077 \i2c_slave_top/registers/rate_upper_limit_11__bdd_4_lut_4_lut ( 
    .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_288/i2c_slave_top/registers/rate_upper_limit_11__bdd_4_lut_4_lut_H0 )
    );
  selmux20078 \i2c_slave_top/registers/SLICE_288_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_288/i2c_slave_top/registers/rate_upper_limit_11__bdd_4_lut_4_lut_H0 )
    , .Z(OFX0));
  selmux2 \i2c_slave_top/registers/SLICE_288_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_289 ( input C1, B1, A1, D0, C0, B0, A0, 
    M1, FXB, FXA, output OFX0, F1, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_289/i2c_slave_top/registers/rate_upper_limit_8__bdd_4_lut_4_lut_H0 
         ;

  lut40076 \i2c_slave_top/registers/mux_619_i1_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40077 \i2c_slave_top/registers/rate_upper_limit_8__bdd_4_lut_4_lut ( 
    .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_289/i2c_slave_top/registers/rate_upper_limit_8__bdd_4_lut_4_lut_H0 )
    );
  selmux20078 \i2c_slave_top/registers/SLICE_289_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_289/i2c_slave_top/registers/rate_upper_limit_8__bdd_4_lut_4_lut_H0 )
    , .Z(OFX0));
  selmux2 \i2c_slave_top/registers/SLICE_289_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_290 ( input C1, B1, A1, D0, C0, B0, A0, 
    M1, FXB, FXA, output OFX0, F1, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_290/i2c_slave_top/registers/rate_upper_limit_13__bdd_4_lut_4_lut_H0 
         ;

  lut40076 \i2c_slave_top/registers/mux_619_i6_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40077 \i2c_slave_top/registers/rate_upper_limit_13__bdd_4_lut_4_lut ( 
    .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_290/i2c_slave_top/registers/rate_upper_limit_13__bdd_4_lut_4_lut_H0 )
    );
  selmux20078 \i2c_slave_top/registers/SLICE_290_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_290/i2c_slave_top/registers/rate_upper_limit_13__bdd_4_lut_4_lut_H0 )
    , .Z(OFX0));
  selmux2 \i2c_slave_top/registers/SLICE_290_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_291 ( input C1, B1, A1, D0, C0, B0, A0, 
    M1, FXB, FXA, output OFX0, F1, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_291/i2c_slave_top/registers/rate_upper_limit_12__bdd_4_lut_4_lut_H0 
         ;

  lut40076 \i2c_slave_top/registers/mux_619_i5_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40077 \i2c_slave_top/registers/rate_upper_limit_12__bdd_4_lut_4_lut ( 
    .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_291/i2c_slave_top/registers/rate_upper_limit_12__bdd_4_lut_4_lut_H0 )
    );
  selmux20078 \i2c_slave_top/registers/SLICE_291_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_291/i2c_slave_top/registers/rate_upper_limit_12__bdd_4_lut_4_lut_H0 )
    , .Z(OFX0));
  selmux2 \i2c_slave_top/registers/SLICE_291_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_control_i13569_SLICE_292 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, 
    output OFX0 );
  wire   \adc_control/i13569/SLICE_292/adc_control/i13569/SLICE_292_K1_H1 , 
         \adc_control/i13569/SLICE_292/adc_control/i13569/GATE_H0 ;

  lut40079 \adc_control/i13569/SLICE_292_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\adc_control/i13569/SLICE_292/adc_control/i13569/SLICE_292_K1_H1 ));
  lut40080 \adc_control/i13569/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\adc_control/i13569/SLICE_292/adc_control/i13569/GATE_H0 ));
  selmux2 \adc_control/i13569/SLICE_292_K0K1MUX ( 
    .D0(\adc_control/i13569/SLICE_292/adc_control/i13569/GATE_H0 ), 
    .D1(\adc_control/i13569/SLICE_292/adc_control/i13569/SLICE_292_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40079 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40080 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1101) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_i44_SLICE_293 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, M0, output OFX0 );
  wire   
         \i2c_slave_top/registers/i44/SLICE_293/i2c_slave_top/registers/i44/SLICE_293_K1_H1 
         , 
         \i2c_slave_top/registers/i44/SLICE_293/i2c_slave_top/registers/i44/GATE_H0 
         ;

  lut40081 \i2c_slave_top/registers/i44/SLICE_293_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\i2c_slave_top/registers/i44/SLICE_293/i2c_slave_top/registers/i44/SLICE_293_K1_H1 )
    );
  lut40082 \i2c_slave_top/registers/i44/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\i2c_slave_top/registers/i44/SLICE_293/i2c_slave_top/registers/i44/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i44/SLICE_293_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i44/SLICE_293/i2c_slave_top/registers/i44/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i44/SLICE_293/i2c_slave_top/registers/i44/SLICE_293_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40081 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1011) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40082 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1504) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_i130_SLICE_294 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, M0, output OFX0 );
  wire   
         \i2c_slave_top/registers/i130/SLICE_294/i2c_slave_top/registers/i130/SLICE_294_K1_H1 
         , 
         \i2c_slave_top/registers/i130/SLICE_294/i2c_slave_top/registers/i130/GATE_H0 
         ;

  lut40083 \i2c_slave_top/registers/i130/SLICE_294_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\i2c_slave_top/registers/i130/SLICE_294/i2c_slave_top/registers/i130/SLICE_294_K1_H1 )
    );
  lut40084 \i2c_slave_top/registers/i130/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\i2c_slave_top/registers/i130/SLICE_294/i2c_slave_top/registers/i130/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i130/SLICE_294_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i130/SLICE_294/i2c_slave_top/registers/i130/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i130/SLICE_294/i2c_slave_top/registers/i130/SLICE_294_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40083 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1110) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40084 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_i13038_SLICE_295 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13038/SLICE_295/i2c_slave_top/registers/i13038/SLICE_295_K1_H1 
         , 
         \i2c_slave_top/registers/i13038/SLICE_295/i2c_slave_top/registers/i13038/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/i13038/SLICE_295_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13038/SLICE_295/i2c_slave_top/registers/i13038/SLICE_295_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13038/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13038/SLICE_295/i2c_slave_top/registers/i13038/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13038/SLICE_295_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13038/SLICE_295/i2c_slave_top/registers/i13038/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13038/SLICE_295/i2c_slave_top/registers/i13038/SLICE_295_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i13038/SLICE_295_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13041_SLICE_296 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13041/SLICE_296/i2c_slave_top/registers/i13041/SLICE_296_K1_H1 
         , 
         \i2c_slave_top/registers/i13041/SLICE_296/i2c_slave_top/registers/i13041/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/i13041/SLICE_296_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13041/SLICE_296/i2c_slave_top/registers/i13041/SLICE_296_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13041/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13041/SLICE_296/i2c_slave_top/registers/i13041/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13041/SLICE_296_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13041/SLICE_296/i2c_slave_top/registers/i13041/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13041/SLICE_296/i2c_slave_top/registers/i13041/SLICE_296_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i13041/SLICE_296_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_672_i8_SLICE_297 ( input C1, B1, A1, C0, B0, 
    A0, M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_672_i8/SLICE_297/i2c_slave_top/registers/mux_672_i8/SLICE_297_K1_H1 
         , 
         \i2c_slave_top/registers/mux_672_i8/SLICE_297/i2c_slave_top/registers/mux_672_i8/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/mux_672_i8/SLICE_297_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_672_i8/SLICE_297/i2c_slave_top/registers/mux_672_i8/SLICE_297_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/mux_672_i8/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_672_i8/SLICE_297/i2c_slave_top/registers/mux_672_i8/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_672_i8/SLICE_297_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_672_i8/SLICE_297/i2c_slave_top/registers/mux_672_i8/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_672_i8/SLICE_297/i2c_slave_top/registers/mux_672_i8/SLICE_297_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_672_i7_SLICE_298 ( input C1, B1, A1, C0, B0, 
    A0, M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_672_i7/SLICE_298/i2c_slave_top/registers/mux_672_i7/SLICE_298_K1_H1 
         , 
         \i2c_slave_top/registers/mux_672_i7/SLICE_298/i2c_slave_top/registers/mux_672_i7/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/mux_672_i7/SLICE_298_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_672_i7/SLICE_298/i2c_slave_top/registers/mux_672_i7/SLICE_298_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/mux_672_i7/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_672_i7/SLICE_298/i2c_slave_top/registers/mux_672_i7/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_672_i7/SLICE_298_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_672_i7/SLICE_298/i2c_slave_top/registers/mux_672_i7/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_672_i7/SLICE_298/i2c_slave_top/registers/mux_672_i7/SLICE_298_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_672_i6_SLICE_299 ( input C1, B1, A1, C0, B0, 
    A0, M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_672_i6/SLICE_299/i2c_slave_top/registers/mux_672_i6/SLICE_299_K1_H1 
         , 
         \i2c_slave_top/registers/mux_672_i6/SLICE_299/i2c_slave_top/registers/mux_672_i6/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/mux_672_i6/SLICE_299_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_672_i6/SLICE_299/i2c_slave_top/registers/mux_672_i6/SLICE_299_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/mux_672_i6/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_672_i6/SLICE_299/i2c_slave_top/registers/mux_672_i6/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_672_i6/SLICE_299_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_672_i6/SLICE_299/i2c_slave_top/registers/mux_672_i6/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_672_i6/SLICE_299/i2c_slave_top/registers/mux_672_i6/SLICE_299_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_672_i5_SLICE_300 ( input C1, B1, A1, C0, B0, 
    A0, M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_672_i5/SLICE_300/i2c_slave_top/registers/mux_672_i5/SLICE_300_K1_H1 
         , 
         \i2c_slave_top/registers/mux_672_i5/SLICE_300/i2c_slave_top/registers/mux_672_i5/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/mux_672_i5/SLICE_300_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_672_i5/SLICE_300/i2c_slave_top/registers/mux_672_i5/SLICE_300_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/mux_672_i5/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_672_i5/SLICE_300/i2c_slave_top/registers/mux_672_i5/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_672_i5/SLICE_300_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_672_i5/SLICE_300/i2c_slave_top/registers/mux_672_i5/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_672_i5/SLICE_300/i2c_slave_top/registers/mux_672_i5/SLICE_300_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_672_i4_SLICE_301 ( input C1, B1, A1, C0, B0, 
    A0, M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_672_i4/SLICE_301/i2c_slave_top/registers/mux_672_i4/SLICE_301_K1_H1 
         , 
         \i2c_slave_top/registers/mux_672_i4/SLICE_301/i2c_slave_top/registers/mux_672_i4/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/mux_672_i4/SLICE_301_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_672_i4/SLICE_301/i2c_slave_top/registers/mux_672_i4/SLICE_301_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/mux_672_i4/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_672_i4/SLICE_301/i2c_slave_top/registers/mux_672_i4/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_672_i4/SLICE_301_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_672_i4/SLICE_301/i2c_slave_top/registers/mux_672_i4/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_672_i4/SLICE_301/i2c_slave_top/registers/mux_672_i4/SLICE_301_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_672_i3_SLICE_302 ( input C1, B1, A1, C0, B0, 
    A0, M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_672_i3/SLICE_302/i2c_slave_top/registers/mux_672_i3/SLICE_302_K1_H1 
         , 
         \i2c_slave_top/registers/mux_672_i3/SLICE_302/i2c_slave_top/registers/mux_672_i3/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/mux_672_i3/SLICE_302_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_672_i3/SLICE_302/i2c_slave_top/registers/mux_672_i3/SLICE_302_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/mux_672_i3/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_672_i3/SLICE_302/i2c_slave_top/registers/mux_672_i3/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_672_i3/SLICE_302_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_672_i3/SLICE_302/i2c_slave_top/registers/mux_672_i3/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_672_i3/SLICE_302/i2c_slave_top/registers/mux_672_i3/SLICE_302_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_672_i2_SLICE_303 ( input C1, B1, A1, C0, B0, 
    A0, M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_672_i2/SLICE_303/i2c_slave_top/registers/mux_672_i2/SLICE_303_K1_H1 
         , 
         \i2c_slave_top/registers/mux_672_i2/SLICE_303/i2c_slave_top/registers/mux_672_i2/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/mux_672_i2/SLICE_303_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_672_i2/SLICE_303/i2c_slave_top/registers/mux_672_i2/SLICE_303_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/mux_672_i2/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_672_i2/SLICE_303/i2c_slave_top/registers/mux_672_i2/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_672_i2/SLICE_303_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_672_i2/SLICE_303/i2c_slave_top/registers/mux_672_i2/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_672_i2/SLICE_303/i2c_slave_top/registers/mux_672_i2/SLICE_303_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_672_i1_SLICE_304 ( input C1, B1, A1, C0, B0, 
    A0, M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_672_i1/SLICE_304/i2c_slave_top/registers/mux_672_i1/SLICE_304_K1_H1 
         , 
         \i2c_slave_top/registers/mux_672_i1/SLICE_304/i2c_slave_top/registers/mux_672_i1/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/mux_672_i1/SLICE_304_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_672_i1/SLICE_304/i2c_slave_top/registers/mux_672_i1/SLICE_304_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/mux_672_i1/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_672_i1/SLICE_304/i2c_slave_top/registers/mux_672_i1/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_672_i1/SLICE_304_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_672_i1/SLICE_304/i2c_slave_top/registers/mux_672_i1/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_672_i1/SLICE_304/i2c_slave_top/registers/mux_672_i1/SLICE_304_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i12995_SLICE_305 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i12995/SLICE_305/i2c_slave_top/registers/i12995/SLICE_305_K1_H1 
         , 
         \i2c_slave_top/registers/i12995/SLICE_305/i2c_slave_top/registers/i12995/GATE_H0 
         ;

  lut40085 \i2c_slave_top/registers/i12995/SLICE_305_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i12995/SLICE_305/i2c_slave_top/registers/i12995/SLICE_305_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i12995/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i12995/SLICE_305/i2c_slave_top/registers/i12995/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i12995/SLICE_305_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i12995/SLICE_305/i2c_slave_top/registers/i12995/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i12995/SLICE_305/i2c_slave_top/registers/i12995/SLICE_305_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i12995/SLICE_305_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40085 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE4E4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_i12999_SLICE_306 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i12999/SLICE_306/i2c_slave_top/registers/i12999/SLICE_306_K1_H1 
         , 
         \i2c_slave_top/registers/i12999/SLICE_306/i2c_slave_top/registers/i12999/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/i12999/SLICE_306_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i12999/SLICE_306/i2c_slave_top/registers/i12999/SLICE_306_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i12999/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i12999/SLICE_306/i2c_slave_top/registers/i12999/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i12999/SLICE_306_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i12999/SLICE_306/i2c_slave_top/registers/i12999/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i12999/SLICE_306/i2c_slave_top/registers/i12999/SLICE_306_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i12999/SLICE_306_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13002_SLICE_307 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13002/SLICE_307/i2c_slave_top/registers/i13002/SLICE_307_K1_H1 
         , 
         \i2c_slave_top/registers/i13002/SLICE_307/i2c_slave_top/registers/i13002/GATE_H0 
         ;

  lut40085 \i2c_slave_top/registers/i13002/SLICE_307_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13002/SLICE_307/i2c_slave_top/registers/i13002/SLICE_307_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13002/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13002/SLICE_307/i2c_slave_top/registers/i13002/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13002/SLICE_307_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13002/SLICE_307/i2c_slave_top/registers/i13002/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13002/SLICE_307/i2c_slave_top/registers/i13002/SLICE_307_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i13002/SLICE_307_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13005_SLICE_308 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13005/SLICE_308/i2c_slave_top/registers/i13005/SLICE_308_K1_H1 
         , 
         \i2c_slave_top/registers/i13005/SLICE_308/i2c_slave_top/registers/i13005/GATE_H0 
         ;

  lut40085 \i2c_slave_top/registers/i13005/SLICE_308_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13005/SLICE_308/i2c_slave_top/registers/i13005/SLICE_308_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13005/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13005/SLICE_308/i2c_slave_top/registers/i13005/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13005/SLICE_308_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13005/SLICE_308/i2c_slave_top/registers/i13005/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13005/SLICE_308/i2c_slave_top/registers/i13005/SLICE_308_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i13005/SLICE_308_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13023_SLICE_309 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13023/SLICE_309/i2c_slave_top/registers/i13023/SLICE_309_K1_H1 
         , 
         \i2c_slave_top/registers/i13023/SLICE_309/i2c_slave_top/registers/i13023/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/i13023/SLICE_309_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13023/SLICE_309/i2c_slave_top/registers/i13023/SLICE_309_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13023/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13023/SLICE_309/i2c_slave_top/registers/i13023/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13023/SLICE_309_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13023/SLICE_309/i2c_slave_top/registers/i13023/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13023/SLICE_309/i2c_slave_top/registers/i13023/SLICE_309_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i13023/SLICE_309_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13026_SLICE_310 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13026/SLICE_310/i2c_slave_top/registers/i13026/SLICE_310_K1_H1 
         , 
         \i2c_slave_top/registers/i13026/SLICE_310/i2c_slave_top/registers/i13026/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/i13026/SLICE_310_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13026/SLICE_310/i2c_slave_top/registers/i13026/SLICE_310_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13026/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13026/SLICE_310/i2c_slave_top/registers/i13026/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13026/SLICE_310_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13026/SLICE_310/i2c_slave_top/registers/i13026/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13026/SLICE_310/i2c_slave_top/registers/i13026/SLICE_310_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i13026/SLICE_310_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13029_SLICE_311 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13029/SLICE_311/i2c_slave_top/registers/i13029/SLICE_311_K1_H1 
         , 
         \i2c_slave_top/registers/i13029/SLICE_311/i2c_slave_top/registers/i13029/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/i13029/SLICE_311_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13029/SLICE_311/i2c_slave_top/registers/i13029/SLICE_311_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13029/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13029/SLICE_311/i2c_slave_top/registers/i13029/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13029/SLICE_311_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13029/SLICE_311/i2c_slave_top/registers/i13029/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13029/SLICE_311/i2c_slave_top/registers/i13029/SLICE_311_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i13029/SLICE_311_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13032_SLICE_312 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13032/SLICE_312/i2c_slave_top/registers/i13032/SLICE_312_K1_H1 
         , 
         \i2c_slave_top/registers/i13032/SLICE_312/i2c_slave_top/registers/i13032/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/i13032/SLICE_312_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13032/SLICE_312/i2c_slave_top/registers/i13032/SLICE_312_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13032/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13032/SLICE_312/i2c_slave_top/registers/i13032/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13032/SLICE_312_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13032/SLICE_312/i2c_slave_top/registers/i13032/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13032/SLICE_312/i2c_slave_top/registers/i13032/SLICE_312_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i13032/SLICE_312_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13040_SLICE_313 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13040/SLICE_313/i2c_slave_top/registers/i13040/SLICE_313_K1_H1 
         , 
         \i2c_slave_top/registers/i13040/SLICE_313/i2c_slave_top/registers/i13040/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/i13040/SLICE_313_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13040/SLICE_313/i2c_slave_top/registers/i13040/SLICE_313_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13040/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13040/SLICE_313/i2c_slave_top/registers/i13040/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13040/SLICE_313_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13040/SLICE_313/i2c_slave_top/registers/i13040/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13040/SLICE_313/i2c_slave_top/registers/i13040/SLICE_313_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13486_SLICE_314 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13486/SLICE_314/i2c_slave_top/registers/i13486/SLICE_314_K1_H1 
         , 
         \i2c_slave_top/registers/i13486/SLICE_314/i2c_slave_top/registers/i13486/GATE_H0 
         ;

  lut40086 \i2c_slave_top/registers/i13486/SLICE_314_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13486/SLICE_314/i2c_slave_top/registers/i13486/SLICE_314_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40086 \i2c_slave_top/registers/i13486/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13486/SLICE_314/i2c_slave_top/registers/i13486/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13486/SLICE_314_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13486/SLICE_314/i2c_slave_top/registers/i13486/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13486/SLICE_314/i2c_slave_top/registers/i13486/SLICE_314_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40086 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE4E4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_i13037_SLICE_315 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13037/SLICE_315/i2c_slave_top/registers/i13037/SLICE_315_K1_H1 
         , 
         \i2c_slave_top/registers/i13037/SLICE_315/i2c_slave_top/registers/i13037/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/i13037/SLICE_315_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13037/SLICE_315/i2c_slave_top/registers/i13037/SLICE_315_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13037/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13037/SLICE_315/i2c_slave_top/registers/i13037/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13037/SLICE_315_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13037/SLICE_315/i2c_slave_top/registers/i13037/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13037/SLICE_315/i2c_slave_top/registers/i13037/SLICE_315_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13034_SLICE_316 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13034/SLICE_316/i2c_slave_top/registers/i13034/SLICE_316_K1_H1 
         , 
         \i2c_slave_top/registers/i13034/SLICE_316/i2c_slave_top/registers/i13034/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/i13034/SLICE_316_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13034/SLICE_316/i2c_slave_top/registers/i13034/SLICE_316_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13034/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13034/SLICE_316/i2c_slave_top/registers/i13034/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13034/SLICE_316_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13034/SLICE_316/i2c_slave_top/registers/i13034/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13034/SLICE_316/i2c_slave_top/registers/i13034/SLICE_316_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13482_SLICE_317 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13482/SLICE_317/i2c_slave_top/registers/i13482/SLICE_317_K1_H1 
         , 
         \i2c_slave_top/registers/i13482/SLICE_317/i2c_slave_top/registers/i13482/GATE_H0 
         ;

  lut40086 \i2c_slave_top/registers/i13482/SLICE_317_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13482/SLICE_317/i2c_slave_top/registers/i13482/SLICE_317_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40086 \i2c_slave_top/registers/i13482/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13482/SLICE_317/i2c_slave_top/registers/i13482/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13482/SLICE_317_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13482/SLICE_317/i2c_slave_top/registers/i13482/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13482/SLICE_317/i2c_slave_top/registers/i13482/SLICE_317_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13031_SLICE_318 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13031/SLICE_318/i2c_slave_top/registers/i13031/SLICE_318_K1_H1 
         , 
         \i2c_slave_top/registers/i13031/SLICE_318/i2c_slave_top/registers/i13031/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/i13031/SLICE_318_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13031/SLICE_318/i2c_slave_top/registers/i13031/SLICE_318_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13031/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13031/SLICE_318/i2c_slave_top/registers/i13031/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13031/SLICE_318_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13031/SLICE_318/i2c_slave_top/registers/i13031/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13031/SLICE_318/i2c_slave_top/registers/i13031/SLICE_318_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13478_SLICE_319 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13478/SLICE_319/i2c_slave_top/registers/i13478/SLICE_319_K1_H1 
         , 
         \i2c_slave_top/registers/i13478/SLICE_319/i2c_slave_top/registers/i13478/GATE_H0 
         ;

  lut40086 \i2c_slave_top/registers/i13478/SLICE_319_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13478/SLICE_319/i2c_slave_top/registers/i13478/SLICE_319_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40086 \i2c_slave_top/registers/i13478/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13478/SLICE_319/i2c_slave_top/registers/i13478/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13478/SLICE_319_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13478/SLICE_319/i2c_slave_top/registers/i13478/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13478/SLICE_319/i2c_slave_top/registers/i13478/SLICE_319_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13473_SLICE_320 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13473/SLICE_320/i2c_slave_top/registers/i13473/SLICE_320_K1_H1 
         , 
         \i2c_slave_top/registers/i13473/SLICE_320/i2c_slave_top/registers/i13473/GATE_H0 
         ;

  lut40086 \i2c_slave_top/registers/i13473/SLICE_320_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13473/SLICE_320/i2c_slave_top/registers/i13473/SLICE_320_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40086 \i2c_slave_top/registers/i13473/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13473/SLICE_320/i2c_slave_top/registers/i13473/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13473/SLICE_320_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13473/SLICE_320/i2c_slave_top/registers/i13473/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13473/SLICE_320/i2c_slave_top/registers/i13473/SLICE_320_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13035_SLICE_321 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13035/SLICE_321/i2c_slave_top/registers/i13035/SLICE_321_K1_H1 
         , 
         \i2c_slave_top/registers/i13035/SLICE_321/i2c_slave_top/registers/i13035/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/i13035/SLICE_321_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13035/SLICE_321/i2c_slave_top/registers/i13035/SLICE_321_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13035/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13035/SLICE_321/i2c_slave_top/registers/i13035/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13035/SLICE_321_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13035/SLICE_321/i2c_slave_top/registers/i13035/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13035/SLICE_321/i2c_slave_top/registers/i13035/SLICE_321_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i13035/SLICE_321_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13028_SLICE_322 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13028/SLICE_322/i2c_slave_top/registers/i13028/SLICE_322_K1_H1 
         , 
         \i2c_slave_top/registers/i13028/SLICE_322/i2c_slave_top/registers/i13028/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/i13028/SLICE_322_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13028/SLICE_322/i2c_slave_top/registers/i13028/SLICE_322_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13028/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13028/SLICE_322/i2c_slave_top/registers/i13028/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13028/SLICE_322_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13028/SLICE_322/i2c_slave_top/registers/i13028/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13028/SLICE_322/i2c_slave_top/registers/i13028/SLICE_322_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13025_SLICE_323 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13025/SLICE_323/i2c_slave_top/registers/i13025/SLICE_323_K1_H1 
         , 
         \i2c_slave_top/registers/i13025/SLICE_323/i2c_slave_top/registers/i13025/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/i13025/SLICE_323_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13025/SLICE_323/i2c_slave_top/registers/i13025/SLICE_323_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13025/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13025/SLICE_323/i2c_slave_top/registers/i13025/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13025/SLICE_323_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13025/SLICE_323/i2c_slave_top/registers/i13025/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13025/SLICE_323/i2c_slave_top/registers/i13025/SLICE_323_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13467_SLICE_324 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13467/SLICE_324/i2c_slave_top/registers/i13467/SLICE_324_K1_H1 
         , 
         \i2c_slave_top/registers/i13467/SLICE_324/i2c_slave_top/registers/i13467/GATE_H0 
         ;

  lut40086 \i2c_slave_top/registers/i13467/SLICE_324_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13467/SLICE_324/i2c_slave_top/registers/i13467/SLICE_324_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40086 \i2c_slave_top/registers/i13467/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13467/SLICE_324/i2c_slave_top/registers/i13467/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13467/SLICE_324_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13467/SLICE_324/i2c_slave_top/registers/i13467/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13467/SLICE_324/i2c_slave_top/registers/i13467/SLICE_324_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13022_SLICE_325 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13022/SLICE_325/i2c_slave_top/registers/i13022/SLICE_325_K1_H1 
         , 
         \i2c_slave_top/registers/i13022/SLICE_325/i2c_slave_top/registers/i13022/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/i13022/SLICE_325_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13022/SLICE_325/i2c_slave_top/registers/i13022/SLICE_325_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13022/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13022/SLICE_325/i2c_slave_top/registers/i13022/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13022/SLICE_325_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13022/SLICE_325/i2c_slave_top/registers/i13022/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13022/SLICE_325/i2c_slave_top/registers/i13022/SLICE_325_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13387_SLICE_326 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13387/SLICE_326/i2c_slave_top/registers/i13387/SLICE_326_K1_H1 
         , 
         \i2c_slave_top/registers/i13387/SLICE_326/i2c_slave_top/registers/i13387/GATE_H0 
         ;

  lut40086 \i2c_slave_top/registers/i13387/SLICE_326_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13387/SLICE_326/i2c_slave_top/registers/i13387/SLICE_326_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40086 \i2c_slave_top/registers/i13387/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13387/SLICE_326/i2c_slave_top/registers/i13387/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13387/SLICE_326_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13387/SLICE_326/i2c_slave_top/registers/i13387/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13387/SLICE_326/i2c_slave_top/registers/i13387/SLICE_326_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13019_SLICE_327 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13019/SLICE_327/i2c_slave_top/registers/i13019/SLICE_327_K1_H1 
         , 
         \i2c_slave_top/registers/i13019/SLICE_327/i2c_slave_top/registers/i13019/GATE_H0 
         ;

  lut40085 \i2c_slave_top/registers/i13019/SLICE_327_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13019/SLICE_327/i2c_slave_top/registers/i13019/SLICE_327_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13019/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13019/SLICE_327/i2c_slave_top/registers/i13019/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13019/SLICE_327_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13019/SLICE_327/i2c_slave_top/registers/i13019/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13019/SLICE_327/i2c_slave_top/registers/i13019/SLICE_327_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i13019/SLICE_327_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13016_SLICE_328 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13016/SLICE_328/i2c_slave_top/registers/i13016/SLICE_328_K1_H1 
         , 
         \i2c_slave_top/registers/i13016/SLICE_328/i2c_slave_top/registers/i13016/GATE_H0 
         ;

  lut40085 \i2c_slave_top/registers/i13016/SLICE_328_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13016/SLICE_328/i2c_slave_top/registers/i13016/SLICE_328_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13016/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13016/SLICE_328/i2c_slave_top/registers/i13016/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13016/SLICE_328_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13016/SLICE_328/i2c_slave_top/registers/i13016/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13016/SLICE_328/i2c_slave_top/registers/i13016/SLICE_328_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i13016/SLICE_328_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13013_SLICE_329 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13013/SLICE_329/i2c_slave_top/registers/i13013/SLICE_329_K1_H1 
         , 
         \i2c_slave_top/registers/i13013/SLICE_329/i2c_slave_top/registers/i13013/GATE_H0 
         ;

  lut40085 \i2c_slave_top/registers/i13013/SLICE_329_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13013/SLICE_329/i2c_slave_top/registers/i13013/SLICE_329_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13013/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13013/SLICE_329/i2c_slave_top/registers/i13013/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13013/SLICE_329_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13013/SLICE_329/i2c_slave_top/registers/i13013/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13013/SLICE_329/i2c_slave_top/registers/i13013/SLICE_329_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i13013/SLICE_329_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13010_SLICE_330 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13010/SLICE_330/i2c_slave_top/registers/i13010/SLICE_330_K1_H1 
         , 
         \i2c_slave_top/registers/i13010/SLICE_330/i2c_slave_top/registers/i13010/GATE_H0 
         ;

  lut40085 \i2c_slave_top/registers/i13010/SLICE_330_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13010/SLICE_330/i2c_slave_top/registers/i13010/SLICE_330_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13010/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13010/SLICE_330/i2c_slave_top/registers/i13010/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13010/SLICE_330_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13010/SLICE_330/i2c_slave_top/registers/i13010/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13010/SLICE_330/i2c_slave_top/registers/i13010/SLICE_330_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i13010/SLICE_330_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13463_SLICE_331 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13463/SLICE_331/i2c_slave_top/registers/i13463/SLICE_331_K1_H1 
         , 
         \i2c_slave_top/registers/i13463/SLICE_331/i2c_slave_top/registers/i13463/GATE_H0 
         ;

  lut40086 \i2c_slave_top/registers/i13463/SLICE_331_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13463/SLICE_331/i2c_slave_top/registers/i13463/SLICE_331_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40086 \i2c_slave_top/registers/i13463/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13463/SLICE_331/i2c_slave_top/registers/i13463/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13463/SLICE_331_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13463/SLICE_331/i2c_slave_top/registers/i13463/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13463/SLICE_331/i2c_slave_top/registers/i13463/SLICE_331_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13007_SLICE_332 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13007/SLICE_332/i2c_slave_top/registers/i13007/SLICE_332_K1_H1 
         , 
         \i2c_slave_top/registers/i13007/SLICE_332/i2c_slave_top/registers/i13007/GATE_H0 
         ;

  lut40085 \i2c_slave_top/registers/i13007/SLICE_332_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13007/SLICE_332/i2c_slave_top/registers/i13007/SLICE_332_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13007/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13007/SLICE_332/i2c_slave_top/registers/i13007/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13007/SLICE_332_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13007/SLICE_332/i2c_slave_top/registers/i13007/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13007/SLICE_332/i2c_slave_top/registers/i13007/SLICE_332_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i13007/SLICE_332_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13004_SLICE_333 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13004/SLICE_333/i2c_slave_top/registers/i13004/SLICE_333_K1_H1 
         , 
         \i2c_slave_top/registers/i13004/SLICE_333/i2c_slave_top/registers/i13004/GATE_H0 
         ;

  lut40085 \i2c_slave_top/registers/i13004/SLICE_333_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13004/SLICE_333/i2c_slave_top/registers/i13004/SLICE_333_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13004/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13004/SLICE_333/i2c_slave_top/registers/i13004/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13004/SLICE_333_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13004/SLICE_333/i2c_slave_top/registers/i13004/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13004/SLICE_333/i2c_slave_top/registers/i13004/SLICE_333_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i13004/SLICE_333_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13001_SLICE_334 ( input C1, B1, A1, C0, B0, A0, 
    M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13001/SLICE_334/i2c_slave_top/registers/i13001/SLICE_334_K1_H1 
         , 
         \i2c_slave_top/registers/i13001/SLICE_334/i2c_slave_top/registers/i13001/GATE_H0 
         ;

  lut40085 \i2c_slave_top/registers/i13001/SLICE_334_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13001/SLICE_334/i2c_slave_top/registers/i13001/SLICE_334_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i13001/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13001/SLICE_334/i2c_slave_top/registers/i13001/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13001/SLICE_334_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13001/SLICE_334/i2c_slave_top/registers/i13001/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13001/SLICE_334/i2c_slave_top/registers/i13001/SLICE_334_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/i13001/SLICE_334_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i12998_SLICE_335 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i12998/SLICE_335/i2c_slave_top/registers/i12998/SLICE_335_K1_H1 
         , 
         \i2c_slave_top/registers/i12998/SLICE_335/i2c_slave_top/registers/i12998/GATE_H0 
         ;

  lut40024 \i2c_slave_top/registers/i12998/SLICE_335_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i12998/SLICE_335/i2c_slave_top/registers/i12998/SLICE_335_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \i2c_slave_top/registers/i12998/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i12998/SLICE_335/i2c_slave_top/registers/i12998/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i12998/SLICE_335_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i12998/SLICE_335/i2c_slave_top/registers/i12998/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i12998/SLICE_335/i2c_slave_top/registers/i12998/SLICE_335_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_i13459_SLICE_336 ( input C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/i13459/SLICE_336/i2c_slave_top/registers/i13459/SLICE_336_K1_H1 
         , 
         \i2c_slave_top/registers/i13459/SLICE_336/i2c_slave_top/registers/i13459/GATE_H0 
         ;

  lut40086 \i2c_slave_top/registers/i13459/SLICE_336_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13459/SLICE_336/i2c_slave_top/registers/i13459/SLICE_336_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40086 \i2c_slave_top/registers/i13459/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/i13459/SLICE_336/i2c_slave_top/registers/i13459/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/i13459/SLICE_336_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/i13459/SLICE_336/i2c_slave_top/registers/i13459/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/i13459/SLICE_336/i2c_slave_top/registers/i13459/SLICE_336_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module 
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_i13418_SLICE_337
   ( input C1, B1, A1, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13418/SLICE_337/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13418/SLICE_337_K1_H1 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13418/SLICE_337/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13418/GATE_H0 
         ;

  lut40087 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13418/SLICE_337_K1 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13418/SLICE_337/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13418/SLICE_337_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40088 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13418/GATE 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13418/SLICE_337/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13418/GATE_H0 )
    );
  selmux2 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13418/SLICE_337_K0K1MUX 
    ( 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13418/SLICE_337/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13418/GATE_H0 )
    , 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13418/SLICE_337/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13418/SLICE_337_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40087 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF7F7) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40088 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFBFB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module 
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_i13776_SLICE_338
   ( input C1, B1, A1, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13776/SLICE_338/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13776/SLICE_338_K1_H1 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13776/SLICE_338/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13776/GATE_H0 
         ;

  lut40089 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13776/SLICE_338_K1 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13776/SLICE_338/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13776/SLICE_338_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40090 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13776/GATE 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13776/SLICE_338/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13776/GATE_H0 )
    );
  selmux2 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13776/SLICE_338_K0K1MUX 
    ( 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13776/SLICE_338/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13776/GATE_H0 )
    , 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13776/SLICE_338/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13776/SLICE_338_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40089 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD8D8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40090 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB8B8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module 
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_i13773_SLICE_339
   ( input C1, B1, A1, B0, A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13773/SLICE_339/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13773/SLICE_339_K1_H1 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13773/SLICE_339/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13773/GATE_H0 
         ;

  lut40089 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13773/SLICE_339_K1 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13773/SLICE_339/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13773/SLICE_339_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40091 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13773/GATE 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13773/SLICE_339/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13773/GATE_H0 )
    );
  selmux2 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13773/SLICE_339_K0K1MUX 
    ( 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13773/SLICE_339/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13773/GATE_H0 )
    , 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13773/SLICE_339/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13773/SLICE_339_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13773/SLICE_339_FXMUX 
    ( .D0(FXA), .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40091 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module reset_generator_i10901_SLICE_340 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M0, output OFX0 );
  wire   
         \reset_generator/i10901/SLICE_340/reset_generator/i10901/SLICE_340_K1_H1 
         , \reset_generator/i10901/SLICE_340/reset_generator/i10901/GATE_H0 ;

  lut40092 \reset_generator/i10901/SLICE_340_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\reset_generator/i10901/SLICE_340/reset_generator/i10901/SLICE_340_K1_H1 ));
  lut40093 \reset_generator/i10901/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\reset_generator/i10901/SLICE_340/reset_generator/i10901/GATE_H0 ));
  selmux2 \reset_generator/i10901/SLICE_340_K0K1MUX ( 
    .D0(\reset_generator/i10901/SLICE_340/reset_generator/i10901/GATE_H0 ), 
    .D1(\reset_generator/i10901/SLICE_340/reset_generator/i10901/SLICE_340_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40092 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40093 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hECA0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module limit_check_logic_check_count_31__I_0_i58_SLICE_341 ( input C1, B1, A1, 
    C0, B0, A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \limit_check/logic_check/count_31__I_0_i58/SLICE_341/limit_check/logic_check/count_31__I_0_i58/SLICE_341_K1_H1 
         , 
         \limit_check/logic_check/count_31__I_0_i58/SLICE_341/limit_check/logic_check/count_31__I_0_i58/GATE_H0 
         ;

  lut40094 \limit_check/logic_check/count_31__I_0_i58/SLICE_341_K1 ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), 
    .Z(\limit_check/logic_check/count_31__I_0_i58/SLICE_341/limit_check/logic_check/count_31__I_0_i58/SLICE_341_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40094 \limit_check/logic_check/count_31__I_0_i58/GATE ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), 
    .Z(\limit_check/logic_check/count_31__I_0_i58/SLICE_341/limit_check/logic_check/count_31__I_0_i58/GATE_H0 )
    );
  selmux2 \limit_check/logic_check/count_31__I_0_i58/SLICE_341_K0K1MUX ( 
    .D0(\limit_check/logic_check/count_31__I_0_i58/SLICE_341/limit_check/logic_check/count_31__I_0_i58/GATE_H0 )
    , 
    .D1(\limit_check/logic_check/count_31__I_0_i58/SLICE_341/limit_check/logic_check/count_31__I_0_i58/SLICE_341_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \limit_check/logic_check/count_31__I_0_i58/SLICE_341_FXMUX ( 
    .D0(FXA), .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40094 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD4D4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module limit_check_logic_check_count_31__I_0_i48_SLICE_342 ( input D1, C1, B1, 
    A1, C0, B0, A0, M0, output OFX0 );
  wire   
         \limit_check/logic_check/count_31__I_0_i48/SLICE_342/limit_check/logic_check/count_31__I_0_i48/SLICE_342_K1_H1 
         , GNDI, 
         \limit_check/logic_check/count_31__I_0_i48/SLICE_342/limit_check/logic_check/count_31__I_0_i48/GATE_H0 
         ;

  lut40095 \limit_check/logic_check/count_31__I_0_i48/SLICE_342_K1 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), 
    .Z(\limit_check/logic_check/count_31__I_0_i48/SLICE_342/limit_check/logic_check/count_31__I_0_i48/SLICE_342_K1_H1 )
    );
  lut40094 \limit_check/logic_check/count_31__I_0_i48/GATE ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), 
    .Z(\limit_check/logic_check/count_31__I_0_i48/SLICE_342/limit_check/logic_check/count_31__I_0_i48/GATE_H0 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \limit_check/logic_check/count_31__I_0_i48/SLICE_342_K0K1MUX ( 
    .D0(\limit_check/logic_check/count_31__I_0_i48/SLICE_342/limit_check/logic_check/count_31__I_0_i48/GATE_H0 )
    , 
    .D1(\limit_check/logic_check/count_31__I_0_i48/SLICE_342/limit_check/logic_check/count_31__I_0_i48/SLICE_342_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40095 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF4B0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module limit_check_logic_check_count_31__I_0_i38_SLICE_343 ( input D1, C1, B1, 
    A1, C0, B0, A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   
         \limit_check/logic_check/count_31__I_0_i38/SLICE_343/limit_check/logic_check/count_31__I_0_i38/SLICE_343_K1_H1 
         , GNDI, 
         \limit_check/logic_check/count_31__I_0_i38/SLICE_343/limit_check/logic_check/count_31__I_0_i38/GATE_H0 
         ;

  lut40095 \limit_check/logic_check/count_31__I_0_i38/SLICE_343_K1 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), 
    .Z(\limit_check/logic_check/count_31__I_0_i38/SLICE_343/limit_check/logic_check/count_31__I_0_i38/SLICE_343_K1_H1 )
    );
  lut40094 \limit_check/logic_check/count_31__I_0_i38/GATE ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), 
    .Z(\limit_check/logic_check/count_31__I_0_i38/SLICE_343/limit_check/logic_check/count_31__I_0_i38/GATE_H0 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \limit_check/logic_check/count_31__I_0_i38/SLICE_343_K0K1MUX ( 
    .D0(\limit_check/logic_check/count_31__I_0_i38/SLICE_343/limit_check/logic_check/count_31__I_0_i38/GATE_H0 )
    , 
    .D1(\limit_check/logic_check/count_31__I_0_i38/SLICE_343/limit_check/logic_check/count_31__I_0_i38/SLICE_343_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \limit_check/logic_check/count_31__I_0_i38/SLICE_343_FXMUX ( 
    .D0(FXA), .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_rate_upper_limit_31__I_0_i48_SLICE_344 ( input 
    D1, C1, B1, A1, C0, B0, A0, M0, output OFX0 );
  wire   
         \limit_check/logic_check/rate_upper_limit_31__I_0_i48/SLICE_344/limit_check/logic_check/rate_upper_limit_31__I_0_i48/SLICE_344_K1_H1 
         , GNDI, 
         \limit_check/logic_check/rate_upper_limit_31__I_0_i48/SLICE_344/limit_check/logic_check/rate_upper_limit_31__I_0_i48/GATE_H0 
         ;

  lut40095 \limit_check/logic_check/rate_upper_limit_31__I_0_i48/SLICE_344_K1 
    ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\limit_check/logic_check/rate_upper_limit_31__I_0_i48/SLICE_344/limit_check/logic_check/rate_upper_limit_31__I_0_i48/SLICE_344_K1_H1 )
    );
  lut40094 \limit_check/logic_check/rate_upper_limit_31__I_0_i48/GATE ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), 
    .Z(\limit_check/logic_check/rate_upper_limit_31__I_0_i48/SLICE_344/limit_check/logic_check/rate_upper_limit_31__I_0_i48/GATE_H0 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i48/SLICE_344_K0K1MUX ( 
    .D0(\limit_check/logic_check/rate_upper_limit_31__I_0_i48/SLICE_344/limit_check/logic_check/rate_upper_limit_31__I_0_i48/GATE_H0 )
    , 
    .D1(\limit_check/logic_check/rate_upper_limit_31__I_0_i48/SLICE_344/limit_check/logic_check/rate_upper_limit_31__I_0_i48/SLICE_344_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_rate_upper_limit_31__I_0_i38_SLICE_345 ( input 
    D1, C1, B1, A1, C0, B0, A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   
         \limit_check/logic_check/rate_upper_limit_31__I_0_i38/SLICE_345/limit_check/logic_check/rate_upper_limit_31__I_0_i38/SLICE_345_K1_H1 
         , GNDI, 
         \limit_check/logic_check/rate_upper_limit_31__I_0_i38/SLICE_345/limit_check/logic_check/rate_upper_limit_31__I_0_i38/GATE_H0 
         ;

  lut40095 \limit_check/logic_check/rate_upper_limit_31__I_0_i38/SLICE_345_K1 
    ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\limit_check/logic_check/rate_upper_limit_31__I_0_i38/SLICE_345/limit_check/logic_check/rate_upper_limit_31__I_0_i38/SLICE_345_K1_H1 )
    );
  lut40094 \limit_check/logic_check/rate_upper_limit_31__I_0_i38/GATE ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), 
    .Z(\limit_check/logic_check/rate_upper_limit_31__I_0_i38/SLICE_345/limit_check/logic_check/rate_upper_limit_31__I_0_i38/GATE_H0 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i38/SLICE_345_K0K1MUX ( 
    .D0(\limit_check/logic_check/rate_upper_limit_31__I_0_i38/SLICE_345/limit_check/logic_check/rate_upper_limit_31__I_0_i38/GATE_H0 )
    , 
    .D1(\limit_check/logic_check/rate_upper_limit_31__I_0_i38/SLICE_345/limit_check/logic_check/rate_upper_limit_31__I_0_i38/SLICE_345_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i38/SLICE_345_FXMUX ( 
    .D0(FXA), .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_count_31__I_0_142_i48_SLICE_346 ( input D1, C1, 
    B1, A1, C0, B0, A0, M0, output OFX0 );
  wire   
         \limit_check/logic_check/count_31__I_0_142_i48/SLICE_346/limit_check/logic_check/count_31__I_0_142_i48/SLICE_346_K1_H1 
         , GNDI, 
         \limit_check/logic_check/count_31__I_0_142_i48/SLICE_346/limit_check/logic_check/count_31__I_0_142_i48/GATE_H0 
         ;

  lut40095 \limit_check/logic_check/count_31__I_0_142_i48/SLICE_346_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\limit_check/logic_check/count_31__I_0_142_i48/SLICE_346/limit_check/logic_check/count_31__I_0_142_i48/SLICE_346_K1_H1 )
    );
  lut40094 \limit_check/logic_check/count_31__I_0_142_i48/GATE ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), 
    .Z(\limit_check/logic_check/count_31__I_0_142_i48/SLICE_346/limit_check/logic_check/count_31__I_0_142_i48/GATE_H0 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \limit_check/logic_check/count_31__I_0_142_i48/SLICE_346_K0K1MUX ( 
    .D0(\limit_check/logic_check/count_31__I_0_142_i48/SLICE_346/limit_check/logic_check/count_31__I_0_142_i48/GATE_H0 )
    , 
    .D1(\limit_check/logic_check/count_31__I_0_142_i48/SLICE_346/limit_check/logic_check/count_31__I_0_142_i48/SLICE_346_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_count_31__I_0_142_i38_SLICE_347 ( input D1, C1, 
    B1, A1, C0, B0, A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   
         \limit_check/logic_check/count_31__I_0_142_i38/SLICE_347/limit_check/logic_check/count_31__I_0_142_i38/SLICE_347_K1_H1 
         , GNDI, 
         \limit_check/logic_check/count_31__I_0_142_i38/SLICE_347/limit_check/logic_check/count_31__I_0_142_i38/GATE_H0 
         ;

  lut40095 \limit_check/logic_check/count_31__I_0_142_i38/SLICE_347_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\limit_check/logic_check/count_31__I_0_142_i38/SLICE_347/limit_check/logic_check/count_31__I_0_142_i38/SLICE_347_K1_H1 )
    );
  lut40094 \limit_check/logic_check/count_31__I_0_142_i38/GATE ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), 
    .Z(\limit_check/logic_check/count_31__I_0_142_i38/SLICE_347/limit_check/logic_check/count_31__I_0_142_i38/GATE_H0 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \limit_check/logic_check/count_31__I_0_142_i38/SLICE_347_K0K1MUX ( 
    .D0(\limit_check/logic_check/count_31__I_0_142_i38/SLICE_347/limit_check/logic_check/count_31__I_0_142_i38/GATE_H0 )
    , 
    .D1(\limit_check/logic_check/count_31__I_0_142_i38/SLICE_347/limit_check/logic_check/count_31__I_0_142_i38/SLICE_347_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \limit_check/logic_check/count_31__I_0_142_i38/SLICE_347_FXMUX ( 
    .D0(FXA), .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_pulse_width_upper_limit_31__I_0_i48_SLICE_348
   ( input D1, C1, B1, A1, C0, B0, A0, M0, output OFX0 );
  wire   
         \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i48/SLICE_348/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i48/SLICE_348_K1_H1 
         , GNDI, 
         \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i48/SLICE_348/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i48/GATE_H0 
         ;

  lut40095 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i48/SLICE_348_K1 
    ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\limit_check/logic_check/pulse_width_upper_limit_31__I_0_i48/SLICE_348/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i48/SLICE_348_K1_H1 )
    );
  lut40094 \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i48/GATE 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\limit_check/logic_check/pulse_width_upper_limit_31__I_0_i48/SLICE_348/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i48/GATE_H0 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i48/SLICE_348_K0K1MUX 
    ( 
    .D0(\limit_check/logic_check/pulse_width_upper_limit_31__I_0_i48/SLICE_348/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i48/GATE_H0 )
    , 
    .D1(\limit_check/logic_check/pulse_width_upper_limit_31__I_0_i48/SLICE_348/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i48/SLICE_348_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_rate_upper_limit_31__I_0_i58_SLICE_349 ( input 
    C1, B1, A1, C0, B0, A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \limit_check/logic_check/rate_upper_limit_31__I_0_i58/SLICE_349/limit_check/logic_check/rate_upper_limit_31__I_0_i58/SLICE_349_K1_H1 
         , 
         \limit_check/logic_check/rate_upper_limit_31__I_0_i58/SLICE_349/limit_check/logic_check/rate_upper_limit_31__I_0_i58/GATE_H0 
         ;

  lut40094 \limit_check/logic_check/rate_upper_limit_31__I_0_i58/SLICE_349_K1 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\limit_check/logic_check/rate_upper_limit_31__I_0_i58/SLICE_349/limit_check/logic_check/rate_upper_limit_31__I_0_i58/SLICE_349_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40094 \limit_check/logic_check/rate_upper_limit_31__I_0_i58/GATE ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), 
    .Z(\limit_check/logic_check/rate_upper_limit_31__I_0_i58/SLICE_349/limit_check/logic_check/rate_upper_limit_31__I_0_i58/GATE_H0 )
    );
  selmux2 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i58/SLICE_349_K0K1MUX ( 
    .D0(\limit_check/logic_check/rate_upper_limit_31__I_0_i58/SLICE_349/limit_check/logic_check/rate_upper_limit_31__I_0_i58/GATE_H0 )
    , 
    .D1(\limit_check/logic_check/rate_upper_limit_31__I_0_i58/SLICE_349/limit_check/logic_check/rate_upper_limit_31__I_0_i58/SLICE_349_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i58/SLICE_349_FXMUX ( 
    .D0(FXA), .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_pulse_width_upper_limit_31__I_0_i38_SLICE_350
   ( input D1, C1, B1, A1, C0, B0, A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   
         \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i38/SLICE_350/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i38/SLICE_350_K1_H1 
         , GNDI, 
         \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i38/SLICE_350/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i38/GATE_H0 
         ;

  lut40095 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i38/SLICE_350_K1 
    ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\limit_check/logic_check/pulse_width_upper_limit_31__I_0_i38/SLICE_350/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i38/SLICE_350_K1_H1 )
    );
  lut40094 \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i38/GATE 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\limit_check/logic_check/pulse_width_upper_limit_31__I_0_i38/SLICE_350/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i38/GATE_H0 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i38/SLICE_350_K0K1MUX 
    ( 
    .D0(\limit_check/logic_check/pulse_width_upper_limit_31__I_0_i38/SLICE_350/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i38/GATE_H0 )
    , 
    .D1(\limit_check/logic_check/pulse_width_upper_limit_31__I_0_i38/SLICE_350/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i38/SLICE_350_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i38/SLICE_350_FXMUX 
    ( .D0(FXA), .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_count_31__I_0_142_i58_SLICE_351 ( input C1, B1, 
    A1, C0, B0, A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \limit_check/logic_check/count_31__I_0_142_i58/SLICE_351/limit_check/logic_check/count_31__I_0_142_i58/SLICE_351_K1_H1 
         , 
         \limit_check/logic_check/count_31__I_0_142_i58/SLICE_351/limit_check/logic_check/count_31__I_0_142_i58/GATE_H0 
         ;

  lut40094 \limit_check/logic_check/count_31__I_0_142_i58/SLICE_351_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\limit_check/logic_check/count_31__I_0_142_i58/SLICE_351/limit_check/logic_check/count_31__I_0_142_i58/SLICE_351_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40094 \limit_check/logic_check/count_31__I_0_142_i58/GATE ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), 
    .Z(\limit_check/logic_check/count_31__I_0_142_i58/SLICE_351/limit_check/logic_check/count_31__I_0_142_i58/GATE_H0 )
    );
  selmux2 \limit_check/logic_check/count_31__I_0_142_i58/SLICE_351_K0K1MUX ( 
    .D0(\limit_check/logic_check/count_31__I_0_142_i58/SLICE_351/limit_check/logic_check/count_31__I_0_142_i58/GATE_H0 )
    , 
    .D1(\limit_check/logic_check/count_31__I_0_142_i58/SLICE_351/limit_check/logic_check/count_31__I_0_142_i58/SLICE_351_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \limit_check/logic_check/count_31__I_0_142_i58/SLICE_351_FXMUX ( 
    .D0(FXA), .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_pulse_width_upper_limit_31__I_0_i58_SLICE_352
   ( input C1, B1, A1, C0, B0, A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i58/SLICE_352/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i58/SLICE_352_K1_H1 
         , 
         \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i58/SLICE_352/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i58/GATE_H0 
         ;

  lut40094 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i58/SLICE_352_K1 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\limit_check/logic_check/pulse_width_upper_limit_31__I_0_i58/SLICE_352/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i58/SLICE_352_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40094 \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i58/GATE 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\limit_check/logic_check/pulse_width_upper_limit_31__I_0_i58/SLICE_352/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i58/GATE_H0 )
    );
  selmux2 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i58/SLICE_352_K0K1MUX 
    ( 
    .D0(\limit_check/logic_check/pulse_width_upper_limit_31__I_0_i58/SLICE_352/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i58/GATE_H0 )
    , 
    .D1(\limit_check/logic_check/pulse_width_upper_limit_31__I_0_i58/SLICE_352/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i58/SLICE_352_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i58/SLICE_352_FXMUX 
    ( .D0(FXA), .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_count_31__I_0_i52_SLICE_353 ( input C1, B1, A1, 
    C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \limit_check/logic_check/count_31__I_0_i52/SLICE_353/limit_check/logic_check/count_31__I_0_i52/SLICE_353_K1_H1 
         , 
         \limit_check/logic_check/count_31__I_0_i52/SLICE_353/limit_check/logic_check/count_31__I_0_i52/GATE_H0 
         ;

  lut40094 \limit_check/logic_check/count_31__I_0_i52/SLICE_353_K1 ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), 
    .Z(\limit_check/logic_check/count_31__I_0_i52/SLICE_353/limit_check/logic_check/count_31__I_0_i52/SLICE_353_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40094 \limit_check/logic_check/count_31__I_0_i52/GATE ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), 
    .Z(\limit_check/logic_check/count_31__I_0_i52/SLICE_353/limit_check/logic_check/count_31__I_0_i52/GATE_H0 )
    );
  selmux2 \limit_check/logic_check/count_31__I_0_i52/SLICE_353_K0K1MUX ( 
    .D0(\limit_check/logic_check/count_31__I_0_i52/SLICE_353/limit_check/logic_check/count_31__I_0_i52/GATE_H0 )
    , 
    .D1(\limit_check/logic_check/count_31__I_0_i52/SLICE_353/limit_check/logic_check/count_31__I_0_i52/SLICE_353_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_count_31__I_0_i28_SLICE_354 ( input C1, B1, A1, 
    D0, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \limit_check/logic_check/count_31__I_0_i28/SLICE_354/limit_check/logic_check/count_31__I_0_i28/SLICE_354_K1_H1 
         , 
         \limit_check/logic_check/count_31__I_0_i28/SLICE_354/limit_check/logic_check/count_31__I_0_i28/GATE_H0 
         ;

  lut40094 \limit_check/logic_check/count_31__I_0_i28/SLICE_354_K1 ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), 
    .Z(\limit_check/logic_check/count_31__I_0_i28/SLICE_354/limit_check/logic_check/count_31__I_0_i28/SLICE_354_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40096 \limit_check/logic_check/count_31__I_0_i28/GATE ( .A(A0), .B(B0), 
    .C(C0), .D(D0), 
    .Z(\limit_check/logic_check/count_31__I_0_i28/SLICE_354/limit_check/logic_check/count_31__I_0_i28/GATE_H0 )
    );
  selmux2 \limit_check/logic_check/count_31__I_0_i28/SLICE_354_K0K1MUX ( 
    .D0(\limit_check/logic_check/count_31__I_0_i28/SLICE_354/limit_check/logic_check/count_31__I_0_i28/GATE_H0 )
    , 
    .D1(\limit_check/logic_check/count_31__I_0_i28/SLICE_354/limit_check/logic_check/count_31__I_0_i28/SLICE_354_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40096 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7130) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module limit_check_logic_check_rate_upper_limit_31__I_0_i52_SLICE_355 ( input 
    C1, B1, A1, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \limit_check/logic_check/rate_upper_limit_31__I_0_i52/SLICE_355/limit_check/logic_check/rate_upper_limit_31__I_0_i52/SLICE_355_K1_H1 
         , 
         \limit_check/logic_check/rate_upper_limit_31__I_0_i52/SLICE_355/limit_check/logic_check/rate_upper_limit_31__I_0_i52/GATE_H0 
         ;

  lut40094 \limit_check/logic_check/rate_upper_limit_31__I_0_i52/SLICE_355_K1 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\limit_check/logic_check/rate_upper_limit_31__I_0_i52/SLICE_355/limit_check/logic_check/rate_upper_limit_31__I_0_i52/SLICE_355_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40094 \limit_check/logic_check/rate_upper_limit_31__I_0_i52/GATE ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), 
    .Z(\limit_check/logic_check/rate_upper_limit_31__I_0_i52/SLICE_355/limit_check/logic_check/rate_upper_limit_31__I_0_i52/GATE_H0 )
    );
  selmux2 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i52/SLICE_355_K0K1MUX ( 
    .D0(\limit_check/logic_check/rate_upper_limit_31__I_0_i52/SLICE_355/limit_check/logic_check/rate_upper_limit_31__I_0_i52/GATE_H0 )
    , 
    .D1(\limit_check/logic_check/rate_upper_limit_31__I_0_i52/SLICE_355/limit_check/logic_check/rate_upper_limit_31__I_0_i52/SLICE_355_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_rate_upper_limit_31__I_0_i28_SLICE_356 ( input 
    C1, B1, A1, D0, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \limit_check/logic_check/rate_upper_limit_31__I_0_i28/SLICE_356/limit_check/logic_check/rate_upper_limit_31__I_0_i28/SLICE_356_K1_H1 
         , 
         \limit_check/logic_check/rate_upper_limit_31__I_0_i28/SLICE_356/limit_check/logic_check/rate_upper_limit_31__I_0_i28/GATE_H0 
         ;

  lut40094 \limit_check/logic_check/rate_upper_limit_31__I_0_i28/SLICE_356_K1 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\limit_check/logic_check/rate_upper_limit_31__I_0_i28/SLICE_356/limit_check/logic_check/rate_upper_limit_31__I_0_i28/SLICE_356_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40097 \limit_check/logic_check/rate_upper_limit_31__I_0_i28/GATE ( .A(A0), 
    .B(B0), .C(C0), .D(D0), 
    .Z(\limit_check/logic_check/rate_upper_limit_31__I_0_i28/SLICE_356/limit_check/logic_check/rate_upper_limit_31__I_0_i28/GATE_H0 )
    );
  selmux2 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i28/SLICE_356_K0K1MUX ( 
    .D0(\limit_check/logic_check/rate_upper_limit_31__I_0_i28/SLICE_356/limit_check/logic_check/rate_upper_limit_31__I_0_i28/GATE_H0 )
    , 
    .D1(\limit_check/logic_check/rate_upper_limit_31__I_0_i28/SLICE_356/limit_check/logic_check/rate_upper_limit_31__I_0_i28/SLICE_356_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40097 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0C8E) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module limit_check_logic_check_count_31__I_0_142_i52_SLICE_357 ( input C1, B1, 
    A1, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \limit_check/logic_check/count_31__I_0_142_i52/SLICE_357/limit_check/logic_check/count_31__I_0_142_i52/SLICE_357_K1_H1 
         , 
         \limit_check/logic_check/count_31__I_0_142_i52/SLICE_357/limit_check/logic_check/count_31__I_0_142_i52/GATE_H0 
         ;

  lut40094 \limit_check/logic_check/count_31__I_0_142_i52/SLICE_357_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\limit_check/logic_check/count_31__I_0_142_i52/SLICE_357/limit_check/logic_check/count_31__I_0_142_i52/SLICE_357_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40094 \limit_check/logic_check/count_31__I_0_142_i52/GATE ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), 
    .Z(\limit_check/logic_check/count_31__I_0_142_i52/SLICE_357/limit_check/logic_check/count_31__I_0_142_i52/GATE_H0 )
    );
  selmux2 \limit_check/logic_check/count_31__I_0_142_i52/SLICE_357_K0K1MUX ( 
    .D0(\limit_check/logic_check/count_31__I_0_142_i52/SLICE_357/limit_check/logic_check/count_31__I_0_142_i52/GATE_H0 )
    , 
    .D1(\limit_check/logic_check/count_31__I_0_142_i52/SLICE_357/limit_check/logic_check/count_31__I_0_142_i52/SLICE_357_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_count_31__I_0_142_i28_SLICE_358 ( input C1, B1, 
    A1, D0, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \limit_check/logic_check/count_31__I_0_142_i28/SLICE_358/limit_check/logic_check/count_31__I_0_142_i28/SLICE_358_K1_H1 
         , 
         \limit_check/logic_check/count_31__I_0_142_i28/SLICE_358/limit_check/logic_check/count_31__I_0_142_i28/GATE_H0 
         ;

  lut40094 \limit_check/logic_check/count_31__I_0_142_i28/SLICE_358_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\limit_check/logic_check/count_31__I_0_142_i28/SLICE_358/limit_check/logic_check/count_31__I_0_142_i28/SLICE_358_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40096 \limit_check/logic_check/count_31__I_0_142_i28/GATE ( .A(A0), 
    .B(B0), .C(C0), .D(D0), 
    .Z(\limit_check/logic_check/count_31__I_0_142_i28/SLICE_358/limit_check/logic_check/count_31__I_0_142_i28/GATE_H0 )
    );
  selmux2 \limit_check/logic_check/count_31__I_0_142_i28/SLICE_358_K0K1MUX ( 
    .D0(\limit_check/logic_check/count_31__I_0_142_i28/SLICE_358/limit_check/logic_check/count_31__I_0_142_i28/GATE_H0 )
    , 
    .D1(\limit_check/logic_check/count_31__I_0_142_i28/SLICE_358/limit_check/logic_check/count_31__I_0_142_i28/SLICE_358_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_pulse_width_upper_limit_31__I_0_i52_SLICE_359
   ( input C1, B1, A1, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i52/SLICE_359/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i52/SLICE_359_K1_H1 
         , 
         \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i52/SLICE_359/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i52/GATE_H0 
         ;

  lut40094 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i52/SLICE_359_K1 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\limit_check/logic_check/pulse_width_upper_limit_31__I_0_i52/SLICE_359/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i52/SLICE_359_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40094 \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i52/GATE 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\limit_check/logic_check/pulse_width_upper_limit_31__I_0_i52/SLICE_359/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i52/GATE_H0 )
    );
  selmux2 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i52/SLICE_359_K0K1MUX 
    ( 
    .D0(\limit_check/logic_check/pulse_width_upper_limit_31__I_0_i52/SLICE_359/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i52/GATE_H0 )
    , 
    .D1(\limit_check/logic_check/pulse_width_upper_limit_31__I_0_i52/SLICE_359/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i52/SLICE_359_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_pulse_width_upper_limit_31__I_0_i28_SLICE_360
   ( input C1, B1, A1, D0, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i28/SLICE_360/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i28/SLICE_360_K1_H1 
         , 
         \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i28/SLICE_360/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i28/GATE_H0 
         ;

  lut40094 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i28/SLICE_360_K1 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\limit_check/logic_check/pulse_width_upper_limit_31__I_0_i28/SLICE_360/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i28/SLICE_360_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40097 \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i28/GATE 
    ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\limit_check/logic_check/pulse_width_upper_limit_31__I_0_i28/SLICE_360/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i28/GATE_H0 )
    );
  selmux2 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i28/SLICE_360_K0K1MUX 
    ( 
    .D0(\limit_check/logic_check/pulse_width_upper_limit_31__I_0_i28/SLICE_360/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i28/GATE_H0 )
    , 
    .D1(\limit_check/logic_check/pulse_width_upper_limit_31__I_0_i28/SLICE_360/limit_check/logic_check/pulse_width_upper_limit_31__I_0_i28/SLICE_360_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_361 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40026 \i2c_slave_top/registers/i2_3_lut_rep_315_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40098 \i2c_slave_top/registers/i13256_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/cw_current_limit_i3 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/cw_current_limit_i2 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40098 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1101) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_362
   ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40099 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__bdd_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40100 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i3353_2_lut_3_lut_4_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40099 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40100 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0D0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_363
   ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, CLK_NOTIN, M0_dly, CLK_dly, CE_dly;

  lut40020 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40101 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_I_29_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/rw_mode_i_771 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40101 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCACF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_364
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40102 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13260_4_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40103 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13283_3_lut_3_lut_4_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40102 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDF00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40103 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_365
   ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly;

  lut40066 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_158 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40104 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/select_729_Select_1_i2_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack1_i_765 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/o_tx_status_780 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
  endspecify

endmodule

module lut40104 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC088) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_366
   ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly;

  lut40105 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_161 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40104 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/select_729_Select_3_i2_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i_767 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40105 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA088) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_367 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40106 \limit_check/logic_check/count_31__I_0_142_i62_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40106 \limit_check/logic_check/count_31__I_0_142_i64_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/pwm_mon_current_limit_i3 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pwm_mon_current_limit_i2 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40106 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCACC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module limit_check_logic_check_SLICE_368 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40106 \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i62_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40106 \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i64_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_369 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40106 \limit_check/logic_check/rate_upper_limit_31__I_0_i62_4_lut ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40106 \limit_check/logic_check/rate_upper_limit_31__I_0_i64_4_lut ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_control_SLICE_370 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40053 \adc_control/state_3__I_0_i6_2_lut_rep_492 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40107 \adc_control/i3487_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40107 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_371 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40108 \adc_control/i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40109 \adc_control/i1_3_lut_rep_316_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40108 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40109 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F0D) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_372 ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40026 \adc_control/i2_3_lut_4_lut_adj_182 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40110 \adc_control/i1_2_lut_rep_394 ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40110 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBBBB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_373 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40076 \i2c_slave_top/registers/mux_611_i1_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/mux_662_i1_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_374 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40111 \i2c_slave_top/registers/i1_4_lut_adj_181 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40076 \i2c_slave_top/registers/i3440_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40111 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4544) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_375 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40019 \i2c_slave_top/registers/i1_2_lut_rep_330_3_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40076 \i2c_slave_top/registers/i3432_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_376 ( input C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40076 \i2c_slave_top/registers/i3412_3_lut_rep_478 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40112 \i2c_slave_top/registers/i13286_2_lut_4_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0007 \i2c_slave_top/registers/cw_current_limit_i5 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0007 \i2c_slave_top/registers/cw_current_limit_i4 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40112 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_377 ( input C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40099 \i2c_slave_top/registers/i8984_2_lut_rep_319_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40008 \i2c_slave_top/registers/i13308_2_lut_3_lut_4_lut_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/cw_mon_current_limit_i1 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/cw_mon_current_limit_i0 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_378 ( input C1, B1, A1, C0, B0, A0, M1, 
    M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40076 \i2c_slave_top/registers/i3424_3_lut_rep_367 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i13068_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/cw_current_limit_i15 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/cw_current_limit_i14 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_379 ( input C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40113 \i2c_slave_top/registers/i4_2_lut_rep_325_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40114 \i2c_slave_top/registers/i13310_2_lut_3_lut_4_lut_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/cw_mon_current_limit_i11 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/cw_mon_current_limit_i10 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40113 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40114 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_380 ( input C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40023 \i2c_slave_top/registers/i1_3_lut_rep_313 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40008 \i2c_slave_top/registers/i13312_2_lut_3_lut_4_lut_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/cw_mon_current_limit_i13 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/cw_mon_current_limit_i12 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_381 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40022 \i2c_slave_top/registers/i1_2_lut_rep_310_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40114 \i2c_slave_top/registers/i13325_2_lut_3_lut_4_lut_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0007 \i2c_slave_top/registers/cw_mon_current_limit_i5 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/cw_mon_current_limit_i4 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_382 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40115 \i2c_slave_top/registers/i1_4_lut_adj_174 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40116 \i2c_slave_top/registers/i1_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40115 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAA8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40116 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDCDC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_383 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40075 \i2c_slave_top/registers/i8972_2_lut_rep_366_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40117 \i2c_slave_top/registers/i1_2_lut_rep_311_3_lut_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0007 \i2c_slave_top/registers/drive_current_limit_i9 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0007 \i2c_slave_top/registers/drive_current_limit_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40117 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0004) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_384 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40076 \i2c_slave_top/registers/i3420_3_lut_rep_480 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40026 \i2c_slave_top/registers/i2_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_385 ( input D1, C1, B1, A1, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40118 \i2c_slave_top/registers/i4_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40046 \i2c_slave_top/registers/i1_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0007 \i2c_slave_top/registers/drive_current_limit_i13 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0007 \i2c_slave_top/registers/drive_current_limit_i12 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40118 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0002) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_386 ( input C1, B1, A1, C0, B0, A0, M1, 
    M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40076 \i2c_slave_top/registers/i3416_3_lut_rep_491 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40046 \i2c_slave_top/registers/i1_2_lut_3_lut_adj_168 ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/drive_current_limit_i3 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/drive_current_limit_i2 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_387 ( input C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40119 \i2c_slave_top/registers/i1_3_lut_rep_312 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40117 \i2c_slave_top/registers/i13332_2_lut_2_lut_3_lut_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/cw_mon_current_limit_i9 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/cw_mon_current_limit_i8 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40119 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0808) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_388 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40076 \i2c_slave_top/registers/mux_611_i2_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/mux_662_i2_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_389 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40076 \i2c_slave_top/registers/mux_611_i3_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/mux_662_i3_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_390 ( input D1, C1, B1, A1, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40107 \i2c_slave_top/registers/i3_4_lut_adj_172 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40023 \i2c_slave_top/registers/i13316_2_lut_2_lut_3_lut ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/cw_mon_current_limit_i15 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/cw_mon_current_limit_i14 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_391 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40076 \i2c_slave_top/registers/mux_611_i4_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/mux_662_i4_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_392 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40075 \i2c_slave_top/registers/i8993_2_lut_rep_342_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40008 \i2c_slave_top/registers/i13327_2_lut_3_lut_4_lut_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0007 \i2c_slave_top/registers/cw_mon_current_limit_i7 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/cw_mon_current_limit_i6 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_393 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40076 \i2c_slave_top/registers/mux_611_i5_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/mux_662_i5_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_394 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40076 \i2c_slave_top/registers/mux_611_i6_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/mux_662_i6_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_395 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40076 \i2c_slave_top/registers/mux_611_i7_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/mux_662_i7_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_396 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40076 \i2c_slave_top/registers/mux_611_i8_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/mux_662_i8_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_397 ( input B1, A1, D0, C0, B0, A0, M0, LSR, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40044 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/o_data_valid_I_0_2_lut_rep_455 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40120 \i2c_slave_top/registers/data_vld_I_0_274_2_lut_rep_321_4_lut ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0018 \i2c_slave_top/registers/addr_i_reg_i0_3410_3411_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40120 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBA00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_398 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40076 \i2c_slave_top/registers/i3428_3_lut_rep_453 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40099 \i2c_slave_top/registers/i1_2_lut_rep_320_3_lut ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_399 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40121 \i2c_slave_top/registers/i1796_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40122 \i2c_slave_top/registers/i2_2_lut_rep_341_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40121 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40122 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00CA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_400 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40117 \i2c_slave_top/registers/i13334_2_lut_3_lut_4_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40075 \i2c_slave_top/registers/i1_2_lut_rep_350_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_401 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40121 \i2c_slave_top/registers/i2_3_lut_rep_328_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40107 \i2c_slave_top/registers/i1886_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0007 \i2c_slave_top/registers/drive_current_limit_i11 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0007 \i2c_slave_top/registers/drive_current_limit_i10 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_402 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40019 \i2c_slave_top/registers/i11_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40019 \i2c_slave_top/registers/i1_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_403 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, LSR_dly;

  lut40019 \i2c_slave_top/registers/i9_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40019 \i2c_slave_top/registers/i12_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0018 \i2c_slave_top/registers/addr_i_reg_i2_3418_3419_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_404 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40112 \i2c_slave_top/registers/i2_3_lut_4_lut_adj_175 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40123 \i2c_slave_top/registers/i1_2_lut_rep_336_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40123 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCAFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_405 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40026 \i2c_slave_top/registers/i13322_2_lut_3_lut_3_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40123 \i2c_slave_top/registers/i1_2_lut_rep_344_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_406 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40112 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_178 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40124 \i2c_slave_top/registers/i4_2_lut_rep_343_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40124 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCA00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_407 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40112 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_179 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40122 \i2c_slave_top/registers/i1_2_lut_rep_345_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_408
   ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40053 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/equal_57_i6_2_lut_rep_459 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40109 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_318_3_lut_4_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_409
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40125 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i21_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40124 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4_bdd_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40125 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF1E0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_410
   ( input D1, C1, B1, A1, B0, A0, M1, M0, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40125 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i36_rep_296_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40039 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/equal_55_i6_2_lut_rep_421 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i1 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i0 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_411
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40104 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/select_729_Select_6_i6_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40126 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_323_3_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40126 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFDFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_412
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40104 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/select_729_Select_5_i6_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40126 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_324_3_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_413
   ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40127 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i33_rep_302_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40074 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9102_2_lut_rep_429 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40127 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF4B0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_414
   ( input D1, C1, B1, A1, C0, B0, A0, M1, M0, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40128 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13346_2_lut_rep_306_2_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40129 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1183_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i7 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i6 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40128 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3500) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40129 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3535) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_415
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40104 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/select_729_Select_7_i6_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40130 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_338_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40130 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF7FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_416
   ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40131 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1182_3_lut_rep_308_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40009 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i891_2_lut 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40131 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEFE0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_417
   ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40132 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i3406_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40053 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i815_2_lut 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40132 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCAC0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_418
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40019 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/equal_32_i7_2_lut_rep_363_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40133 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i3397_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40133 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFD20) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_419
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40134 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i880_2_lut_rep_317_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40135 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_3_lut_rep_307_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40134 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF1F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40135 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0D00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_420 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40136 \reset_generator/i13268_3_lut_rep_449 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40137 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_696_I_0_229_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40136 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3B3B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40137 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_421
   ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40053 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1099_2_lut_rep_458 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40118 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_422
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40104 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/select_729_Select_8_i2_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40112 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9081_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_423
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40104 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/select_729_Select_6_i2_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40112 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_147 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_424
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40138 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13343_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40139 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13344_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40138 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0111) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40139 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0B00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_425
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40104 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/select_729_Select_5_i2_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40112 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_148 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_426
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40104 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/select_729_Select_4_i2_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40112 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9080_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_427
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40104 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/select_729_Select_7_i2_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40112 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_149 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_428
   ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, LSR, CLK, output F0, Q0, F1, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40140 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1921_4_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40141 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/equal_56_i7_2_lut_rep_339_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i3 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i2 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40140 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF2D0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40141 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_429 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40053 \reset_generator/i1_2_lut_adj_130 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40134 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i9150_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_430
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40142 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i800_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40019 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i327_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40142 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0A2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_431
   ( input D1, C1, B1, A1, C0, B0, A0, M1, M0, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40140 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i32_rep_304_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40099 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1107_2_lut_rep_364_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i5 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i4 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_432
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40104 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/select_729_Select_8_i6_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40143 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_2_lut_rep_322_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40143 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_433
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40104 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/select_729_Select_2_i6_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40141 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_331_3_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_434
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40104 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/select_729_Select_3_i6_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40144 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_152 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40144 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_435
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40145 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/select_729_Select_1_i6_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40141 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_335_3_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40145 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h88C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_436
   ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40118 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_rep_309_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40146 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut ( 
    .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40146 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA8A8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_437
   ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40039 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_355_2_lut 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40125 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i34_rep_300_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_SLICE_438 ( input D1, C1, B1, A1, 
    D0, C0, B0, A0, output F0, F1 );

  lut40114 
    \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/i1_2_lut_3_lut_4_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40147 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13263_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40147 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1333) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_439 ( input C1, B1, A1, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40071 \limit_check/logic_check/count_31__I_0_142_i34_3_lut_3_lut ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 \limit_check/logic_check/count_31__I_0_142_i32_3_lut_3_lut ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0007 \i2c_slave_top/registers/pulse_width_upper_limit_i7 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0007 \i2c_slave_top/registers/pulse_width_upper_limit_i6 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_440 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40148 \limit_check/logic_check/i12481_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_142_i41_2_lut_rep_404 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0007 \i2c_slave_top/registers/pwm_current_limit_i15 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0007 \i2c_slave_top/registers/pwm_current_limit_i14 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40148 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5455) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module limit_check_logic_check_SLICE_441 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40141 \limit_check/logic_check/i13374_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40072 \limit_check/logic_check/i13375_2_lut_3_lut ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_442 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40149 \limit_check/logic_check/i13372_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40072 \limit_check/logic_check/i13373_2_lut_3_lut ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40149 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEFEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_443 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40150 \limit_check/logic_check/i12595_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40150 \limit_check/logic_check/i12582_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i7 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i6 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40150 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1011) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_444 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40148 \limit_check/logic_check/i12486_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_142_i43_2_lut_rep_405 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0007 \i2c_slave_top/registers/pwm_current_limit_i5 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0007 \i2c_slave_top/registers/pwm_current_limit_i4 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_445 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40043 \limit_check/logic_check/i12431_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_142_i27_2_lut_rep_406 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i31 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i30 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_446 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40010 \limit_check/logic_check/count_31__I_0_142_i31_2_lut_rep_408 ( 
    .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40151 \limit_check/logic_check/i13265_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40151 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF6) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_447 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40148 \limit_check/logic_check/i12444_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_142_i29_2_lut_rep_407 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0007 \i2c_slave_top/registers/pulse_width_upper_limit_i5 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0007 \i2c_slave_top/registers/pulse_width_upper_limit_i4 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_448 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40152 \limit_check/logic_check/i12626_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/rate_upper_limit_31__I_0_i11_2_lut ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40152 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5554) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module limit_check_logic_check_SLICE_449 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40152 \limit_check/logic_check/i12604_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/rate_upper_limit_31__I_0_i9_2_lut ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_450 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40148 \limit_check/logic_check/i12684_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/rate_upper_limit_31__I_0_i25_2_lut ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_451 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40153 \limit_check/logic_check/i12496_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_142_i45_2_lut_rep_409 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0007 \i2c_slave_top/registers/pwm_current_limit_i7 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0007 \i2c_slave_top/registers/pwm_current_limit_i6 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40153 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_452 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40153 \limit_check/logic_check/i12507_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_142_i47_2_lut_rep_410 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0007 \i2c_slave_top/registers/pwm_current_limit_i9 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0007 \i2c_slave_top/registers/pwm_current_limit_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_453 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40149 \limit_check/logic_check/i13351_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_142_i49_2_lut_rep_411 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pwm_mon_current_limit_i1 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/pwm_mon_current_limit_i0 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_454 ( input C1, B1, A1, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40071 \limit_check/logic_check/count_31__I_0_142_i44_3_lut_3_lut ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 \limit_check/logic_check/count_31__I_0_142_i42_3_lut_3_lut ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/pwm_current_limit_i3 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/pwm_current_limit_i2 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_455 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40153 \limit_check/logic_check/i12454_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_142_i33_2_lut_rep_412 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i9 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0007 \i2c_slave_top/registers/pulse_width_upper_limit_i8 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_456 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40150 \limit_check/logic_check/i12384_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40154 \limit_check/logic_check/i12375_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0007 \i2c_slave_top/registers/rate_upper_limit_i19 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i18 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40154 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h9009) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_457 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40153 \limit_check/logic_check/i12416_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_142_i21_2_lut_rep_415 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i27 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i26 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_458 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40150 \limit_check/logic_check/i12536_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40154 \limit_check/logic_check/i12413_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i3 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i2 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_459 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40150 \limit_check/logic_check/i12397_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_142_i15_2_lut_rep_417 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i3 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i2 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_460 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40152 \limit_check/logic_check/i12406_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_142_i17_2_lut_rep_418 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i23 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i22 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_461 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40152 \limit_check/logic_check/i12428_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_142_i13_2_lut_rep_420 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i17 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i16 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_462 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40155 \limit_check/logic_check/i13362_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i63_2_lut_rep_422 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40155 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAAB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module limit_check_logic_check_SLICE_463 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40149 \limit_check/logic_check/i13363_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40072 \limit_check/logic_check/i13364_2_lut_3_lut ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_464 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40153 \limit_check/logic_check/i12349_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i57_2_lut_rep_423 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_465 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i55_2_lut_rep_428 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40151 \limit_check/logic_check/i13369_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_466 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40153 \limit_check/logic_check/i12347_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i59_2_lut_rep_424 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_467 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40153 \limit_check/logic_check/i12320_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i51_2_lut_rep_426 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_468 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40071 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i42_3_lut_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i44_3_lut_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_469 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40149 \limit_check/logic_check/i13382_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40072 \limit_check/logic_check/i13383_2_lut_3_lut ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_470 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40150 \limit_check/logic_check/i12322_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i53_2_lut_rep_427 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_471 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40148 \limit_check/logic_check/i12276_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i39_2_lut_rep_430 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_472 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40071 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i34_3_lut_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i32_3_lut_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_473 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40141 \limit_check/logic_check/i13305_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40072 \limit_check/logic_check/i13306_2_lut_3_lut ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_474 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40149 \limit_check/logic_check/i13297_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40072 \limit_check/logic_check/i13298_2_lut_3_lut ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_475 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40148 \limit_check/logic_check/i12281_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i43_2_lut_rep_432 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_476 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40153 \limit_check/logic_check/i12291_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i45_2_lut_rep_433 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_477 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40153 \limit_check/logic_check/i12302_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i47_2_lut_rep_434 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_478 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40043 \limit_check/logic_check/i12226_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i27_2_lut_rep_436 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_479 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i31_2_lut_rep_438 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40151 \limit_check/logic_check/i13356_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_480 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40148 \limit_check/logic_check/i12239_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i29_2_lut_rep_437 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_481 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40010 \limit_check/logic_check/count_31__I_0_i39_2_lut_rep_382 ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40141 \limit_check/logic_check/i13353_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_482 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40010 \limit_check/logic_check/count_31__I_0_i33_2_lut_rep_387 ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40148 \limit_check/logic_check/i12840_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_483 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40010 \limit_check/logic_check/count_31__I_0_i11_2_lut ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40152 \limit_check/logic_check/i12824_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_484 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40153 \limit_check/logic_check/i12249_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i33_2_lut_rep_439 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_485 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i37_2_lut_rep_487 ( 
    .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40141 \limit_check/logic_check/i13380_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_486 ( input B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i31_2_lut_rep_490 ( 
    .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40148 \limit_check/logic_check/i12642_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/static_control_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/static_control_i0 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_487 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40150 \limit_check/logic_check/i12192_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i15_2_lut_rep_442 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_488 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40152 \limit_check/logic_check/i12201_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i17_2_lut_rep_443 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_489 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40153 \limit_check/logic_check/i12211_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i21_2_lut_rep_445 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_490 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40150 \limit_check/logic_check/i12331_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40154 \limit_check/logic_check/i12208_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i15 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i14 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_491 ( input B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40010 \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i11_2_lut 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40152 \limit_check/logic_check/i12223_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i17 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0007 \i2c_slave_top/registers/rate_upper_limit_i16 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_492 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40150 \limit_check/logic_check/i12179_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i13_2_lut_rep_447 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_493 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40010 \limit_check/logic_check/count_31__I_0_i61_2_lut_rep_373 ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40149 \limit_check/logic_check/i13336_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_494 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40010 \limit_check/logic_check/count_31__I_0_i25_2_lut ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40150 \limit_check/logic_check/i12932_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_495 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i61_2_lut_rep_466 ( 
    .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40149 \limit_check/logic_check/i13366_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_496 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40154 \limit_check/logic_check/i12611_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40150 \limit_check/logic_check/i12734_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/static_control_i15 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/static_control_i14 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_497 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40010 \limit_check/logic_check/count_31__I_0_142_i61_2_lut_rep_399 ( 
    .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40149 \limit_check/logic_check/i13313_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_498 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40010 \limit_check/logic_check/count_31__I_0_i59_2_lut_rep_372 ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40155 \limit_check/logic_check/i13335_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_499 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40154 \limit_check/logic_check/i12889_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40149 \limit_check/logic_check/i13347_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_500 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40154 \limit_check/logic_check/i12847_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40149 \limit_check/logic_check/i13349_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_501 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40154 \limit_check/logic_check/i12691_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40149 \limit_check/logic_check/i13376_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_502 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i35_2_lut_rep_486 ( 
    .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40149 \limit_check/logic_check/i13378_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_503 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40153 \limit_check/logic_check/i12652_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40043 \limit_check/logic_check/i12629_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0007 \i2c_slave_top/registers/rate_upper_limit_i9 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0007 \i2c_slave_top/registers/rate_upper_limit_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_504 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i59_2_lut_rep_465 ( 
    .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40155 \limit_check/logic_check/i13365_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_505 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40010 \limit_check/logic_check/count_31__I_0_142_i59_2_lut_rep_398 ( 
    .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40155 \limit_check/logic_check/i13296_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_506 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40153 \limit_check/logic_check/i12752_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i57_2_lut_rep_464 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_507 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i55_2_lut_rep_472 ( 
    .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40151 \limit_check/logic_check/i13371_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_508 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40153 \limit_check/logic_check/i12705_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i45_2_lut_rep_467 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_509 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40153 \limit_check/logic_check/i12694_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i47_2_lut_rep_468 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_510 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40071 \limit_check/logic_check/rate_upper_limit_31__I_0_i44_3_lut_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 \limit_check/logic_check/rate_upper_limit_31__I_0_i42_3_lut_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_511 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40150 \limit_check/logic_check/i12725_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i51_2_lut_rep_470 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_512 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40156 \limit_check/logic_check/i1_2_lut_3_lut_4_lut_adj_127 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40009 \limit_check/logic_check/i1_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40156 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module limit_check_logic_check_SLICE_513 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40153 \limit_check/logic_check/i12723_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i53_2_lut_rep_471 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_514 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40153 \limit_check/logic_check/i12614_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i21_2_lut_rep_473 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_515 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40151 \limit_check/logic_check/i13339_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_142_i55_2_lut_rep_402 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pwm_mon_current_limit_i13 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/pwm_mon_current_limit_i12 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_516 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40153 \limit_check/logic_check/i12957_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_i63_2_lut_rep_368 ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0007 \i2c_slave_top/registers/rate_lower_limit_i9 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_517 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40153 \limit_check/logic_check/i12928_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_i53_2_lut_rep_369 ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i31 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i30 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_518 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40010 \limit_check/logic_check/count_31__I_0_i57_2_lut_rep_371 ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40151 \limit_check/logic_check/i13341_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_519 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40150 \limit_check/logic_check/i12923_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_i55_2_lut_rep_370 ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i5 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i4 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_520 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40150 \limit_check/logic_check/i12880_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_i41_2_lut_rep_374 ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i3 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i2 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_521 ( input C1, B1, A1, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40071 \limit_check/logic_check/count_31__I_0_i32_3_lut_3_lut ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 \limit_check/logic_check/count_31__I_0_i34_3_lut_3_lut ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i17 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0007 \i2c_slave_top/registers/rate_lower_limit_i16 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_522 ( input B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40010 \limit_check/logic_check/count_31__I_0_142_i57_2_lut_rep_397 ( 
    .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40153 \limit_check/logic_check/i12552_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i25 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i24 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_523 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40150 \limit_check/logic_check/i12527_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40153 \limit_check/logic_check/i12554_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i5 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i4 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_524 ( input B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40010 \limit_check/logic_check/count_31__I_0_142_i53_2_lut_rep_401 ( 
    .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40153 \limit_check/logic_check/i12525_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i23 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i22 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_525 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40148 \limit_check/logic_check/i12679_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i39_2_lut_rep_481 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_526 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40071 \limit_check/logic_check/rate_upper_limit_31__I_0_i34_3_lut_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 \limit_check/logic_check/rate_upper_limit_31__I_0_i32_3_lut_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_527 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40148 \limit_check/logic_check/i12882_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_i43_2_lut_rep_375 ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i23 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i22 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_528 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40153 \limit_check/logic_check/i12903_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_i45_2_lut_rep_376 ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i25 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i24 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_529 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40153 \limit_check/logic_check/i12901_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_i47_2_lut_rep_377 ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i27 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i26 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_530 ( input C1, B1, A1, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40071 \limit_check/logic_check/count_31__I_0_i44_3_lut_3_lut ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 \limit_check/logic_check/count_31__I_0_i42_3_lut_3_lut ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i21 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i20 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_531 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i29_2_lut_rep_489 ( 
    .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40151 \limit_check/logic_check/i13385_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_532 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40153 \limit_check/logic_check/i12859_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_i35_2_lut_rep_380 ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0007 \i2c_slave_top/registers/rate_lower_limit_i19 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i18 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_533 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40043 \limit_check/logic_check/i12785_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_i13_2_lut_rep_383 ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0007 \i2c_slave_top/registers/pwm_mon_current_limit_i7 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/pwm_mon_current_limit_i6 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_534 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40153 \limit_check/logic_check/i12834_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_i29_2_lut_rep_385 ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i15 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i14 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_535 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40010 \limit_check/logic_check/count_31__I_0_i27_2_lut_rep_389 ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40151 \limit_check/logic_check/i13361_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_536 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40148 \limit_check/logic_check/i12819_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_i23_2_lut_rep_388 ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i13 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0007 \i2c_slave_top/registers/rate_lower_limit_i12 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_537 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40043 \limit_check/logic_check/i12798_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_i17_2_lut_rep_390 ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pwm_mon_current_limit_i9 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/pwm_mon_current_limit_i8 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_538 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40152 \limit_check/logic_check/i12802_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_i19_2_lut_rep_391 ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0007 \i2c_slave_top/registers/rate_lower_limit_i11 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i10 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_539 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40157 \limit_check/logic_check/i12774_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_i7_2_lut_rep_393 ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i0 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40157 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_540 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40153 \limit_check/logic_check/i12950_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40106 \limit_check/logic_check/count_31__I_0_i62_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i7 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i6 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_541 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40158 \limit_check/logic_check/i1_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40044 \limit_check/logic_check/i11_2_lut_rep_395 ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0007 \i2c_slave_top/registers/rate_upper_limit_i11 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i10 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40158 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_542 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40019 i3_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40159 \limit_check/logic_check/i2_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40159 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_543 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40026 \adc_control/i13277_2_lut_rep_327_2_lut_3_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40112 \adc_control/i13274_3_lut_rep_358_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_544 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40160 \i2c_slave_top/registers/i13359_3_lut_rep_361_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40117 \i2c_slave_top/registers/i13292_2_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0007 \i2c_slave_top/registers/cw_current_limit_i7 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/cw_current_limit_i6 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40160 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFD00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_545
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40161 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_696_I_0_238_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40137 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_696_I_0_230_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40161 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F04) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_546
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40161 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_696_I_0_236_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40137 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_696_I_0_228_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_547
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40161 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_696_I_0_235_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40137 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_696_I_0_227_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_SLICE_548 ( input D1, C1, B1, A1, 
    D0, C0, B0, A0, M1, M0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40161 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_696_I_0_234_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40137 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_696_I_0_226_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d3_15 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d3_15 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_SLICE_549 ( input D1, C1, B1, A1, 
    D0, C0, B0, A0, M0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  lut40161 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_696_I_0_233_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40137 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_696_I_0_225_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n_16 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_SLICE_550 ( input D1, C1, B1, A1, 
    D0, C0, B0, A0, M0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  lut40161 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_696_I_0_232_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40137 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__I_0_239_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n_16 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_551
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40137 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_696_I_0_231_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40161 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_696_I_0_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_552 ( input C1, B1, A1, C0, B0, A0, M1, 
    M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40113 \i2c_slave_top/registers/i13258_2_lut_2_lut_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40023 \i2c_slave_top/registers/i13302_2_lut_2_lut_3_lut ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/cw_current_limit_i9 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/cw_current_limit_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_553 ( input C1, B1, A1, C0, B0, A0, M1, 
    M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40113 \i2c_slave_top/registers/i13329_2_lut_2_lut_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40162 \i2c_slave_top/registers/i1_2_lut_3_lut_adj_170 ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/drive_current_limit_i7 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/drive_current_limit_i6 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40162 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_554 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40163 \i2c_slave_top/registers/i2_3_lut_adj_180 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40164 \i2c_slave_top/registers/i2_3_lut_rep_448 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40163 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0202) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40164 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFBFB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_555 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/i1766_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40048 \i2c_slave_top/registers/i1826_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/drive_current_limit_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/drive_current_limit_i0 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_556 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40128 \i2c_slave_top/registers/i1_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40075 \i2c_slave_top/registers/i1_2_lut_rep_356_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_557 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40112 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_177 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40112 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0007 \i2c_slave_top/registers/drive_current_limit_i15 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0007 \i2c_slave_top/registers/drive_current_limit_i14 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_558
   ( input C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40119 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i233_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40046 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_359_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_559 ( input D1, C1, B1, A1, C0, B0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40154 \limit_check/logic_check/i12493_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40071 \limit_check/logic_check/count_31__I_0_142_i16_3_lut_3_lut ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i21 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i20 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_560 ( input D1, C1, B1, A1, C0, B0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40154 \limit_check/logic_check/i12451_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40071 \limit_check/logic_check/count_31__I_0_142_i12_3_lut_3_lut ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i15 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i14 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_561 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40154 \limit_check/logic_check/i12288_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40071 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i16_3_lut_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_562 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40154 \limit_check/logic_check/i12246_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40071 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i12_3_lut_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_563 ( input C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40071 \limit_check/logic_check/rate_upper_limit_31__I_0_i12_3_lut_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40154 \limit_check/logic_check/i12649_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/static_control_i11 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/static_control_i10 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_564 ( input D1, C1, B1, A1, C0, B0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40154 \limit_check/logic_check/i12809_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40071 \limit_check/logic_check/count_31__I_0_i18_3_lut_3_lut ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i0 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_565 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40026 \adc_control/i2_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40113 \adc_control/i1374_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_566 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40121 \i2c_slave_top/registers/i1856_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40165 \i2c_slave_top/registers/i13320_2_lut_2_lut_3_lut_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/cw_mon_current_limit_i3 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/cw_mon_current_limit_i2 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40165 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_567
   ( input B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40044 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i206_2_lut_rep_457 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40074 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i874_2_lut_rep_456 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_568
   ( input B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40166 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i13272_2_lut_rep_314_2_lut_4_lut_4_lut_2_lut 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40167 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_rep_360_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40166 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1111) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40167 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD8D8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_569
   ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, CLK_NOTIN, M0_dly, CLK_dly, LSR_dly;

  lut40112 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_151 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40026 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/rw_mode_i_N_312_I_0_857_2_lut_rep_333_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i_769 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_570
   ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, CLK_NOTIN, M0_dly, CLK_dly, LSR_dly;

  lut40168 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1915_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40169 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i_bdd_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i_770 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40168 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hACAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40169 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_571
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40140 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1927_4_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40140 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1917_4_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_572
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40125 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i35_rep_298_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40140 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1923_4_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_573
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40140 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1919_4_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40140 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1925_4_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_574 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40154 \limit_check/logic_check/i12907_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40154 \limit_check/logic_check/i12511_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i21 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i20 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_575 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40154 \limit_check/logic_check/i12469_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40010 \limit_check/logic_check/count_31__I_0_142_i37_2_lut_rep_414 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0007 \i2c_slave_top/registers/pwm_current_limit_i11 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0007 \i2c_slave_top/registers/pwm_current_limit_i10 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_576 ( input C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40071 \limit_check/logic_check/count_31__I_0_142_i18_3_lut_3_lut ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \limit_check/logic_check/count_31__I_0_142_i23_2_lut_rep_416 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i29 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i28 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_577 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40071 \limit_check/logic_check/rate_upper_limit_31__I_0_i20_3_lut_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i20_3_lut_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_578 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40071 \limit_check/logic_check/rate_upper_limit_31__I_0_i22_3_lut_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i22_3_lut_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_579 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40154 \limit_check/logic_check/i12306_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i49_2_lut_rep_435 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_580 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40071 \limit_check/logic_check/rate_upper_limit_31__I_0_i14_3_lut_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i14_3_lut_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_581 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40154 \limit_check/logic_check/i12264_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i37_2_lut_rep_441 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_582 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40071 \limit_check/logic_check/rate_upper_limit_31__I_0_i8_3_lut_3_lut ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i8_3_lut_3_lut ( 
    .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_583 ( input C1, B1, A1, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40071 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i18_3_lut_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i23_2_lut_rep_446 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_584 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40071 \limit_check/logic_check/rate_upper_limit_31__I_0_i10_3_lut_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i10_3_lut_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_585 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40154 \limit_check/logic_check/i12573_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40154 \limit_check/logic_check/i12170_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/rate_upper_limit_i13 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0007 \i2c_slave_top/registers/rate_upper_limit_i12 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_586 ( input C1, B1, A1, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40072 \limit_check/logic_check/i13367_2_lut_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i63_2_lut_rep_463 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_587 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40154 \limit_check/logic_check/i12709_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i49_2_lut_rep_469 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_588 ( input C1, B1, A1, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40071 \limit_check/logic_check/rate_upper_limit_31__I_0_i18_3_lut_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i23_2_lut_rep_474 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_589 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40072 \limit_check/logic_check/i13350_2_lut_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40072 \limit_check/logic_check/i13354_2_lut_3_lut ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_590 ( input C1, B1, A1, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40072 \limit_check/logic_check/i13379_2_lut_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i41_2_lut_rep_483 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_591 ( input C1, B1, A1, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40071 \limit_check/logic_check/rate_upper_limit_31__I_0_i16_3_lut_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i43_2_lut_rep_484 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_592 ( input C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40072 \limit_check/logic_check/i13348_2_lut_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \limit_check/logic_check/count_31__I_0_i51_2_lut_rep_379 ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i29 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/rate_lower_limit_i28 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_593 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40154 \limit_check/logic_check/i12865_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40154 \limit_check/logic_check/i12667_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/static_control_i13 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/static_control_i12 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_594 ( input C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40072 \limit_check/logic_check/i13314_2_lut_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \limit_check/logic_check/count_31__I_0_142_i63_2_lut_rep_396 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/pwm_mon_current_limit_i15 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/pwm_mon_current_limit_i14 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_595 ( input C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40072 \limit_check/logic_check/i13352_2_lut_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \limit_check/logic_check/count_31__I_0_142_i51_2_lut_rep_400 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/pwm_mon_current_limit_i11 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/pwm_mon_current_limit_i10 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_596 ( input C1, B1, A1, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40072 \limit_check/logic_check/i13337_2_lut_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i13067_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/cw_current_limit_i13 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/cw_current_limit_i12 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_597 ( input D1, C1, B1, A1, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40170 \i2c_slave_top/registers/i1_2_lut_4_lut_adj_176 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40162 \i2c_slave_top/registers/i1_2_lut_3_lut_adj_169 ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/drive_current_limit_i5 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/drive_current_limit_i4 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40170 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF35) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_598 ( input C1, B1, A1, D0, C0, B0, A0, 
    M0, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40076 \i2c_slave_top/registers/i13043_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40019 \i2c_slave_top/registers/i12148_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0018 \i2c_slave_top/registers/addr_i_reg_i1_3414_3415_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_599 ( input B1, A1, C0, B0, A0, M1, M0, CE, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i61_2_lut_rep_425 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i13065_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/cw_current_limit_i11 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/cw_current_limit_i10 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_600 ( input C1, B1, A1, C0, B0, A0, M1, 
    M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40076 \i2c_slave_top/registers/i13044_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i13064_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/cw_current_limit_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/cw_current_limit_i0 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_601 ( input C1, B1, A1, C0, B0, A0, CE, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, CE_dly, CLK_dly, LSR_dly;

  lut40076 \i2c_slave_top/registers/i13049_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i13062_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0018 \i2c_slave_top/registers/byte_cnt_i1 ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_602 ( input C1, B1, A1, C0, B0, A0, M0, LSR, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40071 \limit_check/logic_check/count_31__I_0_142_i20_3_lut_3_lut ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i13061_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0018 \i2c_slave_top/registers/addr_i_reg_i7_3438_3439_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_603 ( input C1, B1, A1, C0, B0, A0, M0, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40076 \i2c_slave_top/registers/i13050_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i13059_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0018 \i2c_slave_top/registers/addr_i_reg_i6_3434_3435_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_604 ( input C1, B1, A1, C0, B0, A0, M0, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40076 \i2c_slave_top/registers/i13052_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i13058_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0018 \i2c_slave_top/registers/addr_i_reg_i5_3430_3431_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_605 ( input C1, B1, A1, C0, B0, A0, M0, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40076 \i2c_slave_top/registers/i13053_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i13056_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0018 \i2c_slave_top/registers/addr_i_reg_i4_3426_3427_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_606 ( input C1, B1, A1, C0, B0, A0, M0, LSR, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40071 \limit_check/logic_check/count_31__I_0_142_i22_3_lut_3_lut ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \i2c_slave_top/registers/i13055_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0018 \i2c_slave_top/registers/addr_i_reg_i3_3422_3423_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_607 ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40171 \reset_generator/i1_2_lut_rep_340_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40044 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40171 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF3B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_608
   ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly;

  lut40104 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/select_729_Select_4_i6_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40141 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i12166_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/d_ff_753 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_609
   ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40140 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1929_4_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40009 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_2_lut ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_610
   ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40172 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i211_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40044 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_adj_155 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40172 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0C4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_611 ( input C1, B1, A1, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40071 \limit_check/logic_check/count_31__I_0_i14_3_lut_3_lut ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 \limit_check/logic_check/count_31__I_0_142_i14_3_lut_3_lut ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i19 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i18 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_612 ( input B1, A1, B0, A0, M1, M0, CE, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i35_2_lut_rep_440 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \limit_check/logic_check/count_31__I_0_142_i35_2_lut_rep_413 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/pwm_current_limit_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/pwm_current_limit_i0 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_613 ( input C1, B1, A1, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40071 \limit_check/logic_check/count_31__I_0_i8_3_lut_3_lut ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 \limit_check/logic_check/count_31__I_0_142_i8_3_lut_3_lut ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0007 \i2c_slave_top/registers/pwm_mon_current_limit_i5 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/pwm_mon_current_limit_i4 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_614 ( input B1, A1, B0, A0, M1, M0, CE, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i19_2_lut_rep_477 ( 
    .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \limit_check/logic_check/count_31__I_0_142_i19_2_lut_rep_419 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i25 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i24 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_615 ( input C1, B1, A1, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40071 \limit_check/logic_check/count_31__I_0_i10_3_lut_3_lut ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 \limit_check/logic_check/count_31__I_0_142_i10_3_lut_3_lut ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i11 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0007 \i2c_slave_top/registers/pulse_width_upper_limit_i10 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_616 ( input C1, B1, A1, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40072 \limit_check/logic_check/i13381_2_lut_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i41_2_lut_rep_431 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_617 ( input B1, A1, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40009 \limit_check/logic_check/i76_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40163 \limit_check/logic_check/i1_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_618 ( input B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40010 \limit_check/logic_check/count_31__I_0_i15_2_lut_rep_384 ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i15_2_lut_rep_475 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_619 ( input C1, B1, A1, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40071 \limit_check/logic_check/count_31__I_0_i12_3_lut_3_lut ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i33_2_lut_rep_485 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_620 ( input B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40010 \limit_check/logic_check/count_31__I_0_i9_2_lut ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i9_2_lut 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_621 ( input B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40010 \limit_check/logic_check/count_31__I_0_142_i25_2_lut ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i25_2_lut 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_622 ( input B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40074 \limit_check/logic_check/i1250_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40053 \limit_check/logic_check/i1_2_lut_adj_121 ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_control_SLICE_623 ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40173 \adc_control/i991_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40053 \adc_control/i2_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40173 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFCEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_624 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40121 \i2c_slave_top/registers/i1736_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40076 \i2c_slave_top/registers/i3436_3_lut_rep_482 ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_625 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40071 \limit_check/logic_check/count_31__I_0_i20_3_lut_3_lut ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40153 \limit_check/logic_check/i12750_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_626 ( input B1, A1, B0, A0, M1, M0, CE, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40010 \limit_check/logic_check/count_31__I_0_i37_2_lut_rep_381 ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \limit_check/logic_check/count_31__I_0_142_i39_2_lut_rep_403 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0007 \i2c_slave_top/registers/pwm_current_limit_i13 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0007 \i2c_slave_top/registers/pwm_current_limit_i12 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_627 ( input B1, A1, B0, A0, M1, M0, CE, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40010 \limit_check/logic_check/count_31__I_0_142_i9_2_lut ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \limit_check/logic_check/count_31__I_0_142_i11_2_lut ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i13 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/pulse_width_upper_limit_i12 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_628 ( input B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i27_2_lut_rep_488 ( 
    .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i13_2_lut_rep_479 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_629 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40039 \reset_generator/i1_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40161 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_696_I_0_237_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_630 ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40075 \i2c_slave_top/registers/i12154_2_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40010 
    \limit_check/logic_check/rate_upper_limit_31__I_0_i17_2_lut_rep_476 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module limit_check_logic_check_SLICE_631 ( input C1, B1, A1, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40071 \limit_check/logic_check/count_31__I_0_i16_3_lut_3_lut ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 
    \limit_check/logic_check/pulse_width_upper_limit_31__I_0_i19_2_lut_rep_444 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module laser_pwr_en1_n ( input PADDO, output laser_pwr_en1_n );
  wire   GNDI;

  xo2iobuf laser_pwr_en1_n_pad( .I(PADDO), .T(GNDI), .PAD(laser_pwr_en1_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => laser_pwr_en1_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module sda ( output PADDI, input PADDT, PADDO, inout sda );

  xo2iobuf0174 sda_pad( .I(PADDO), .T(PADDT), .Z(PADDI), .PAD(sda), .PADI(sda));

  specify
    (PADDT => sda) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => sda) = (0:0:0,0:0:0);
    (sda => PADDI) = (0:0:0,0:0:0);
    $width (posedge sda, 0:0:0);
    $width (negedge sda, 0:0:0);
  endspecify

endmodule

module xo2iobuf0174 ( input I, T, output Z, PAD, input PADI );

  IBPD INST1( .I(PADI), .O(Z));
  OBZPD INST2( .I(I), .T(T), .O(PAD));
endmodule

module scl ( output PADDI, input PADDO, inout scl );
  wire   VCCI;

  xo2iobuf0175 scl_pad( .I(PADDO), .T(VCCI), .Z(PADDI), .PAD(scl), .PADI(scl));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => scl) = (0:0:0,0:0:0);
    (scl => PADDI) = (0:0:0,0:0:0);
    $width (posedge scl, 0:0:0);
    $width (negedge scl, 0:0:0);
  endspecify

endmodule

module xo2iobuf0175 ( input I, T, output Z, PAD, input PADI );

  IBPD INST1( .I(PADI), .O(Z));
  OBZPD INST2( .I(I), .T(T), .O(PAD));
endmodule

module watchdog_timeout_led_n ( input PADDO, output watchdog_timeout_led_n );
  wire   GNDI;

  xo2iobuf watchdog_timeout_led_n_pad( .I(PADDO), .T(GNDI), 
    .PAD(watchdog_timeout_led_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => watchdog_timeout_led_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module calibrated_led_n ( input PADDO, output calibrated_led_n );
  wire   GNDI;

  xo2iobuf calibrated_led_n_pad( .I(PADDO), .T(GNDI), .PAD(calibrated_led_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => calibrated_led_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module peak_error_led_n ( input PADDO, output peak_error_led_n );
  wire   GNDI;

  xo2iobuf peak_error_led_n_pad( .I(PADDO), .T(GNDI), .PAD(peak_error_led_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => peak_error_led_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module pulse_error_led_n ( input PADDO, output pulse_error_led_n );
  wire   GNDI;

  xo2iobuf pulse_error_led_n_pad( .I(PADDO), .T(GNDI), .PAD(pulse_error_led_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => pulse_error_led_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module rate_error_led_n ( input PADDO, output rate_error_led_n );
  wire   GNDI;

  xo2iobuf rate_error_led_n_pad( .I(PADDO), .T(GNDI), .PAD(rate_error_led_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => rate_error_led_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module test_pass_led_n ( input PADDO, output test_pass_led_n );
  wire   GNDI;

  xo2iobuf test_pass_led_n_pad( .I(PADDO), .T(GNDI), .PAD(test_pass_led_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => test_pass_led_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module test_fail_led_n ( input PADDO, output test_fail_led_n );
  wire   GNDI;

  xo2iobuf test_fail_led_n_pad( .I(PADDO), .T(GNDI), .PAD(test_fail_led_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => test_fail_led_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module TA_shutdown ( input PADDO, output TA_shutdown );
  wire   GNDI;

  xo2iobuf TA_shutdown_pad( .I(PADDO), .T(GNDI), .PAD(TA_shutdown));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => TA_shutdown) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_sck ( input PADDO, output adc_sck );
  wire   GNDI;

  xo2iobuf adc_sck_pad( .I(PADDO), .T(GNDI), .PAD(adc_sck));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => adc_sck) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_convert ( input PADDO, output adc_convert );
  wire   GNDI;

  xo2iobuf adc_convert_pad( .I(PADDO), .T(GNDI), .PAD(adc_convert));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => adc_convert) = (0:0:0,0:0:0);
  endspecify

endmodule

module temp_scl ( input PADDO, output temp_scl );
  wire   GNDI;

  xo2iobuf temp_scl_pad( .I(PADDO), .T(GNDI), .PAD(temp_scl));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => temp_scl) = (0:0:0,0:0:0);
  endspecify

endmodule

module temp_sda ( input PADDO, output temp_sda );
  wire   GNDI;

  xo2iobuf temp_sda_pad( .I(PADDO), .T(GNDI), .PAD(temp_sda));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => temp_sda) = (0:0:0,0:0:0);
  endspecify

endmodule

module prom_scl ( input PADDO, output prom_scl );
  wire   GNDI;

  xo2iobuf prom_scl_pad( .I(PADDO), .T(GNDI), .PAD(prom_scl));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => prom_scl) = (0:0:0,0:0:0);
  endspecify

endmodule

module prom_sda ( input PADDO, output prom_sda );
  wire   GNDI;

  xo2iobuf prom_sda_pad( .I(PADDO), .T(GNDI), .PAD(prom_sda));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => prom_sda) = (0:0:0,0:0:0);
  endspecify

endmodule

module heartbeat_n ( input PADDO, output heartbeat_n );
  wire   GNDI;

  xo2iobuf heartbeat_n_pad( .I(PADDO), .T(GNDI), .PAD(heartbeat_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => heartbeat_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module spare1 ( input PADDO, output spare1 );
  wire   GNDI;

  xo2iobuf spare1_pad( .I(PADDO), .T(GNDI), .PAD(spare1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => spare1) = (0:0:0,0:0:0);
  endspecify

endmodule

module spare2 ( input PADDO, output spare2 );
  wire   GNDI;

  xo2iobuf spare2_pad( .I(PADDO), .T(GNDI), .PAD(spare2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => spare2) = (0:0:0,0:0:0);
  endspecify

endmodule

module spare3 ( input PADDO, output spare3 );
  wire   GNDI;

  xo2iobuf spare3_pad( .I(PADDO), .T(GNDI), .PAD(spare3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => spare3) = (0:0:0,0:0:0);
  endspecify

endmodule

module spare4 ( input PADDO, output spare4 );
  wire   GNDI;

  xo2iobuf spare4_pad( .I(PADDO), .T(GNDI), .PAD(spare4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => spare4) = (0:0:0,0:0:0);
  endspecify

endmodule

module gpio1 ( input PADDO, output gpio1 );
  wire   GNDI;

  xo2iobuf gpio1_pad( .I(PADDO), .T(GNDI), .PAD(gpio1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => gpio1) = (0:0:0,0:0:0);
  endspecify

endmodule

module gpio2 ( input PADDO, output gpio2 );
  wire   GNDI;

  xo2iobuf gpio2_pad( .I(PADDO), .T(GNDI), .PAD(gpio2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => gpio2) = (0:0:0,0:0:0);
  endspecify

endmodule

module gpio3 ( input PADDO, output gpio3 );
  wire   GNDI;

  xo2iobuf gpio3_pad( .I(PADDO), .T(GNDI), .PAD(gpio3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => gpio3) = (0:0:0,0:0:0);
  endspecify

endmodule

module gpio4 ( input PADDO, output gpio4 );
  wire   GNDI;

  xo2iobuf gpio4_pad( .I(PADDO), .T(GNDI), .PAD(gpio4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => gpio4) = (0:0:0,0:0:0);
  endspecify

endmodule

module rstn ( output PADDI, input rstn );

  xo2iobuf0176 rstn_pad( .Z(PADDI), .PAD(rstn));

  specify
    (rstn => PADDI) = (0:0:0,0:0:0);
    $width (posedge rstn, 0:0:0);
    $width (negedge rstn, 0:0:0);
  endspecify

endmodule

module xo2iobuf0176 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module system_reset_n ( output PADDI, input system_reset_n );

  xo2iobuf0176 system_reset_n_pad( .Z(PADDI), .PAD(system_reset_n));

  specify
    (system_reset_n => PADDI) = (0:0:0,0:0:0);
    $width (posedge system_reset_n, 0:0:0);
    $width (negedge system_reset_n, 0:0:0);
  endspecify

endmodule

module clk_50mhz ( output PADDI, input clk_50mhz );

  xo2iobuf0176 clk_50mhz_pad( .Z(PADDI), .PAD(clk_50mhz));

  specify
    (clk_50mhz => PADDI) = (0:0:0,0:0:0);
    $width (posedge clk_50mhz, 0:0:0);
    $width (negedge clk_50mhz, 0:0:0);
  endspecify

endmodule

module laser_pulse ( output PADDI, input laser_pulse );

  xo2iobuf0176 laser_pulse_pad( .Z(PADDI), .PAD(laser_pulse));

  specify
    (laser_pulse => PADDI) = (0:0:0,0:0:0);
    $width (posedge laser_pulse, 0:0:0);
    $width (negedge laser_pulse, 0:0:0);
  endspecify

endmodule

module pwr_good ( output PADDI, input pwr_good );

  xo2iobuf0176 pwr_good_pad( .Z(PADDI), .PAD(pwr_good));

  specify
    (pwr_good => PADDI) = (0:0:0,0:0:0);
    $width (posedge pwr_good, 0:0:0);
    $width (negedge pwr_good, 0:0:0);
  endspecify

endmodule

module adc_sdo ( output PADDI, input adc_sdo );

  xo2iobuf0176 spare3_c_pad( .Z(PADDI), .PAD(adc_sdo));

  specify
    (adc_sdo => PADDI) = (0:0:0,0:0:0);
    $width (posedge adc_sdo, 0:0:0);
    $width (negedge adc_sdo, 0:0:0);
  endspecify

endmodule

module GSR_INST ( input GSRNET );

  GSR5MODE GSR_INST_GSRMODE( .GSR(GSRNET));

  specify
  endspecify

endmodule

module GSR5MODE ( input GSR );
  wire   GSRMODE;

  BUFBA INST10( .A(GSR), .Z(GSRMODE));
  GSR INST20( .GSR(GSRMODE));
endmodule
